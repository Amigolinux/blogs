<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kamidox.com</title><link href="http://blog.kamidox.com/" rel="alternate"></link><link href="http://blog.kamidox.com/feeds/atom.xml" rel="self"></link><id>http://blog.kamidox.com/</id><updated>2015-10-01T23:36:00+08:00</updated><entry><title>一个加速访问 StackOverflow 的方法</title><link href="http://blog.kamidox.com/local-cdn.html" rel="alternate"></link><updated>2015-10-01T23:36:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-10-01:local-cdn.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;安全预警&lt;/strong&gt;：最近的 xcode ghost 事件让大家的安全意识提高了不少。本文介绍的方法可能存在一些安全隐患。当然，解决方案也是有的，就是可以把本地 cdn 加速的文件和官网发布的正式版本做 md5 检验，这样确保本地文件没有被修改。由于目前还没有实现 md5 检验。请确保你自己清楚你在做什么，否则可能导致你的计算机被恶意的人植入后门。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;问题&lt;/h2&gt;
&lt;p&gt;访问 StackOverflow 时奇慢无比有没有？其实原因不是因为 StackOverflow 不能访问，而是因为 StackOverflow 网站引用了 Google 的 CDN 加速服务器来下载 jqeury 脚本。&lt;a href="http://www.zhihu.com/question/22909851"&gt;知乎上有个话题&lt;/a&gt;讨论了这个问题。&lt;/p&gt;
&lt;h2 id="_2"&gt;解决方案&lt;/h2&gt;
&lt;p&gt;在本地搭建一个 web 服务器，然后下载好 jquery 脚本，放在本地 web 服务器上。再修改 hosts 文件，把 ajax.googleapis.com 重定向到本地 127.0.0.1 。这样浏览器就会从本地下载脚本，而不再从 ajax.googleapis.com 下载了。&lt;/p&gt;
&lt;h2 id="_3"&gt;详细步骤&lt;/h2&gt;
&lt;p&gt;这里将介绍详细的安装和配置过程，需要注意的是所有的目录和命令以我的 mac 下的环境为例。如果你用的是不同的版本或不同的操作系统，根据你的情况完成相应的配置即可。&lt;/p&gt;
&lt;h3 id="nginx"&gt;安装 nginx 服务器&lt;/h3&gt;
&lt;p&gt;网上一堆教程，搜索一下就可以成功安装，需要注意的是两点。一是需要设置 nginx 开机启动。二是需要修改 nginx 运行权限，因为我们要在 80 端口提供服务，80 端口需要 root 权限才可以。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置 nginx 开机启动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把下面文件内容保存到 &lt;code&gt;/Library/LaunchAgents/com.nginx.plist&lt;/code&gt;。然后运行 &lt;code&gt;launchctl load -w /Library/LaunchAgents/com.nginx.plist&lt;/code&gt;。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800"&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;plist&lt;/span&gt; &lt;span style="color: #BB4444"&gt;version=&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&lt;/span&gt;
  &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;homebrew.mxcl.nginx&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;KeepAlive&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/usr/local/opt/nginx/bin/nginx&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;-g&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;daemon off;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;WorkingDirectory&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/usr/local&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardErrorPath&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/usr/local/var/log/nginx/error.log&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardOutPath&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/usr/local/var/log/nginx/access.log&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;修改 nginx 运行权限&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;sudo chown root:admin /usr/local/Cellar/nginx/1.8.0/bin/nginx
sudo chmod u+s /usr/local/Cellar/nginx/1.8.0/bin/nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="nginx_1"&gt;配置 nginx 服务器&lt;/h3&gt;
&lt;p&gt;配置 nginx 服务器主要分两步。一是生成 ssl 证书，用来提供 https 服务。二是下载 local-cdn 到本地，将配置 nginx 指向这个本地目录以便提供 cdn 服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成 ssl 证书&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们本地 cdn 还需要支持 ssl，所以需要做一个自签名的证书。下面命令会在 &lt;code&gt;/usr/local/etc/nginx/ssl/&lt;/code&gt; 目录下生成一个自签名的证书。这个证书后面会用到。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;mkdir -p /usr/local/etc/nginx/ssl
openssl req -x509 -nodes -days &lt;span style="color: #666666"&gt;3650&lt;/span&gt; -newkey rsa:2048 -keyout /usr/local/etc/nginx/ssl/nginx.key -out /usr/local/etc/nginx/ssl/nginx.crt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;配置 nginx 服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把 local-cdn 下载到本地，比如放在 &lt;code&gt;/Users/kamidox/work/local-cdn&lt;/code&gt;。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;cd&lt;/span&gt; /Users/kamidox/work/
git clone https://github.com/kamidox/local-cdn.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后配置 nginx 添加这个目录当作内容目录。我们把下面内容保存到 &lt;code&gt;/usr/local/etc/nginx/servers/local-cdn.conf&lt;/code&gt;。注意配置中用到了我们上面生成的证书。另外，nginx 默认会 include &lt;code&gt;/usr/local/etc/nginx/servers/&lt;/code&gt; 下的所有配置文件。如果你修改过 nginx 的默认配置，根据你自己的情况配置即可。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;server {
    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;
    charset utf-8;

    listen 443 ssl;

    server_name localhost;
    ssl_certificate /usr/local/etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /usr/local/etc/nginx/ssl/nginx.key;

    location / {
        root /Users/kamidox/work/local-cdn/;
        index index.html index.htm;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="contribution"&gt;Contribution&lt;/h2&gt;
&lt;p&gt;欢迎大家&lt;a href="https://github.com/kamidox/local-cdn"&gt;提 pull request&lt;/a&gt;，一起完善科学文明的上网环境。&lt;/p&gt;</summary><category term="tools"></category></entry><entry><title>numpy 矩阵运算的陷阱</title><link href="http://blog.kamidox.com/trap-of-numpy.html" rel="alternate"></link><updated>2015-09-30T20:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-09-30:trap-of-numpy.html</id><summary type="html">&lt;h2 id="_1"&gt;陷阱一：数据结构混乱&lt;/h2&gt;
&lt;p&gt;array 和 matrix 都可以用来表示多维矩阵&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;In [&lt;span style="color: #666666"&gt;98&lt;/span&gt;]: a &lt;span style="color: #666666"&gt;=&lt;/span&gt; np&lt;span style="color: #666666"&gt;.&lt;/span&gt;array([[&lt;span style="color: #666666"&gt;1&lt;/span&gt;, &lt;span style="color: #666666"&gt;2&lt;/span&gt;, &lt;span style="color: #666666"&gt;3&lt;/span&gt;], [&lt;span style="color: #666666"&gt;4&lt;/span&gt;, &lt;span style="color: #666666"&gt;5&lt;/span&gt;, &lt;span style="color: #666666"&gt;6&lt;/span&gt;], [&lt;span style="color: #666666"&gt;7&lt;/span&gt;, &lt;span style="color: #666666"&gt;8&lt;/span&gt;, &lt;span style="color: #666666"&gt;9&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;99&lt;/span&gt;]: a
Out[&lt;span style="color: #666666"&gt;99&lt;/span&gt;]:
array([[&lt;span style="color: #666666"&gt;1&lt;/span&gt;, &lt;span style="color: #666666"&gt;2&lt;/span&gt;, &lt;span style="color: #666666"&gt;3&lt;/span&gt;],
       [&lt;span style="color: #666666"&gt;4&lt;/span&gt;, &lt;span style="color: #666666"&gt;5&lt;/span&gt;, &lt;span style="color: #666666"&gt;6&lt;/span&gt;],
       [&lt;span style="color: #666666"&gt;7&lt;/span&gt;, &lt;span style="color: #666666"&gt;8&lt;/span&gt;, &lt;span style="color: #666666"&gt;9&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;100&lt;/span&gt;]: A &lt;span style="color: #666666"&gt;=&lt;/span&gt; np&lt;span style="color: #666666"&gt;.&lt;/span&gt;matrix([[&lt;span style="color: #666666"&gt;1&lt;/span&gt;, &lt;span style="color: #666666"&gt;2&lt;/span&gt;, &lt;span style="color: #666666"&gt;3&lt;/span&gt;], [&lt;span style="color: #666666"&gt;4&lt;/span&gt;, &lt;span style="color: #666666"&gt;5&lt;/span&gt;, &lt;span style="color: #666666"&gt;6&lt;/span&gt;], [&lt;span style="color: #666666"&gt;7&lt;/span&gt;, &lt;span style="color: #666666"&gt;8&lt;/span&gt;, &lt;span style="color: #666666"&gt;9&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;101&lt;/span&gt;]: A
Out[&lt;span style="color: #666666"&gt;101&lt;/span&gt;]:
matrix([[&lt;span style="color: #666666"&gt;1&lt;/span&gt;, &lt;span style="color: #666666"&gt;2&lt;/span&gt;, &lt;span style="color: #666666"&gt;3&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;4&lt;/span&gt;, &lt;span style="color: #666666"&gt;5&lt;/span&gt;, &lt;span style="color: #666666"&gt;6&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;7&lt;/span&gt;, &lt;span style="color: #666666"&gt;8&lt;/span&gt;, &lt;span style="color: #666666"&gt;9&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;102&lt;/span&gt;]: a&lt;span style="color: #666666"&gt;.&lt;/span&gt;shape
Out[&lt;span style="color: #666666"&gt;102&lt;/span&gt;]: (&lt;span style="color: #666666"&gt;3&lt;/span&gt;, &lt;span style="color: #666666"&gt;3&lt;/span&gt;)

In [&lt;span style="color: #666666"&gt;103&lt;/span&gt;]: A&lt;span style="color: #666666"&gt;.&lt;/span&gt;shape
Out[&lt;span style="color: #666666"&gt;103&lt;/span&gt;]: (&lt;span style="color: #666666"&gt;3&lt;/span&gt;, &lt;span style="color: #666666"&gt;3&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看起来效果不错。假设我们要对数据进行筛选，取第 1 列的第 1 行和第 3 行数据构成一个 2 x 1 的列向量。先看对 array 的做法&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;In [&lt;span style="color: #666666"&gt;99&lt;/span&gt;]: a
Out[&lt;span style="color: #666666"&gt;99&lt;/span&gt;]:
array([[&lt;span style="color: #666666"&gt;1&lt;/span&gt;, &lt;span style="color: #666666"&gt;2&lt;/span&gt;, &lt;span style="color: #666666"&gt;3&lt;/span&gt;],
       [&lt;span style="color: #666666"&gt;4&lt;/span&gt;, &lt;span style="color: #666666"&gt;5&lt;/span&gt;, &lt;span style="color: #666666"&gt;6&lt;/span&gt;],
       [&lt;span style="color: #666666"&gt;7&lt;/span&gt;, &lt;span style="color: #666666"&gt;8&lt;/span&gt;, &lt;span style="color: #666666"&gt;9&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;100&lt;/span&gt;]: y
Out[&lt;span style="color: #666666"&gt;100&lt;/span&gt;]:
matrix([[&lt;span style="color: #666666"&gt;1&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;0&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;1&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;101&lt;/span&gt;]: a[:, &lt;span style="color: #666666"&gt;0&lt;/span&gt;]
Out[&lt;span style="color: #666666"&gt;101&lt;/span&gt;]: array([&lt;span style="color: #666666"&gt;1&lt;/span&gt;, &lt;span style="color: #666666"&gt;4&lt;/span&gt;, &lt;span style="color: #666666"&gt;7&lt;/span&gt;])

In [&lt;span style="color: #666666"&gt;102&lt;/span&gt;]: a[:, &lt;span style="color: #666666"&gt;0&lt;/span&gt;]&lt;span style="color: #666666"&gt;.&lt;/span&gt;shape
Out[&lt;span style="color: #666666"&gt;102&lt;/span&gt;]: (&lt;span style="color: #666666"&gt;3&lt;/span&gt;,)

In [&lt;span style="color: #666666"&gt;110&lt;/span&gt;]: a[:, &lt;span style="color: #666666"&gt;0&lt;/span&gt;][y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #666666"&gt;1&lt;/span&gt;]
&lt;span style="color: #666666"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style="color: #D2413A; font-weight: bold"&gt;IndexError&lt;/span&gt;                                Traceback (most recent call last)
&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;ipython&lt;span style="color: #666666"&gt;-&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;input&lt;/span&gt;&lt;span style="color: #666666"&gt;-110-&lt;/span&gt;f32ed63aa2a8&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;module&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt;()
&lt;span style="color: #666666"&gt;----&amp;gt;&lt;/span&gt; &lt;span style="color: #666666"&gt;1&lt;/span&gt; a[:, &lt;span style="color: #666666"&gt;0&lt;/span&gt;][y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #666666"&gt;1&lt;/span&gt;]

&lt;span style="color: #D2413A; font-weight: bold"&gt;IndexError&lt;/span&gt;: too many indices &lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt; array

In [&lt;span style="color: #666666"&gt;111&lt;/span&gt;]: a[:, &lt;span style="color: #666666"&gt;0&lt;/span&gt;]&lt;span style="color: #666666"&gt;.&lt;/span&gt;reshape(&lt;span style="color: #666666"&gt;3&lt;/span&gt;, &lt;span style="color: #666666"&gt;1&lt;/span&gt;)[y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #666666"&gt;1&lt;/span&gt;]
Out[&lt;span style="color: #666666"&gt;111&lt;/span&gt;]: array([&lt;span style="color: #666666"&gt;1&lt;/span&gt;, &lt;span style="color: #666666"&gt;7&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从 Out[101] 可以看到一个陷阱，&lt;code&gt;a[:, 0]&lt;/code&gt; 过滤完应该是一个 3 x 1 的列向量，可是它变成了行向量。其实也不是真正意义上的行向量，因为行向量 shape 应该是 3 x 1，可是他的 shape 是 (3,) ，这其实已经退化为一个数组了。所以，导致最后 In [110] 出错。只有像 In [111] 那样 reshape 一下才可以。我不知道大家晕了没有，我是已经快晕了。&lt;/p&gt;
&lt;p&gt;相比之下，matrix 可以确保运算结果全部是二维的，结果相对好一点。为什么只是相对好一点呢？呆会儿我们再来吐吐 matrix 的槽点。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;In [&lt;span style="color: #666666"&gt;101&lt;/span&gt;]: A
Out[&lt;span style="color: #666666"&gt;101&lt;/span&gt;]:
matrix([[&lt;span style="color: #666666"&gt;1&lt;/span&gt;, &lt;span style="color: #666666"&gt;2&lt;/span&gt;, &lt;span style="color: #666666"&gt;3&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;4&lt;/span&gt;, &lt;span style="color: #666666"&gt;5&lt;/span&gt;, &lt;span style="color: #666666"&gt;6&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;7&lt;/span&gt;, &lt;span style="color: #666666"&gt;8&lt;/span&gt;, &lt;span style="color: #666666"&gt;9&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;112&lt;/span&gt;]: y
Out[&lt;span style="color: #666666"&gt;112&lt;/span&gt;]:
matrix([[&lt;span style="color: #666666"&gt;1&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;0&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;1&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;113&lt;/span&gt;]: A[:,&lt;span style="color: #666666"&gt;0&lt;/span&gt;]
Out[&lt;span style="color: #666666"&gt;113&lt;/span&gt;]:
matrix([[&lt;span style="color: #666666"&gt;1&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;4&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;7&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;102&lt;/span&gt;]: A[:, &lt;span style="color: #666666"&gt;0&lt;/span&gt;]&lt;span style="color: #666666"&gt;.&lt;/span&gt;shape
Out[&lt;span style="color: #666666"&gt;102&lt;/span&gt;]: (&lt;span style="color: #666666"&gt;3&lt;/span&gt;,&lt;span style="color: #666666"&gt;1&lt;/span&gt;)

In [&lt;span style="color: #666666"&gt;114&lt;/span&gt;]: A[:,&lt;span style="color: #666666"&gt;0&lt;/span&gt;][y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #666666"&gt;1&lt;/span&gt;]
Out[&lt;span style="color: #666666"&gt;114&lt;/span&gt;]: matrix([[&lt;span style="color: #666666"&gt;1&lt;/span&gt;, &lt;span style="color: #666666"&gt;7&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;114&lt;/span&gt;]: A[:,&lt;span style="color: #666666"&gt;0&lt;/span&gt;][y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #666666"&gt;1&lt;/span&gt;]&lt;span style="color: #666666"&gt;.&lt;/span&gt;shape
Out[&lt;span style="color: #666666"&gt;114&lt;/span&gt;]: (&lt;span style="color: #666666"&gt;1&lt;/span&gt;,&lt;span style="color: #666666"&gt;2&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看起来还不错。不过槽点就来了。Out [114] 我们预期的输入结果应该是一个 2 x 1 的列向量，可是这里变成了 1 x 2 的行向量！&lt;/p&gt;
&lt;p&gt;为什么我会在意行向量和列向量？在矩阵运算里，行向量和列向量是不同的。比如一个 m x 3 的矩阵可以和 3 x 1 的列向量叉乘，结果是 m x 1 的列向量。而如果一个 m x 3 的矩阵和 1 x 3 的行向量叉乘是会报错的。&lt;/p&gt;
&lt;h2 id="_2"&gt;陷阱二：数据处理能力不足，语言效率低&lt;/h2&gt;
&lt;p&gt;我们再看个例子。假设 X 是 5 x 2 的矩阵，Y 是 5 X 1 的 bool 矩阵，我们想用 Y 来过滤 X ，即取出 Y 值为 True 的项的索引，拿这些索引去 X 里找出对应的行，再组合成一个新矩阵。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;In [&lt;span style="color: #666666"&gt;79&lt;/span&gt;]: X
Out[&lt;span style="color: #666666"&gt;79&lt;/span&gt;]:
matrix([[ &lt;span style="color: #666666"&gt;34.62365962&lt;/span&gt;,  &lt;span style="color: #666666"&gt;78.02469282&lt;/span&gt;],
        [ &lt;span style="color: #666666"&gt;30.28671077&lt;/span&gt;,  &lt;span style="color: #666666"&gt;43.89499752&lt;/span&gt;],
        [ &lt;span style="color: #666666"&gt;35.84740877&lt;/span&gt;,  &lt;span style="color: #666666"&gt;72.90219803&lt;/span&gt;],
        [ &lt;span style="color: #666666"&gt;60.18259939&lt;/span&gt;,  &lt;span style="color: #666666"&gt;86.3085521&lt;/span&gt; ],
        [ &lt;span style="color: #666666"&gt;79.03273605&lt;/span&gt;,  &lt;span style="color: #666666"&gt;75.34437644&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;80&lt;/span&gt;]: Y
Out[&lt;span style="color: #666666"&gt;80&lt;/span&gt;]:
matrix([[ &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;],
        [&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;],
        [ &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;],
        [ &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;],
        [&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;]], dtype&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;bool&lt;/span&gt;)

In [&lt;span style="color: #666666"&gt;81&lt;/span&gt;]: X[Y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;]
Out[&lt;span style="color: #666666"&gt;81&lt;/span&gt;]: matrix([[ &lt;span style="color: #666666"&gt;34.62365962&lt;/span&gt;,  &lt;span style="color: #666666"&gt;35.84740877&lt;/span&gt;,  &lt;span style="color: #666666"&gt;60.18259939&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;85&lt;/span&gt;]: X[Y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;, :]
&lt;span style="color: #666666"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style="color: #D2413A; font-weight: bold"&gt;IndexError&lt;/span&gt;                                Traceback (most recent call last)
&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;ipython&lt;span style="color: #666666"&gt;-&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;input&lt;/span&gt;&lt;span style="color: #666666"&gt;-85-2&lt;/span&gt;aeabbc2bcc5&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;module&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt;()
&lt;span style="color: #666666"&gt;----&amp;gt;&lt;/span&gt; &lt;span style="color: #666666"&gt;1&lt;/span&gt; X[Y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;, :]

C:\Python27\lib\site&lt;span style="color: #666666"&gt;-&lt;/span&gt;packages\numpy\matrixlib\defmatrix&lt;span style="color: #666666"&gt;.&lt;/span&gt;pyc &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; __getitem__(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, index)
    &lt;span style="color: #666666"&gt;314&lt;/span&gt;
    &lt;span style="color: #666666"&gt;315&lt;/span&gt;         &lt;span style="color: #AA22FF; font-weight: bold"&gt;try&lt;/span&gt;:
&lt;span style="color: #666666"&gt;--&amp;gt;&lt;/span&gt; &lt;span style="color: #666666"&gt;316&lt;/span&gt;             out &lt;span style="color: #666666"&gt;=&lt;/span&gt; N&lt;span style="color: #666666"&gt;.&lt;/span&gt;ndarray&lt;span style="color: #666666"&gt;.&lt;/span&gt;__getitem__(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, index)
    &lt;span style="color: #666666"&gt;317&lt;/span&gt;         &lt;span style="color: #AA22FF; font-weight: bold"&gt;finally&lt;/span&gt;:
    &lt;span style="color: #666666"&gt;318&lt;/span&gt;             &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;_getitem &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;

&lt;span style="color: #D2413A; font-weight: bold"&gt;IndexError&lt;/span&gt;: too many indices &lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt; array

In [&lt;span style="color: #666666"&gt;86&lt;/span&gt;]: X[:, &lt;span style="color: #666666"&gt;0&lt;/span&gt;][Y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;]
Out[&lt;span style="color: #666666"&gt;86&lt;/span&gt;]: matrix([[ &lt;span style="color: #666666"&gt;34.62365962&lt;/span&gt;,  &lt;span style="color: #666666"&gt;35.84740877&lt;/span&gt;,  &lt;span style="color: #666666"&gt;60.18259939&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;87&lt;/span&gt;]: X[:, &lt;span style="color: #666666"&gt;1&lt;/span&gt;][Y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;]
Out[&lt;span style="color: #666666"&gt;87&lt;/span&gt;]: matrix([[ &lt;span style="color: #666666"&gt;78.02469282&lt;/span&gt;,  &lt;span style="color: #666666"&gt;72.90219803&lt;/span&gt;,  &lt;span style="color: #666666"&gt;86.3085521&lt;/span&gt; ]])

In [&lt;span style="color: #666666"&gt;88&lt;/span&gt;]: np&lt;span style="color: #666666"&gt;.&lt;/span&gt;column_stack((x[:, &lt;span style="color: #666666"&gt;0&lt;/span&gt;][y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;]&lt;span style="color: #666666"&gt;.&lt;/span&gt;reshape(&lt;span style="color: #666666"&gt;3&lt;/span&gt;,&lt;span style="color: #666666"&gt;1&lt;/span&gt;), x[:, &lt;span style="color: #666666"&gt;1&lt;/span&gt;][y &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;]&lt;span style="color: #666666"&gt;.&lt;/span&gt;reshape(&lt;span style="color: #666666"&gt;3&lt;/span&gt;,&lt;span style="color: #666666"&gt;1&lt;/span&gt;)))
Out[&lt;span style="color: #666666"&gt;88&lt;/span&gt;]:
matrix([[ &lt;span style="color: #666666"&gt;34.62365962&lt;/span&gt;,  &lt;span style="color: #666666"&gt;78.02469282&lt;/span&gt;],
        [ &lt;span style="color: #666666"&gt;35.84740877&lt;/span&gt;,  &lt;span style="color: #666666"&gt;72.90219803&lt;/span&gt;],
        [ &lt;span style="color: #666666"&gt;60.18259939&lt;/span&gt;,  &lt;span style="color: #666666"&gt;86.3085521&lt;/span&gt; ]])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们预期 X 过滤完是 3 x 2 列的矩阵，但不幸的是从 Out[81] 来看 numpy 这样过滤完只会保留第一列的数据，且把它转化成了行向量，即变成了 1 x 3 的行向量。不知道你有没有抓狂的感觉。如果按照 In [85] 的写法，还会报错。如果要正确地过滤不同的列，需要写成 In [86] 和 In [87] 的形式。但是即使写成 In [86] 和 In [87] 的样式，还是一样把列向量转化成了行向量。所以，要实现这个目的，得复杂到按照 In [88] 那样才能达到目的。实际上，这个还达不到目的，因为那里面写了好多硬编码的数字，要处理通用的过滤情况，还需要写个函数来实现。而这个任务在 matlab/octave 里只需要写成 &lt;code&gt;X(Y==1, :)&lt;/code&gt; 即可完美达成目的。&lt;/p&gt;
&lt;h2 id="_3"&gt;陷阱三：数值运算句法混乱&lt;/h2&gt;
&lt;p&gt;在机器学习算法里，经常要做一些矩阵运算。有时候要做叉乘，有时候要做点乘。我们看一下 numpy 是如何满足这个需求的。&lt;/p&gt;
&lt;p&gt;假设 x, y, theta 的值如下，我们要先让 x 和 y 点乘，再让结果与 theta 叉乘，最后的结果我们期望的是一个 5 x 1 的列向量。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;In [&lt;span style="color: #666666"&gt;22&lt;/span&gt;]: x
Out[&lt;span style="color: #666666"&gt;22&lt;/span&gt;]:
matrix([[  &lt;span style="color: #666666"&gt;1.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;34.62365962&lt;/span&gt;,  &lt;span style="color: #666666"&gt;78.02469282&lt;/span&gt;],
        [  &lt;span style="color: #666666"&gt;1.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;30.28671077&lt;/span&gt;,  &lt;span style="color: #666666"&gt;43.89499752&lt;/span&gt;],
        [  &lt;span style="color: #666666"&gt;1.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;35.84740877&lt;/span&gt;,  &lt;span style="color: #666666"&gt;72.90219803&lt;/span&gt;],
        [  &lt;span style="color: #666666"&gt;1.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;60.18259939&lt;/span&gt;,  &lt;span style="color: #666666"&gt;86.3085521&lt;/span&gt; ],
        [  &lt;span style="color: #666666"&gt;1.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;79.03273605&lt;/span&gt;,  &lt;span style="color: #666666"&gt;75.34437644&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;23&lt;/span&gt;]: y
Out[&lt;span style="color: #666666"&gt;23&lt;/span&gt;]:
matrix([[&lt;span style="color: #666666"&gt;1&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;2&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;3&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;2&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;2&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;24&lt;/span&gt;]: theta
Out[&lt;span style="color: #666666"&gt;24&lt;/span&gt;]:
matrix([[&lt;span style="color: #666666"&gt;2&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;2&lt;/span&gt;],
        [&lt;span style="color: #666666"&gt;2&lt;/span&gt;]])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直观地讲，我们应该会想这样做：(x 点乘 y) 叉乘 theta。但很不幸，当你输入 &lt;code&gt;x * y&lt;/code&gt; 时妥妥地报错。那好吧，我们这样做总行了吧，&lt;code&gt;x[:, 0] * y&lt;/code&gt; 这样两个列向量就可以点乘了吧，不幸的还是不行，因为 numpy 认为这是 matrix，所以执行的是矩阵相乘（叉乘），要做点乘，必须转为 array 。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;In [&lt;span style="color: #666666"&gt;37&lt;/span&gt;]: x &lt;span style="color: #666666"&gt;*&lt;/span&gt; y
&lt;span style="color: #666666"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style="color: #D2413A; font-weight: bold"&gt;ValueError&lt;/span&gt;                                Traceback (most recent call last)
&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;ipython&lt;span style="color: #666666"&gt;-&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;input&lt;/span&gt;&lt;span style="color: #666666"&gt;-37-&lt;/span&gt;ae1a0a4af750&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;module&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt;()
&lt;span style="color: #666666"&gt;----&amp;gt;&lt;/span&gt; &lt;span style="color: #666666"&gt;1&lt;/span&gt; x &lt;span style="color: #666666"&gt;*&lt;/span&gt; y

&lt;span style="color: #666666"&gt;/&lt;/span&gt;System&lt;span style="color: #666666"&gt;/&lt;/span&gt;Library&lt;span style="color: #666666"&gt;/&lt;/span&gt;Frameworks&lt;span style="color: #666666"&gt;/&lt;/span&gt;Python&lt;span style="color: #666666"&gt;.&lt;/span&gt;framework&lt;span style="color: #666666"&gt;/&lt;/span&gt;Versions&lt;span style="color: #666666"&gt;/2.7/&lt;/span&gt;Extras&lt;span style="color: #666666"&gt;/&lt;/span&gt;lib&lt;span style="color: #666666"&gt;/&lt;/span&gt;python&lt;span style="color: #666666"&gt;/&lt;/span&gt;numpy&lt;span style="color: #666666"&gt;/&lt;/span&gt;matrixlib&lt;span style="color: #666666"&gt;/&lt;/span&gt;defmatrix&lt;span style="color: #666666"&gt;.&lt;/span&gt;pyc &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; __mul__(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, other)
    &lt;span style="color: #666666"&gt;339&lt;/span&gt;         &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;isinstance&lt;/span&gt;(other, (N&lt;span style="color: #666666"&gt;.&lt;/span&gt;ndarray, &lt;span style="color: #AA22FF"&gt;list&lt;/span&gt;, &lt;span style="color: #AA22FF"&gt;tuple&lt;/span&gt;)) :
    &lt;span style="color: #666666"&gt;340&lt;/span&gt;             &lt;span style="color: #008800; font-style: italic"&gt;# This promotes 1-D vectors to row vectors&lt;/span&gt;
&lt;span style="color: #666666"&gt;--&amp;gt;&lt;/span&gt; &lt;span style="color: #666666"&gt;341&lt;/span&gt;             &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; N&lt;span style="color: #666666"&gt;.&lt;/span&gt;dot(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, asmatrix(other))
    &lt;span style="color: #666666"&gt;342&lt;/span&gt;         &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; isscalar(other) &lt;span style="color: #AA22FF; font-weight: bold"&gt;or&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;hasattr&lt;/span&gt;(other, &lt;span style="color: #BB4444"&gt;&amp;#39;__rmul__&amp;#39;&lt;/span&gt;) :
    &lt;span style="color: #666666"&gt;343&lt;/span&gt;             &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; N&lt;span style="color: #666666"&gt;.&lt;/span&gt;dot(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, other)

&lt;span style="color: #D2413A; font-weight: bold"&gt;ValueError&lt;/span&gt;: matrices are &lt;span style="color: #AA22FF; font-weight: bold"&gt;not&lt;/span&gt; aligned

In [&lt;span style="color: #666666"&gt;38&lt;/span&gt;]: x[:, &lt;span style="color: #666666"&gt;0&lt;/span&gt;] &lt;span style="color: #666666"&gt;*&lt;/span&gt; y
&lt;span style="color: #666666"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style="color: #D2413A; font-weight: bold"&gt;ValueError&lt;/span&gt;                                Traceback (most recent call last)
&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;ipython&lt;span style="color: #666666"&gt;-&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;input&lt;/span&gt;&lt;span style="color: #666666"&gt;-38-&lt;/span&gt;d55ad841fa29&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;module&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt;()
&lt;span style="color: #666666"&gt;----&amp;gt;&lt;/span&gt; &lt;span style="color: #666666"&gt;1&lt;/span&gt; x[:, &lt;span style="color: #666666"&gt;0&lt;/span&gt;] &lt;span style="color: #666666"&gt;*&lt;/span&gt; y

&lt;span style="color: #666666"&gt;/&lt;/span&gt;System&lt;span style="color: #666666"&gt;/&lt;/span&gt;Library&lt;span style="color: #666666"&gt;/&lt;/span&gt;Frameworks&lt;span style="color: #666666"&gt;/&lt;/span&gt;Python&lt;span style="color: #666666"&gt;.&lt;/span&gt;framework&lt;span style="color: #666666"&gt;/&lt;/span&gt;Versions&lt;span style="color: #666666"&gt;/2.7/&lt;/span&gt;Extras&lt;span style="color: #666666"&gt;/&lt;/span&gt;lib&lt;span style="color: #666666"&gt;/&lt;/span&gt;python&lt;span style="color: #666666"&gt;/&lt;/span&gt;numpy&lt;span style="color: #666666"&gt;/&lt;/span&gt;matrixlib&lt;span style="color: #666666"&gt;/&lt;/span&gt;defmatrix&lt;span style="color: #666666"&gt;.&lt;/span&gt;pyc &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; __mul__(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, other)
    &lt;span style="color: #666666"&gt;339&lt;/span&gt;         &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;isinstance&lt;/span&gt;(other, (N&lt;span style="color: #666666"&gt;.&lt;/span&gt;ndarray, &lt;span style="color: #AA22FF"&gt;list&lt;/span&gt;, &lt;span style="color: #AA22FF"&gt;tuple&lt;/span&gt;)) :
    &lt;span style="color: #666666"&gt;340&lt;/span&gt;             &lt;span style="color: #008800; font-style: italic"&gt;# This promotes 1-D vectors to row vectors&lt;/span&gt;
&lt;span style="color: #666666"&gt;--&amp;gt;&lt;/span&gt; &lt;span style="color: #666666"&gt;341&lt;/span&gt;             &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; N&lt;span style="color: #666666"&gt;.&lt;/span&gt;dot(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, asmatrix(other))
    &lt;span style="color: #666666"&gt;342&lt;/span&gt;         &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; isscalar(other) &lt;span style="color: #AA22FF; font-weight: bold"&gt;or&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;hasattr&lt;/span&gt;(other, &lt;span style="color: #BB4444"&gt;&amp;#39;__rmul__&amp;#39;&lt;/span&gt;) :
    &lt;span style="color: #666666"&gt;343&lt;/span&gt;             &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; N&lt;span style="color: #666666"&gt;.&lt;/span&gt;dot(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, other)

&lt;span style="color: #D2413A; font-weight: bold"&gt;ValueError&lt;/span&gt;: matrices are &lt;span style="color: #AA22FF; font-weight: bold"&gt;not&lt;/span&gt; aligned

In [&lt;span style="color: #666666"&gt;39&lt;/span&gt;]: sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;array(x[:,&lt;span style="color: #666666"&gt;0&lt;/span&gt;]) &lt;span style="color: #666666"&gt;*&lt;/span&gt; sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;array(y)
Out[&lt;span style="color: #666666"&gt;39&lt;/span&gt;]:
array([[ &lt;span style="color: #666666"&gt;1.&lt;/span&gt;],
       [ &lt;span style="color: #666666"&gt;2.&lt;/span&gt;],
       [ &lt;span style="color: #666666"&gt;3.&lt;/span&gt;],
       [ &lt;span style="color: #666666"&gt;2.&lt;/span&gt;],
       [ &lt;span style="color: #666666"&gt;2.&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;42&lt;/span&gt;]: xy &lt;span style="color: #666666"&gt;=&lt;/span&gt; sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;column_stack(((sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;array(x[:,&lt;span style="color: #666666"&gt;0&lt;/span&gt;]) &lt;span style="color: #666666"&gt;*&lt;/span&gt; sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;array(y)), (sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;array(x[:,&lt;span style="color: #666666"&gt;1&lt;/span&gt;]) &lt;span style="color: #666666"&gt;*&lt;/span&gt; sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;array(y)), (sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;array(x[:,&lt;span style="color: #666666"&gt;2&lt;/span&gt;]) &lt;span style="color: #666666"&gt;*&lt;/span&gt; sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;array(y))))

In [&lt;span style="color: #666666"&gt;43&lt;/span&gt;]: xy
Out[&lt;span style="color: #666666"&gt;43&lt;/span&gt;]:
array([[   &lt;span style="color: #666666"&gt;1.&lt;/span&gt;        ,   &lt;span style="color: #666666"&gt;34.62365962&lt;/span&gt;,   &lt;span style="color: #666666"&gt;78.02469282&lt;/span&gt;],
       [   &lt;span style="color: #666666"&gt;2.&lt;/span&gt;        ,   &lt;span style="color: #666666"&gt;60.57342154&lt;/span&gt;,   &lt;span style="color: #666666"&gt;87.78999504&lt;/span&gt;],
       [   &lt;span style="color: #666666"&gt;3.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;107.54222631&lt;/span&gt;,  &lt;span style="color: #666666"&gt;218.70659409&lt;/span&gt;],
       [   &lt;span style="color: #666666"&gt;2.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;120.36519878&lt;/span&gt;,  &lt;span style="color: #666666"&gt;172.6171042&lt;/span&gt; ],
       [   &lt;span style="color: #666666"&gt;2.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;158.0654721&lt;/span&gt; ,  &lt;span style="color: #666666"&gt;150.68875288&lt;/span&gt;]])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以，我们需要象 In [39] 那样一列列转为 array 和 y 执行点乘，然后再组合回 5 x 3 的矩阵。好不容易算出了 x 和 y 的点乘了，终于可以和 theta 叉乘了。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;In [&lt;span style="color: #666666"&gt;44&lt;/span&gt;]: xy &lt;span style="color: #666666"&gt;*&lt;/span&gt; theta
Out[&lt;span style="color: #666666"&gt;44&lt;/span&gt;]:
matrix([[ &lt;span style="color: #666666"&gt;227.29670488&lt;/span&gt;],
        [ &lt;span style="color: #666666"&gt;300.72683316&lt;/span&gt;],
        [ &lt;span style="color: #666666"&gt;658.4976408&lt;/span&gt; ],
        [ &lt;span style="color: #666666"&gt;589.96460596&lt;/span&gt;],
        [ &lt;span style="color: #666666"&gt;621.50844996&lt;/span&gt;]])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看起来结果还不错，但实际上这里面也是陷阱重重。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;In [&lt;span style="color: #666666"&gt;45&lt;/span&gt;]: xy &lt;span style="color: #666666"&gt;*&lt;/span&gt; sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;array(theta)
&lt;span style="color: #666666"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style="color: #D2413A; font-weight: bold"&gt;ValueError&lt;/span&gt;                                Traceback (most recent call last)
&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;ipython&lt;span style="color: #666666"&gt;-&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;input&lt;/span&gt;&lt;span style="color: #666666"&gt;-45-5&lt;/span&gt;ea2f7324fbe&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;module&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt;()
&lt;span style="color: #666666"&gt;----&amp;gt;&lt;/span&gt; &lt;span style="color: #666666"&gt;1&lt;/span&gt; xy &lt;span style="color: #666666"&gt;*&lt;/span&gt; sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;array(theta)

&lt;span style="color: #D2413A; font-weight: bold"&gt;ValueError&lt;/span&gt;: operands could &lt;span style="color: #AA22FF; font-weight: bold"&gt;not&lt;/span&gt; be broadcast together &lt;span style="color: #AA22FF; font-weight: bold"&gt;with&lt;/span&gt; shapes (&lt;span style="color: #666666"&gt;5&lt;/span&gt;,&lt;span style="color: #666666"&gt;3&lt;/span&gt;) (&lt;span style="color: #666666"&gt;3&lt;/span&gt;,&lt;span style="color: #666666"&gt;1&lt;/span&gt;)

In [&lt;span style="color: #666666"&gt;46&lt;/span&gt;]: sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;dot(xy, sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;array(theta))
Out[&lt;span style="color: #666666"&gt;46&lt;/span&gt;]:
array([[ &lt;span style="color: #666666"&gt;227.29670488&lt;/span&gt;],
       [ &lt;span style="color: #666666"&gt;300.72683316&lt;/span&gt;],
       [ &lt;span style="color: #666666"&gt;658.4976408&lt;/span&gt; ],
       [ &lt;span style="color: #666666"&gt;589.96460596&lt;/span&gt;],
       [ &lt;span style="color: #666666"&gt;621.50844996&lt;/span&gt;]])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In [45] 会报错，因为在 array 里 &lt;code&gt;*&lt;/code&gt; 运算符是点乘，而在 matrix 里 &lt;code&gt;*&lt;/code&gt; 运算符是叉乘。如果要在 array 里算叉乘，需要用 &lt;code&gt;dot&lt;/code&gt; 方法。看起来提供了灵活性，实际上增加了使用者的大脑负担。而我们的需求在 matlab/octave 里只需要写成 &lt;code&gt;x .* y * theta&lt;/code&gt; ，直观优雅。&lt;/p&gt;
&lt;h2 id="_4"&gt;陷阱四：语法复杂，不自然&lt;/h2&gt;
&lt;p&gt;比如，我们要在一个 5 x 2 的矩阵的前面加一列全部是 1 的数据，变成一个 5 x 3 的矩阵，我们必须这样写&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;In [&lt;span style="color: #666666"&gt;11&lt;/span&gt;]: x
Out[&lt;span style="color: #666666"&gt;11&lt;/span&gt;]:
matrix([[ &lt;span style="color: #666666"&gt;34.62365962&lt;/span&gt;,  &lt;span style="color: #666666"&gt;78.02469282&lt;/span&gt;],
        [ &lt;span style="color: #666666"&gt;30.28671077&lt;/span&gt;,  &lt;span style="color: #666666"&gt;43.89499752&lt;/span&gt;],
        [ &lt;span style="color: #666666"&gt;35.84740877&lt;/span&gt;,  &lt;span style="color: #666666"&gt;72.90219803&lt;/span&gt;],
        [ &lt;span style="color: #666666"&gt;60.18259939&lt;/span&gt;,  &lt;span style="color: #666666"&gt;86.3085521&lt;/span&gt; ],
        [ &lt;span style="color: #666666"&gt;79.03273605&lt;/span&gt;,  &lt;span style="color: #666666"&gt;75.34437644&lt;/span&gt;]])

In [&lt;span style="color: #666666"&gt;18&lt;/span&gt;]: sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;column_stack(((sp&lt;span style="color: #666666"&gt;.&lt;/span&gt;ones((&lt;span style="color: #666666"&gt;5&lt;/span&gt;,&lt;span style="color: #666666"&gt;1&lt;/span&gt;)), x)))
Out[&lt;span style="color: #666666"&gt;18&lt;/span&gt;]:
matrix([[  &lt;span style="color: #666666"&gt;1.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;34.62365962&lt;/span&gt;,  &lt;span style="color: #666666"&gt;78.02469282&lt;/span&gt;],
        [  &lt;span style="color: #666666"&gt;1.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;30.28671077&lt;/span&gt;,  &lt;span style="color: #666666"&gt;43.89499752&lt;/span&gt;],
        [  &lt;span style="color: #666666"&gt;1.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;35.84740877&lt;/span&gt;,  &lt;span style="color: #666666"&gt;72.90219803&lt;/span&gt;],
        [  &lt;span style="color: #666666"&gt;1.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;60.18259939&lt;/span&gt;,  &lt;span style="color: #666666"&gt;86.3085521&lt;/span&gt; ],
        [  &lt;span style="color: #666666"&gt;1.&lt;/span&gt;        ,  &lt;span style="color: #666666"&gt;79.03273605&lt;/span&gt;,  &lt;span style="color: #666666"&gt;75.34437644&lt;/span&gt;]])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有兴趣的人可以数数 In [18] 里有多少个括号，还别不服，括号写少了妥妥地报错。而这个需求在 matlab/octave 里面只需要写成 &lt;code&gt;[ones(5,1) x]&lt;/code&gt; ，瞬间脑袋不短路了，直观优雅又回来了。&lt;/p&gt;
&lt;h2 id="_5"&gt;结论&lt;/h2&gt;
&lt;p&gt;有人说 python 是机器学习和数据分析的新贵，但和专门的领域语言 matlab/octave 相比，用起来确实还是比较别扭的。当然有些槽点是因为语言本身的限制，比如 python 不支持自定义操作符，导致 numpy 的一些设计不够优雅和直观，但默认把列向量转化为行向量的做法只能说是 numpy 本身的设计问题了。这或许就是 Andrew Ng 在他的 Machine Learning 课程里用 matlab/octave ，而不用 python 或其他的语言的原因吧。&lt;/p&gt;</summary><category term="machine-learning"></category></entry><entry><title>标准方程 Normal Equations</title><link href="http://blog.kamidox.com/normal-equations.html" rel="alternate"></link><updated>2015-09-29T23:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-09-29:normal-equations.html</id><summary type="html">&lt;h2 id="_1"&gt;标准方程&lt;/h2&gt;
&lt;p&gt;线性回归里的梯度下降算法，通过不停地迭代求参数，从而不停地逼近成本函数的最小值来求解。另外一个方法是直接计算成本函数的微分，令微分算子为零，求解这个方程，即可得到线性回归的解。&lt;/p&gt;
&lt;p&gt;回忆一下线性回归算法的成本函数：&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
J(\theta) = \frac{1}{2m} \sum_{(i=0)}^n \left( h_\theta(x^{(i)}) - y^{(i)} \right)^2&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;我们让 $\frac{\delta}{\delta \theta} J(\theta) = 0$，求解这个方程最终可以得到：&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\theta = \left( X^T X \right)^{-1} X^T y&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;这个就是我们的标准方程。它通过矩阵运算，直接从训练样本里求出参数 $\theta$ 的值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从成本函数的微分方程推导出标准议程的过程比较复杂，涉及到较多的矩阵运算和矩阵微分运算。感兴趣的可以参考 &lt;a href="http://cs229.stanford.edu/notes/cs229-notes1.pdf"&gt;cs229-notes1.pdf&lt;/a&gt;。另外 &lt;a href="http://cs229.stanford.edu/section/cs229-linalg.pdf"&gt;&lt;/a&gt; 里面有线性代数的复习资料。&lt;/li&gt;
&lt;li&gt;$X$ 是训练样本的变量，它是个 m x n 矩阵。其中 m 是训练样本的个数，n 是变量个数。&lt;/li&gt;
&lt;li&gt;$y$ 是训练样本的结果数据，它是个 m x 1 的列向量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;奇异矩阵&lt;/h2&gt;
&lt;p&gt;当训练数据集较少时，利用矩阵运算可以较快的算出参数 $\theta$ 的值。但如果 $X^T X$ 是奇异矩阵的话，它就没有逆矩阵存在，这个时候通用方程的解是什么呢？答案是，在 octave 里用 &lt;code&gt;pinv&lt;/code&gt; 来代替 &lt;code&gt;inv&lt;/code&gt; 来计算逆矩阵。这样即使 $X^T X$ 是奇异矩阵，&lt;code&gt;pinv&lt;/code&gt; 也能算出其&amp;rdquo;伪&amp;rdquo;逆矩阵，从而顺利算出通用方向的解。&lt;/p&gt;
&lt;p&gt;那么，物理上讲，$X^T X$ 如果为奇异矩阵的话，到底代表什么意思呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型变量之间线性相关&lt;br /&gt;
  比如，在房价预测模型里，$x_1$ 代表房子的长度，$x_2$ 代表房子的宽度，而 $x_3$ 代表房子的面积，这里假设房子是方形的，那么实际上 $x_3$ 和 $x_1, x_2$ 是线性相关的。&lt;/li&gt;
&lt;li&gt;训练样例少于变量个数，即 m &amp;lt; n&lt;br /&gt;
  这种情况下，需要减少变量个数来解决问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后，如果 $\left( X^T X \right)$ 是奇异矩阵的话，在其他编程语言里是没有办法逆的。所以需要其他的办法来解决这个问题。在逻辑回归算法里，使用了另外一个方法来解决奇异矩阵的问题，即正则化 (Regularization) 。有关正则化的信息后文写到逻辑回归算法时再来详细介绍。&lt;/p&gt;</summary><category term="machine-learning"></category></entry><entry><title>习得性无助与自信心的建立</title><link href="http://blog.kamidox.com/helpless.html" rel="alternate"></link><updated>2015-09-29T00:13:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-09-29:helpless.html</id><summary type="html">&lt;p&gt;女儿将近四周半了，给她报了个舞蹈班。有一次课程老师是教小朋友做前滚翻。看着小家伙在课堂上非常努力地偿试，总是翻不好，要嘛翻不过去，要嘛勉强翻过去了，但是翻歪了。由于一个班级小朋友太多，老师也没有精力一个个小朋友耐心指导。只能叫家长回家教小朋友练习。&lt;/p&gt;
&lt;p&gt;一天晚上闲来无事，就想教小家伙练习前滚翻。可无论怎么鼓励，小家伙总是不愿意偿试。甚至用她最喜欢的早教机诱惑她：“你只要翻五次，就给你看半小时早教机。”小家伙嘟着嘴说：“可是五次太多了。我会翻歪掉。”最后我自己翻了几次给她看，然后再很认真地对她说：“你看，很容易翻的，你跟着爸爸练习肯定不会再翻歪了，如果歪了，爸爸扶一下你就不会歪了。”小家伙将信将疑地答应了我的要求。&lt;/p&gt;
&lt;p&gt;我先把技巧告诉她，弯腰准备翻时，手离脚要尽量近，头要夹在两只手中间，然后脚用力蹬一下就翻过去了，还示范了一次给她看。小家伙第一次翻的时候，还是有点歪，但我扶着她的腰确保她能较规范地翻过去。小家伙感受到自己的进步，主动要求再翻一次，这次她把动作做得很规范，我基本不用扶着就能很漂亮地翻了。小家伙高兴地手舞足蹈，连连要求再翻，还主动跟说：“爸爸，我们翻二十次吧。”结果后面越翻动作越麻利，再后面基本手都不用怎么用力撑都能很轻松地翻过去。整个晚上，都开心地要翻给外婆看，翻给妈妈看。&lt;/p&gt;
&lt;p&gt;塞利格曼早期研究习得性无助时做过实验，分别电击两组老鼠，第一组无论做什么，都无法逃避电击。另外一组只要跑到一条细长的管道里把开关关掉就不会被电击了。实验发现，第一组在刚开始时也会偿试各种方法逃避电击，但都无济于事，最后只要电击一开始，就无精打采地缩在角落里，不愿意再做任何的偿试了。而第二组老鼠刚开始时不断地偿试去逃避电击，偿试多次后终于找到逃避电击的方法，到最后，只要电击一开始，就会很快地穿过细长的管道用脚去按压开关，从而逃避电击。&lt;/p&gt;
&lt;p&gt;生活中充满着电击，特别是创业的路上，陷阱星罗密布。我们怎么找到逃避电击的方法呢？我们怎么样不陷入习得性无助状态？怎么样保持不断试错的精神？或许文章开头小家伙练习前滚翻的故事可以有些小小的启发。&lt;/p&gt;</summary><category term="thought"></category></entry><entry><title>常用的微分运算法则</title><link href="http://blog.kamidox.com/computation-rules-for-derivative.html" rel="alternate"></link><updated>2015-09-28T23:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-09-28:computation-rules-for-derivative.html</id><summary type="html">&lt;p&gt;机器学习涉及到较多的数学知识，在工程应用领域，这些数学知识不是必要的，其实很多算法都是数值运算专家写好了的。然而知其然知其所以然，了解这些数学公式的来龙去脉是帮助理解算法的关键。本文直接给出常用的微分运算法则，并运用这些法则来计算分类回归算法 (Logistic Regression) 预测模型 Sigmoid Function 的微分公式。&lt;/p&gt;
&lt;h2 id="_1"&gt;基础函数的微分运算法则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;幂函数法则&lt;br /&gt;
  $$\begin{align} \frac{d}{dx} x^n = nx^{n-1} \end{align}$$&lt;/li&gt;
&lt;li&gt;指数函数法则&lt;br /&gt;
  $$\begin{align} \frac{d}{dx} e^x = e^x \end{align}$$&lt;br /&gt;
  $$\begin{align} \frac{d}{dx} a^x = ln(a)a^x \end{align}$$&lt;/li&gt;
&lt;li&gt;对数函数法则&lt;br /&gt;
  $$\begin{align} \frac{d}{dx} ln(x) = \frac{1}{x} \end{align}$$&lt;br /&gt;
  $$\begin{align} \frac{d}{dx} log_a(x) = \frac{1}{xln(a)} \end{align}$$&lt;/li&gt;
&lt;li&gt;三角函数法则&lt;br /&gt;
  $$\begin{align} \frac{d}{dx} sin(x) = cos(x) \end{align}$$&lt;br /&gt;
  $$\begin{align} \frac{d}{dx} cos(x) = -sin(x) \end{align}$$&lt;br /&gt;
  $$\begin{align} \frac{d}{dx} tan(x) = sin^2(x) = \frac{1}{cos^2(x)} = 1 + tan^2(x) \end{align}$$&lt;/li&gt;
&lt;li&gt;反三角函数法则&lt;br /&gt;
  $$\begin{align} \frac{d}{dx} arcsin(x) = \frac{1}{\sqrt{1-x^2}}, -1 &amp;lt; x &amp;lt; 1 \end{align}$$&lt;br /&gt;
  $$\begin{align} \frac{d}{dx} arccos(x) = -\frac{1}{\sqrt{1-x^2}}, -1 &amp;lt; x &amp;lt; 1 \end{align}$$&lt;br /&gt;
  $$\begin{align} \frac{d}{dx} arctan(x) = \frac{1}{1+x^2} \end{align}$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;组合函数的微分运算法则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;常数法则：如果 $f(x) = n$，n 是常数，则&lt;br /&gt;
  $$\begin{align} f&amp;rsquo; = 0 \end{align}$$&lt;/li&gt;
&lt;li&gt;加法法则&lt;br /&gt;
  $$\begin{align} (\alpha f + \beta g)&amp;rsquo; = \alpha f&amp;rsquo; + \beta g&amp;rsquo; \end{align}$$&lt;/li&gt;
&lt;li&gt;乘法法则&lt;br /&gt;
  $$\begin{align} (fg)&amp;rsquo; = f&amp;rsquo;g + fg&amp;rsquo; \end{align}$$&lt;/li&gt;
&lt;li&gt;除法法则&lt;br /&gt;
  $$\begin{align} \left( \frac{f}{g} \right)&amp;rsquo; = \frac{f&amp;rsquo;g - fg&amp;rsquo;}{g^2} \end{align}$$&lt;br /&gt;
  根据除法法则和指数法则，可以得出推论&lt;br /&gt;
  $$\frac{d}{dx} e^{-x} = \frac{d}{dx} \frac{1}{e^x} = \frac{0-e^x}{e^{2x}} = -\frac{1}{e^x} = -e^{-x}$$&lt;/li&gt;
&lt;li&gt;链接法则：如果 $f(x) = h(g(x))$，则&lt;br /&gt;
  $$\begin{align} f&amp;rsquo;(x) = h&amp;rsquo;(g(x)) g&amp;rsquo;(x) \end{align}$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sigmoid-function"&gt;计算 Sigmoid Function 的微分&lt;/h2&gt;
&lt;p&gt;$g(x) = \frac{1}{1+e^{-x}}$ 是分类算法的预测函数，也称为 Sigmoid Function 或 Logistic Function。我们利用上文介绍的微分运算法则来证明 Sigmoid Function 的一个特性：&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\frac{d}{dx} g(x) = g(x) (1 - g(x))&lt;br /&gt;
$$&lt;/p&gt;
&lt;h3 id="_3"&gt;方法一&lt;/h3&gt;
&lt;p&gt;假设 $f(x) = \frac{1}{x}$，则 $f(g(x)) = \frac{1}{g(x)}$，根据除法法则得到&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\begin{align}&lt;br /&gt;
f&amp;rsquo;(g(x)) &amp;amp; = \left( \frac{1}{g(x)} \right)&amp;rsquo; = \frac{1&amp;rsquo; g(x) - 1 g&amp;rsquo;(x)}{g(x)^2} \\&lt;br /&gt;
&amp;amp; = - \frac{g&amp;rsquo;(x)}{g(x)^2}&lt;br /&gt;
\end{align}&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;其中 (17) 是根据除法法则得出的结论，除数是常数函数 1，被除数是 $g(x)$。(18) 是根据常数法则得出的结论。&lt;/p&gt;
&lt;p&gt;另一方面，$f(g(x)) = \frac{1}{g(x)} = 1 + e^{-x}$，根据指数法则直接计算微分得到&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\begin{align}&lt;br /&gt;
f&amp;rsquo;(g(x)) &amp;amp; = \frac{d}{dx} (1 + e^{-x}) \\&lt;br /&gt;
&amp;amp; = -e^{-x} \\&lt;br /&gt;
&amp;amp; = 1 - \frac{1}{g(x)} \\&lt;br /&gt;
&amp;amp; = \frac{g(x) - 1}{g(x)}&lt;br /&gt;
\end{align}&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;(18) 和 (22) 两式是相等的，即&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\begin{align}&lt;br /&gt;
- \frac{g&amp;rsquo;(x)}{g(x)^2} &amp;amp; = \frac{g(x) - 1}{g(x)} \\&lt;br /&gt;
g&amp;rsquo;(x) &amp;amp; = g(x)(1 - g(x))&lt;br /&gt;
\end{align}&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;这样就得到了我们的结果。&lt;/p&gt;
&lt;h3 id="_4"&gt;方法二&lt;/h3&gt;
&lt;p&gt;由 $g(x) = \frac{1}{1+e^{-x}}$ 的定义可知&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\begin{align}&lt;br /&gt;
&amp;amp; (1+e^{-x})g(x) = 1 \\&lt;br /&gt;
\Rightarrow &amp;amp; \frac{d}{dx} \left( (1+e^{-x})g(x) \right) = 0  \\&lt;br /&gt;
\Rightarrow &amp;amp; -e^{-x}g(x) + (1+e^{-x})\frac{d}{dx}g(x) = 0    \\&lt;br /&gt;
\Rightarrow &amp;amp; \frac{d}{dx}g(x) = g(x) \frac{e^{-x}}{1+e^{-x}} \\&lt;br /&gt;
\Rightarrow &amp;amp; \frac{d}{dx}g(x) = g(x) \frac{(1 + e^{-x}) - 1}{1+e^{-x}} \\&lt;br /&gt;
\Rightarrow &amp;amp; \frac{d}{dx}g(x) = g(x) \left[ 1 - \frac{1}{1+e^{-x}}\right] \\&lt;br /&gt;
\Rightarrow &amp;amp; \frac{d}{dx}g(x) = g(x) (1 - g(x)) \\&lt;br /&gt;
\end{align}&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;(26) 两边取微分；(27) 根据微分的乘法法则。&lt;/p&gt;
&lt;h3 id="_5"&gt;方法三&lt;/h3&gt;
&lt;p&gt;根据除法法则直接计算微分：&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\begin{align}&lt;br /&gt;
\frac{d}{dx} g(x) &amp;amp; = \frac{d}{dx} \left( \frac{1}{1 + e^{-x}} \right) \\&lt;br /&gt;
&amp;amp; = \frac{0 - (- e^{-x})}{(1 + e^{-x})^2} \\&lt;br /&gt;
&amp;amp; = \frac{e^{-x}}{(1 + e^{-x})^2} \\&lt;br /&gt;
&amp;amp; = \frac{1}{(1 + e^{-x})} \frac{e^{-x}}{(1 + e^{-x})} \\&lt;br /&gt;
&amp;amp; = \frac{1}{(1 + e^{-x})} \frac{(1 + e^{-x}) - 1}{(1 + e^{-x})} \\&lt;br /&gt;
&amp;amp; = \frac{1}{(1 + e^{-x})} \left[1 - \frac{1}{(1 + e^{-x})} \right] \\&lt;br /&gt;
&amp;amp; = g(x) (1 - g(x)) \\&lt;br /&gt;
\end{align}&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;(33) 是根据除法法则得出的，其中除数是常数 1，被除数是 $1 + e^{-x}$。&lt;/p&gt;
&lt;h2 id="_6"&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;StackExchange 上有个 &lt;a href="http://math.stackexchange.com/questions/78575/derivative-of-sigmoid-function-sigma-x-frac11e-x"&gt;Sigmoid Function 微分计算的问题及答案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WikiPedia 上有关&lt;a href="https://en.wikipedia.org/wiki/Derivative#Rules_of_computation"&gt;微分运算法则&lt;/a&gt;的资料&lt;/li&gt;
&lt;/ul&gt;</summary><category term="machine-learning"></category></entry><entry><title>机器学习入门指南</title><link href="http://blog.kamidox.com/ml-getting-started.html" rel="alternate"></link><updated>2015-09-11T20:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-09-11:ml-getting-started.html</id><summary type="html">&lt;p&gt;前段时间微软的年龄识别网站风靡全球，它的核心算法就是机器学习领域的内容。机器学习看起来高深莫测，学习曲线比较陡，实际上优秀的入门资料不但可以降低学习门槛，还可以激发学习乐趣。&lt;/p&gt;
&lt;h2 id="_1"&gt;机器学习算法&lt;/h2&gt;
&lt;p&gt;Coursera 上面 Stanford 的 &lt;a href="https://zh.coursera.org/learn/machine-learning"&gt;机器学习&lt;/a&gt; 课程是优质的算法相关入门课程。Andrew Ng 是 Coursera 的创始人，也是 Stanford 的老师。这个课程最大的特点是对机器学习算法的推导和介绍，从数学层面去推导一些经典的机器学习算法。如果你微积分，矩阵运算，概率论等大学数学都还给老师了也没关系。课程中会介绍用到的最基础的数学知识，包括微积分，矩阵运算，概率论等。真正做到了深入浅出以及零基础。&lt;/p&gt;
&lt;p&gt;算法是理解机器学习原理的非常基础的知识，在实践中我们可能根本不用去推导或实现这些算法，但不代表我们不需要理解这些算法。理解这些算法对我们选择机器学习的模型以及对数据进行分析都有非常有益的。&lt;/p&gt;
&lt;h2 id="_2"&gt;编程语言&lt;/h2&gt;
&lt;p&gt;适合机器学习的编程语言不少，这里推荐使用 Python。Python 是免费开源的语言，并且有非常丰富的库，而且学习 Python 语言的门槛比较低，是全民编程运动的推荐语言。&lt;a href="http://scipy-lectures.github.io/intro/intro.html#why-python"&gt;这篇文章&lt;/a&gt;罗列了目前主流的机器学习语言以及各自的优劣。&lt;/p&gt;
&lt;p&gt;学习 Python 除了官方的教程之外，推荐一本书 &lt;a href="http://www.diveintopython.net/"&gt;Dive Into Python&lt;/a&gt; 有中文版，也有英文版。中文版翻译质量也很高。当然，&lt;a href="http://learnpythonthehardway.org/book/"&gt;Learn Python The Hard Way&lt;/a&gt; 也不错。不过建议选择一本照着练习，一个月掌握这个语言的基础特性问题不大。&lt;/p&gt;
&lt;h2 id="python"&gt;Python 机器学习工具箱&lt;/h2&gt;
&lt;p&gt;Python 用来实现科学计算的软件包是 scipy, numpy, matplotlib，其中 numpy 提供高性能的数值去处；scipy 实现机器学习的算法；matplotlib 提供数据可视化。&lt;/p&gt;
&lt;p&gt;这三个库都挺大的，内容也比较多。这里重点推荐一个非常优质地适合入门的网站：&lt;a href="http://scipy-lectures.github.io/"&gt;Python Scientific Lecture Notes&lt;/a&gt;。一个网站把机器学习想着的 Python 工具全部搞定，并且内容易懂，很适合初学者。&lt;/p&gt;
&lt;h2 id="_3"&gt;机器学习入门书籍&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.ituring.com.cn/book/1192"&gt;《机器学习系统设计》&lt;/a&gt;是图灵社区翻译引进的机器学习入门书籍。书中使用 Python 作为机器学习算法的编程语言，从易到难，从实际问题出发，去探索怎么样用机器学习算法去解决实际问题。当然，如果需要自己实现书中的案例，需要掌握 Python 语言以及 Python 机器学习工具箱的几个库的用法。&lt;/p&gt;
&lt;p&gt;这本书的最大特点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单易懂，从易到难&lt;/li&gt;
&lt;li&gt;内容比较精简&lt;/li&gt;
&lt;li&gt;让你跳出机器学习的算法，真正从工程角度去理解机器学习，包括数据清洗，模型筛选，模型验证等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;总结&lt;/h2&gt;
&lt;p&gt;建议 Coursera 上的算法课程和《机器学习系统设计》结合起来，并行来看，这样即了解了工程应用的方法，又理解了背后的算法原理。这里介绍了不少英文资料，学习机器学习的过程中还学了英文，一举两得。再花个几十美刀从 Coursera 上弄个课程证书（ Coursera 上课程都是免费学的，但如果要证书则需要交几十美刀不等），瞬间高大上有没有，喝洋墨水有没有。去美帝读书也不就是这样的体验嘛。&lt;/p&gt;</summary><category term="machine-learning"></category></entry><entry><title>线性回归算法</title><link href="http://blog.kamidox.com/gradient-descent.html" rel="alternate"></link><updated>2015-09-03T20:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-09-03:gradient-descent.html</id><summary type="html">&lt;p&gt;本文总结了线性回归算法里用到的一些微积分知识，接着根据最小均方差推导出梯度下降算法以及优化后的随机梯度下降算法。&lt;/p&gt;
&lt;h2 id="_1"&gt;微积分基本运算法则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;法则一&lt;/strong&gt;：对 $y(x)=cx^n$ ，其针对 x 的偏导数为 $\frac{\partial}{\partial x}f(x)=cnx^{n-1}$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;法则二&lt;/strong&gt;：常数的微分为 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;法则三&lt;/strong&gt;：偏导数可以穿透累加器，即 $$\frac{\partial}{\partial x_0}\sum_{i=0}^nF(x_i) = \sum_{i=0}^n\frac{\partial}{\partial x_0}F(x_i)$$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;法则四&lt;/strong&gt;：微分链接法则，比如 $f(x)$ 是以 x 为自变量的函数，令 $J(x)=g(f(x))$ ，则 $J(x)$ 的微分方程为 $$\frac{\partial}{\partial x}J(x) = g&amp;rsquo;(f(x))\times f&amp;rsquo;(x)$$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;法则五&lt;/strong&gt;：计算偏导数时，把求导变量当作变量，其他的变量当作常数，比如对方程 $f(x, y) = ax^n + by^m$，则 $$\frac{\partial}{\partial x}f(x, y) = na x^{n-1}$$ 因为是对 x 求导，所以可以把 y 当成常数，即 $by^m$ 整个算子就是一个常数，根据第二个法则，常数的导数为 0。同理，$$\frac{\partial}{\partial y}f(x, y) = mby^{m-1}$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;维基百科上有教程可以参考，比如 &lt;a href="https://en.wikipedia.org/wiki/Chain_rule"&gt;Chain Rule&lt;/a&gt; 和 &lt;a href="https://en.wikipedia.org/wiki/Partial_derivatives"&gt;Partial Derivatives&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_2"&gt;梯度下降算法&lt;/h2&gt;
&lt;p&gt;假设我们&lt;strong&gt;训练数据集 (training data set)&lt;/strong&gt; 有 m 个数据 $(x_0, y_0), (x_1, y_1), &amp;hellip; (x_m, y_m)$ ，我们用线性方程 $h(x) = \theta_0 + \theta_1 x$ 来拟合这组数据，怎么样来选取参数 $\theta_0$ 和 $\theta_1$ 来最优拟合这组数据呢？&lt;/p&gt;
&lt;p&gt;我们可以把这 m 个点画在二维坐标系里，然后计算这 m 个点到我们的线性方程所描述的直线的最短距离，当这些点到我们的拟合直线的距离总和最小时，那么我们就找到了最优的拟合方案了。所以，问题转化为求下面函数的最小值：&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
J(\theta) = J(\theta_0, \theta_1) = \frac{1}{2m}\sum_{i=1}^m(h(x^{(i)}) - y^{(i)})^2&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;上面的公式叫&lt;strong&gt;成本函数 (Cost Function)&lt;/strong&gt;，其中 $h(x_i)$ 是我们的拟合函数针对 $x_i$ 这个点预测出来的值。乘以 $\frac12$ 是为了计算方便，后文我们会看到。&lt;/p&gt;
&lt;p&gt;上面我们只考虑了一个变量 $x$ ，即决定这组数据 $y$ 值的只有一个变量。考虑更一般的情况，有 n 个变量 $x_1, x_2, x_3, &amp;hellip; x_n$ 决定 $y$ 的值，那么我们的预测函数模型可以改写如下：&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
h(x) = \theta_0 + \theta_1 x_1 + \theta_2 x_2 + &amp;hellip; + \theta_n x_n&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;我们让 $x_0$ 为常数 1，用累加器运算符重写上面的预测函数&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
h(x) = \sum_{j=0}^n \theta_j x_j&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;$\theta_0, \theta_1, &amp;hellip; \theta_n$ 我们统称为 $\theta$，是我们的预测函数的 n 个&lt;strong&gt;参数 (parameters)&lt;/strong&gt;。即一组 $\theta$ 值就决定了一个预测函数，我们记作 $h_\theta(x)$，为了简便起见，在不引起误解的情况下我们也把它简写为 $h(x)$。理论上，预测函数有无穷多个，我们求解的目标就是找出一个最优的 $\theta$ 值。&lt;/p&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;考考你&lt;/p&gt;
&lt;p&gt;当有 n 个变量 $x_1, x_2, &amp;hellip; x_n$ 决定 y 的值的时候，训练数据集应该长什么样呢？&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;为了计算 $J(\theta)$ 的最小值，我们选取一组初始的 $\theta$ ，然后逐步调整 $\theta$ 的值，以便让 $J(\theta)$ 逐渐变小，最后我们希望能让 $J(\theta)$ 收敛在一个极值附近，这样我们就找到了最优或局部最优的解。$\theta$ 的迭代公式为：&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\theta_j = \theta_j - \alpha \frac\partial{\partial{\theta_j}}J(\theta)&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;其中，&lt;strong&gt;$\alpha$&lt;/strong&gt; 是叫&lt;strong&gt;学习率 (learning rate)&lt;/strong&gt;，表示我们一次要让 $\theta_j$ 往前迈多大步子。如果步子太小，意味着要计算很多次才能到达目的地，如果步子太大，可以会直接跨过目的地，从而无法收敛。$\frac\partial{\partial{\theta_j}}J(\theta)$ 就是成本函数的&lt;strong&gt;偏导数 (partial derivatives)&lt;/strong&gt;。&lt;/p&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;偏导数的物理意义&lt;/p&gt;
&lt;p&gt;在这个公式里，可以简单地把偏导数理解为斜率。我们要让 $\theta_j$ 不停地迭代，则根据当前 $\theta_j$ 的值，我们算出 $J(\theta)$ 在 $\theta_j$ 上的斜率，然后再乘以我们的学习率 $\alpha$ 就让我们的 $\theta_j$ 往前迈了一小步。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;现在问题转化为求 $J(\theta)$ 的偏导数，这个推导过程会用到文章开头部分介绍的几个微积分运算基本法则。&lt;/p&gt;
&lt;p&gt;根据成本函数的定义，以及文章开头的几个微积分基本运算法则，我们可以求解参数迭代公式里偏微分算子。&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\begin{align}&lt;br /&gt;
\frac\partial{\partial{\theta_j}}J(\theta) &amp;amp; = \frac\partial{\partial{\theta_j}} \frac{1}{2m}\sum_{i=1}^m(h(x^{(i)}) - y^{(i)})^2 \\&lt;br /&gt;
&amp;amp; = \frac{1}{2m}\sum_{i=1}^m \frac\partial{\partial{\theta_j}} (h(x^{(i)}) - y^{(i)})^2 \\&lt;br /&gt;
&amp;amp; = 2 \frac{1}{2m} \sum_{i=1}^m \left((h(x^{(i)}) - y^{(i)}) \frac\partial{\partial{\theta_j}} \left(h(x^{(i)}) - y^{(i)}\right)\right) \\&lt;br /&gt;
&amp;amp; = \frac{1}{m} \sum_{i=1}^m \left(\left(h(x^{(i)}) - y^{(i)}\right) \frac\partial{\partial{\theta_j}} \left(\sum_{j=0}^n \theta_j x_j^{(i)} - y^{(i)}\right)\right) \\&lt;br /&gt;
&amp;amp; = \frac{1}{m} \sum_{i=1}^m \left(\left(h(x^{(i)}) - y^{(i)}\right) x_j^{(i)}\right) \\&lt;br /&gt;
\end{align}&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;式子 (2) 是根据上文的法则三得到的。式子 (3) 是根据上文的法则四得到的，这里也可以看到之前除以 2 的目的是为了抵消计算偏导数时乘以 2。式子 (5) 是根据上文的法则五得到的。&lt;/p&gt;
&lt;p&gt;最后得出我们的参数迭代函数&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\begin{align}&lt;br /&gt;
\theta_j &amp;amp; = \theta_j - \frac{\alpha}{m} \sum_{i=1}^m \left(\left(h(x^{(i)}) - y^{(i)}\right) x_j^{(i)}\right)&lt;br /&gt;
\end{align}&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;这个就是 &lt;strong&gt;LSM&lt;/strong&gt; (Least Mean Squares) 迭代算法，也叫 &lt;strong&gt;Widrow-Hoff&lt;/strong&gt; 学习算法。&lt;/p&gt;
&lt;p&gt;解析一下这个公式几个关键部分的含义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$h(x^{(i)})$: 这个是按照我们的给定的参数的预测值，只要 $\theta$ 确定了，我们就可以根据预测函数算出这个值&lt;/li&gt;
&lt;li&gt;$y^{(i)}$: 这个是&lt;strong&gt;训练数据集 (training data set)&lt;/strong&gt; 的目标值&lt;/li&gt;
&lt;li&gt;$x_j^{(i)}$: 这个是训练数据集里第 j 个变量的值&lt;/li&gt;
&lt;li&gt;$\sum_{i=1}^m$: 这个是对所有训练数据集求和。从这个也可以看到每迭代一次就要遍历一次全部训练数据集。所以这个算法也称为&lt;strong&gt;批量梯度下降算法 (Batch Gradient Descent) &lt;/strong&gt;。对训练数据集比较大的场景下，计算成本是很高的。后面我们会介绍另外一个提高运算效率的算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个公式有些符合直觉的地方，比如 $\left(h(x^{(i)}) - y^{(i)}\right)$ 表示的是预测值与真实值的误差，当误差比较大时，经过一轮的迭代，$\theta_j$ 的步幅就迈得比较大。即当我们的参数 $\theta$ 离我们的目标值很远的时候，迭代一次的值变化比较大，可以快速地收敛，而当 $\theta$ 离目标值比较近的时候，迭代一次的值变化比较小，即慢慢地收敛到目标值。&lt;/p&gt;
&lt;p&gt;这个公式怎么样用编程语言来实现呢？在编写机器学习算法的时候，一般步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;确定学习率 $\alpha$ &lt;/strong&gt;&lt;br /&gt;
  $\alpha$ 太大可能会使成本函数无法收敛，太小计算太多，机器学习算法效率就比较低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确定参数起始点&lt;/strong&gt;&lt;br /&gt;
  比如让所有的参数都为 1 作为起点，即 $\theta_0 := 1, \theta_1 := 1, &amp;hellip; \theta_n := 1$。这样就得到了我们的预测函数：$h_\theta(x) = \sum_{i=1}^m x^{(i)}$。根据预测值和我们的成本函数，就可以算出我们在参数起始位置的成本。需要注意的是，参数起始点可以根据实际情况灵活选择，以便让机器学习算法的性能更高，比如选择比较靠近极点的位置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算参数的下一组值&lt;/strong&gt;&lt;br /&gt;
  根据 LSM 算法，&lt;strong&gt;分别同时算出&lt;/strong&gt;新的 $\theta_j$ 的值。然后用新的 $\theta$ 值得到新的预测函数 $h_\theta(x)$，再根据新的预测函数，代入成本函数就可以算出新的成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认成本函数是否收敛&lt;/strong&gt;&lt;br /&gt;
  拿新的成本和旧的成本进行比较，看成本是不是变得越来越小。如果两次成本之间的差异小于误差范围，即说明我们已经非常靠近最小成本附近了。就可以近似地认为我们找到了最小成本了。如果两次成本之间的差异在误差范围之外，重复步骤 3 继续计算下一组参数 $\theta$。直到找到我们的最优解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;随机梯度下降算法&lt;/h2&gt;
&lt;p&gt;批量梯度下降算法对参数进行一次迭代运算，就需要遍历所有的训练数据集。当训练数据集比较大时，这个算法的效率会很低。考虑另外一个算法：&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\theta_j = \theta_j - \frac{\alpha}{m} \left(\left(h(x^{(i)}) - y^{(i)}\right) x_j^{(i)}\right)&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;这就是 &lt;strong&gt;随机梯度下降算法&lt;/strong&gt; (stochastic gradient descent)。这个算法的关键点是不去遍历所有的训练数据集，而是改成每次随机地从训练数据集里取一个数据进行参数迭代计算。&lt;/p&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;怎么理解随机&lt;/p&gt;
&lt;p&gt;为什么这么神奇呢？为什么随机从训练数据集里选取一个数据来迭代，不但不影响最终计算结果，还大大地提高了效率。看数学时最怕的就是 &lt;strong&gt;我们考虑 bla bla bla&lt;/strong&gt;，作者说出 “我们考虑 bla bla bla” 时背后的过程是怎么样的？坦白讲，怎么样从数学上证明随机梯度下降算法和批量梯度下降算法是等价的，我也不知道。不过我有个直观的可以帮助理解的解释。回到成本函数的定义：$J(\theta) = \frac{1}{2m} \sum_{i=1}^m \left(h(x^{(i)}) - y^{(i)}\right)^2$。我们说过，这里累加后除以 2 是为了计算方便，那么我们除以 m 是什么意思呢？答案是平均值，即所有训练数据集上的点到我们预测函数的距离的&lt;strong&gt;平均值&lt;/strong&gt;。因为 m 是正整数，$J(\theta)$ 除以 m 不影响它的最小值的属性。再回到&lt;strong&gt;随机选取训练数据集里的一个数据&lt;/strong&gt;这个做法来看，如果计算次数足够多，并且是真正随机，那么随机选取出来的这组数据从概率的角度来看，和&lt;strong&gt;平均值&lt;/strong&gt;是相当的。打个比方，有一个储钱罐里有 1 角的硬币 10 枚，5 角的硬币 2 枚，1 元的硬币 1 枚，总计 3 元，13 枚硬币。你随机从里面取 1000 次，每次取出来的硬币把币值记录下来，然后放回储钱罐里。这样最后去算这 1000 次取出来的钱的平均值 (1000 次取出来的币值总和除以 1000) 和储钱罐里每枚硬币的平均值 (3/13 元) 应该是近似相等的。我数学太水，概率论还没复习，哪位概率论高人给证明一下啊。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这样，我们基本上把梯度下降算法，最小均方差，随机梯度下降算法的来龙去脉理了一遍。&lt;/p&gt;</summary><category term="machine-learning"></category></entry><entry><title>使用 Markdown + MathJax 在博客里插入数学公式</title><link href="http://blog.kamidox.com/write-math-formula-with-mathjax.html" rel="alternate"></link><updated>2015-09-01T22:52:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-09-01:write-math-formula-with-mathjax.html</id><summary type="html">&lt;p&gt;在书写数值计算类文章，特别是机器学习相关算法时，难免需要插入复杂的数学公式。一种是用图片在网页上展示，另外一种是使用 &lt;a href="https://www.mathjax.org"&gt;MathJax&lt;/a&gt; 来展示复杂的数学公式。它直接使用 Javascript 使用矢量字库或 SVG 文件来显示数学公式。优点是效果好，比如在 Retina 屏幕上也不会变得模糊。并且可以直接把公式写在 Markdown 文章里。本文介绍使用 MathJax 在 Markdown 文件里直接插入数学公式。并且附带一个简单的书写数学公式的 LaTex 教程。&lt;/p&gt;
&lt;h2 id="_1"&gt;工具&lt;/h2&gt;
&lt;h3 id="markdown-preview-mathjax"&gt;配置 Markdown Preview 来支持 MathJax&lt;/h3&gt;
&lt;p&gt;使用 Sublime + Markdown Preview 插件来写博客时。需要开启 Markdown Preview 对 MathJax 的支持，这样在预览界面才能正确地显示数学公式。方法是打开在 Markdown Preview 的用户配置文件 (Package Settings -&amp;gt; Markdown Preview -&amp;gt; Setting - User) 里添加如下内容：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;enable_mathjax&amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="pelican-mathjax"&gt;配置 Pelican 主题模板来支持 MathJax&lt;/h3&gt;
&lt;p&gt;我使用的主题是 &lt;code&gt;foundation-default-colours&lt;/code&gt;，它默认是支持 MathJax 的。我们可以在模板 &lt;code&gt;base.html&lt;/code&gt; 找到如下内容：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;&amp;lt;!-- mathjax config similar to math.stackexchange --&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;script &lt;/span&gt;&lt;span style="color: #BB4444"&gt;type=&amp;quot;text/x-mathjax-config&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&lt;/span&gt;
MathJax.Hub.Config({
    jax&lt;span style="color: #666666"&gt;:&lt;/span&gt; [&lt;span style="color: #BB4444"&gt;&amp;quot;input/TeX&amp;quot;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;quot;output/HTML-CSS&amp;quot;&lt;/span&gt;],
    tex2jax&lt;span style="color: #666666"&gt;:&lt;/span&gt; {
        inlineMath&lt;span style="color: #666666"&gt;:&lt;/span&gt; [ [&lt;span style="color: #BB4444"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;] ],
        displayMath&lt;span style="color: #666666"&gt;:&lt;/span&gt; [ [&lt;span style="color: #BB4444"&gt;&amp;#39;$$&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;$$&amp;#39;&lt;/span&gt;]],
        processEscapes&lt;span style="color: #666666"&gt;:&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;true&lt;/span&gt;,
        skipTags&lt;span style="color: #666666"&gt;:&lt;/span&gt; [&lt;span style="color: #BB4444"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;noscript&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;style&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;textarea&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;pre&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;]
    },
    messageStyle&lt;span style="color: #666666"&gt;:&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;,
    &lt;span style="color: #BB4444"&gt;&amp;quot;HTML-CSS&amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt; { preferredFont&lt;span style="color: #666666"&gt;:&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;TeX&amp;quot;&lt;/span&gt;, availableFonts&lt;span style="color: #666666"&gt;:&lt;/span&gt; [&lt;span style="color: #BB4444"&gt;&amp;quot;STIX&amp;quot;&lt;/span&gt;,&lt;span style="color: #BB4444"&gt;&amp;quot;TeX&amp;quot;&lt;/span&gt;] }
});
&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;script &lt;/span&gt;&lt;span style="color: #BB4444"&gt;type=&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span style="color: #BB4444"&gt;src=&amp;quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果模板不支持，也可以直接添加上面的脚本来支持 MathJax。&lt;/p&gt;
&lt;h2 id="latex"&gt;LaTex 简明教程&lt;/h2&gt;
&lt;h3 id="_2"&gt;例子&lt;/h3&gt;
&lt;p&gt;先来看个例子：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;$$
J(\theta) = \frac 1 2 \sum_{i=1}^m (h_\theta(x^{(i)})-y^{(i)})^2
$$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面用 LaTex 格式书写的数学公式经过 MathJax 展示后效果如下：&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
J(\theta) = \frac 1 2 \sum_{i=1}^m (h_\theta(x^{(i)})-y^{(i)})^2&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;这个公式是线性回归算法里的成本函数。&lt;/p&gt;
&lt;h3 id="_3"&gt;规则&lt;/h3&gt;
&lt;p&gt;关于在 Markdown 书写 LaTex 数学公式有几个规则常用规则需要记住：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行内公式&lt;/strong&gt;&lt;br /&gt;
行内公式使用 &lt;code&gt;$&lt;/code&gt; 号作为公式的左右边界，如 $h(x) = \theta_0 + \theta_1 x$ 公式的 LaTex 内容如下&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;$h(x) = \theta_0 + \theta_1 x$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;行间公式&lt;/strong&gt;&lt;br /&gt;
公式需要独立显示一行时，使用 &lt;code&gt;$$&lt;/code&gt; 来作为公式的左右边界，如&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\theta_i = \theta_i - \alpha\frac\partial{\partial\theta_i}J(\theta)&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;的 LaTex 代码为：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;$$
\theta_i = \theta_i - \alpha\frac\partial{\partial\theta_i}J(\theta)
$$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;常用 LaTex 代码&lt;/strong&gt;&lt;br /&gt;
需要记住的几个常用的符号，这样书写起来会快一点&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\frac&lt;/td&gt;
&lt;td&gt;分子分母之间的横线&lt;/td&gt;
&lt;td&gt;$\frac1x$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_&lt;/td&gt;
&lt;td&gt;用下划线来表示下标&lt;/td&gt;
&lt;td&gt;$x_i$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;次方运算符来表示上标&lt;/td&gt;
&lt;td&gt;$x^i$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\sum&lt;/td&gt;
&lt;td&gt;累加器，上下标用上面介绍的编码来书写&lt;/td&gt;
&lt;td&gt;$\sum$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\alpha&lt;/td&gt;
&lt;td&gt;希腊字母 alpha&lt;/td&gt;
&lt;td&gt;$y := \alpha x$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;记住这几个就差不多了，倒回去看一下线性回归算法的成本函数的公式及其 LaTex 代码，对着练习个10分钟基本就可以掌握常用公式的写法了。要特别注意公式里空格和 &lt;code&gt;{}&lt;/code&gt; 的运用规则。基本原则是，空格可加可不加，但如果会引起歧义，最好加上空格。&lt;code&gt;{}&lt;/code&gt; 是用来组成群组的。比如写一个分式时，分母是一个复杂公式时，可以用 &lt;code&gt;{}&lt;/code&gt; 包含起来，这样整个复杂公式都会变成分母了。&lt;/p&gt;
&lt;h3 id="_4"&gt;几个非常有用的资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这是一篇质量很高的&lt;a href="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/"&gt;介绍 MathJax 的中文博客文章&lt;/a&gt;，需要注意的是如果是用 markdown 编写 MathJax 公式，当公式里需要两个斜杠 \ 时要写四个斜杠 \。因为 \ 会被 markdown 转义一次。&lt;/li&gt;
&lt;li&gt;Github 上有个&lt;a href="https://kerzol.github.io/markdown-mathjax/editor.html"&gt;在线 Markdown MathJax 编辑器&lt;/a&gt;，可以在这里练习，平时写公式时也可以在这里先写好再拷贝到文章里&lt;/li&gt;
&lt;li&gt;这是 &lt;a href="http://www.forkosh.com/mathtextutorial.html"&gt;LaTex 完整教程&lt;/a&gt;，包含完整的 LaTex 数学公式的内容，包括更高级的格式控制等&lt;/li&gt;
&lt;li&gt;这是一份PDF 格式的 &lt;a href="http://mirrors.ctan.org/info/symbols/math/maths-symbols.pdf"&gt;MathJax 支持的数学符号表&lt;/a&gt;，当需要书写复杂数学公式时，一些非常特殊的符号的转义字符可以从这里查到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好啦，这样差不多就可以写出优美的数学公式啦。&lt;/p&gt;</summary><category term="markdown"></category><category term="machine-learning"></category></entry><entry><title>使用 Github Pages 来托管 Pelican 生成的博客</title><link href="http://blog.kamidox.com/serve-pelican-on-github-pages.html" rel="alternate"></link><updated>2015-08-22T23:52:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-08-22:serve-pelican-on-github-pages.html</id><summary type="html">&lt;h2 id="github-pages"&gt;关于 Github Pages&lt;/h2&gt;
&lt;p&gt;Github Pages 是 Github 提供的免费的空间来展现静态网页。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Websites for you and your projects. Hosted directly from your GitHub repository. Just edit, push, and your changes are live.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;依照&lt;a href="https://pages.github.com"&gt;官方文档&lt;/a&gt;很容易做出一个 Github Pages 网页。使用 Github Pages 来写博客的主流方法是使用 &lt;a href="http://jekyllrb.com"&gt;Jekyll&lt;/a&gt; 来作为 SSG (Static Site Generator)。&lt;/p&gt;
&lt;h2 id="pelican-github-pages"&gt;把 Pelican 生成的博客托管在 Github Pages 上&lt;/h2&gt;
&lt;p&gt;由于历史原因使用了 Pelican 作为 SSG 并托管在 AWS 主机上。切换到 Github Pages + Jekyll 意味着更换 SSG ，这样必须把所有符合 Pelican 规则的 markdown 文件转换为符合 Jekyll 规则的 markdown 文件。于是想到了一个更偷懒的方法：直接用 Pelican 生成的静态网页放在 Github 上作为 Github Pages。最后再绑定我们自己的域名。这样就完成了迁移工作。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt; 是做这个事情的最佳工具。 &lt;/p&gt;
&lt;p&gt;发布博客时，输入下面的命令即可：&lt;code&gt;ghp-import -p output&lt;/code&gt;。这个命令做以下几件事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把 Pelican 生成的静态网页所在目录 &lt;code&gt;output&lt;/code&gt; 下的所有文件写入 Git 的 &lt;code&gt;gh-pages&lt;/code&gt; 分支&lt;/li&gt;
&lt;li&gt;带 &lt;code&gt;-p&lt;/code&gt; 选项会把 &lt;code&gt;gh-pages&lt;/code&gt; 分支上的内容 push 到 Github 上&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打开 &lt;code&gt;YourUserName.github.io/YourRepoName&lt;/code&gt; 就可以看到最新的博客内容了。比如 &lt;a href="http://kamidox.github.io/blogs"&gt;kamidox.github.io/blogs&lt;/a&gt; 就是我使用 Github Pages 的托管的博客了。&lt;/p&gt;
&lt;p&gt;关于如何使用 Pelican 来写博客，可以参阅&lt;a href="http://kamidox.com/build-blog-system-by-pelican.html"&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_1"&gt;定制域名&lt;/h2&gt;
&lt;p&gt;关于 Github Pages 定制域名可以参阅&lt;a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/"&gt;官方教程&lt;/a&gt;。我们使用 Github 强烈推荐的子域名的形式来定制域名。&lt;/p&gt;
&lt;h3 id="cname"&gt;创建 CNAME&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;gh-pages&lt;/code&gt; 分支根目录提交一个 &lt;code&gt;CNAME&lt;/code&gt; 文件，而 &lt;code&gt;ghp-import&lt;/code&gt; 又会完全覆盖掉 gh-pages 分支。如何解决这个矛盾呢？阳光下没有新鲜事，具体可以参阅 &lt;a href="http://docs.getpelican.com/en/latest/tips.html#extra-tips"&gt;Pelican 的 Tips&lt;/a&gt;。归纳起来，就是先在 &lt;code&gt;content/extra&lt;/code&gt; 目录下新建一个叫 &lt;code&gt;CNAME&lt;/code&gt; 的文件，其内容就是自定义域名的内容，如 &lt;code&gt;blog.kamidox.com&lt;/code&gt;。然后在 Pelican 的配置文件 &lt;code&gt;publishconf.py&lt;/code&gt; 下添加如下内容：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;STATIC_PATHS &lt;span style="color: #666666"&gt;=&lt;/span&gt; [&lt;span style="color: #BB4444"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;]
EXTRA_PATH_METADATA &lt;span style="color: #666666"&gt;=&lt;/span&gt; {
    &lt;span style="color: #BB4444"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;: {&lt;span style="color: #BB4444"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;: &lt;span style="color: #BB4444"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;},   &lt;span style="color: #008800; font-style: italic"&gt;# 这是个路径映射，即会把 `content/extra/CNAME` 文件拷贝到 `output/CNAME`&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;留意一下上面的路径映射。如果没有这个映射，则 Pelican 会把 &lt;code&gt;content/extra&lt;/code&gt; 目录下的内容原封不动的拷贝到 &lt;code&gt;output/extra&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;h3 id="dns"&gt;修改 DNS 解析&lt;/h3&gt;
&lt;p&gt;添加一条 CNAME 记录，指向 username.github.io。比如，我需要把博客地址定为 blog.kamidox.com，则我添加一条 CNAME 解析为 blog 的记录，指向 kamidox.github.io。&lt;/p&gt;
&lt;p&gt;至此，我们完成了博客迁移工作。&lt;/p&gt;
&lt;div class="admonition notes"&gt;
&lt;p class="admonition-title"&gt;域名是如何解析的&lt;/p&gt;
&lt;p&gt;域名解析时，我们实际上创建了两个 CNAME 。一个是在域名提供商那边，把 blog.kamidox.com 子域名使用 CNAME 指向了 kamidox.github.io；另外一个是在 Github Pages 里的 &lt;code&gt;gh-pages&lt;/code&gt; 分支的根目录下有个内容为 blog.kamidox.com 的 CNAME 文件。当我们在浏览器里输入 blog.kamidox.com 时，浏览会先进行 DNS 解析，这个 DNS 解析和普通网络 DNS 解析没有区别，由于我们在域名提供商那边设置了 CNAME 跳转，所以这个 DNS 解析就跳转到 kamidox.github.io 上；接着进行第二次解析是在 Github 内部进行的，Github 会搜索用户下面所有的 Repo 的 &lt;code&gt;gh-pages&lt;/code&gt; 分支下的 CNAME，查找和 blog.kamidox.com 匹配的条目，在本文的例子里，Github 找到了 blogs 这个 Repo 的 &lt;code&gt;gh-pages&lt;/code&gt; ，于是最终跳转到了 kamidox.github.io/blogs 上面。这样就完成了域名绑定工作。&lt;/p&gt;
&lt;/div&gt;</summary><category term="github"></category><category term="pelican"></category></entry><entry><title>如何保持工作的激情</title><link href="http://blog.kamidox.com/be-passion.html" rel="alternate"></link><updated>2015-07-27T20:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-07-27:be-passion.html</id><summary type="html">&lt;p&gt;不少人都有这样的感觉：工作不停地重复，已经麻木了，工作就是在熬，在杀时间，然后领一份工资。身边不少做做技术的工程师，都比较羡慕硅谷的那种充满激情工作氛围。那么我们的工作为什么会变得无趣呢？&lt;/p&gt;
&lt;h2 id="_1"&gt;建立一个内化的目标&lt;/h2&gt;
&lt;p&gt;为什么要加上&lt;strong&gt;内化&lt;/strong&gt;这两个字呢？&lt;strong&gt;内化的目标，是我们的信仰，它确保我们在迷雾中航行时不失去方向；确保在迷茫，困难面前能坚定地前行，这是内在驱动力的主要来源。&lt;/strong&gt;创业团队的 CEO 的一个最重要的工作，就是确保把公司的目标内化到团队所有成员身上。让所有人知道我们的目标是什么，并建立起实现目标的信心。&lt;/p&gt;
&lt;h2 id="_2"&gt;建立即时反馈系统&lt;/h2&gt;
&lt;p&gt;即时反馈系统确保我们每走一小步都得到一个结果反馈，让我们知道我们哪里做好了，哪里还没做好。它确保让我们持续地改进和思考，而这种持续的反馈会带给我们持续的激励。比如我们在运营一个 App，通过在 App 内部埋点，可以看到用户的行为，看到用户是怎么使用我们的软件的，哪个功能是用户常用的，能不能优化？通过这些数据去改进我们的软件，改进后继续观察用户的使用情况，包括软件的用户增加数和活跃情况。当我们的改进能带来一些正向反馈时，这无疑对我们是最大的激励。&lt;/p&gt;
&lt;p&gt;相反，如果不知道如何测量我们的工作成果，那么很大的机会会让我们缺乏工作激情。因为我们不知道怎么做会让事情变得更加美好。所以，要建立一个即时反馈系统，首要任务是让工作成果可测量。&lt;/p&gt;
&lt;h2 id="_3"&gt;学会接纳&lt;/h2&gt;
&lt;p&gt;其实更多的时候，大部分人都处在工作没有激情的状态。考验一个人的，往往是在那些在迷茫困惑不解的时候，依然坚韧前行，做好自己该做的事情的能力。引用马云的一句鸡汤文：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任何团队的核心骨干，都必须学会在没有鼓励，没有认可，没有帮助，没有理解，没有宽容，没有退路，只有压力的情况下，一起和团队获得胜利。成功，只有一个定义，就是对结果负责。如果你靠别人的鼓励才能发光，你最多算个灯泡。我们必须成为发动机，去影响其他人发光，你自然就是核心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经常在网络上看到一些文章，描述硅谷的一些创业公司，感觉他们的工作都是充满激情的。实际上这个跟围城类似，外面的人看很精彩，但如果在围城内部来看，都是一堆细节和问题组成的一个意大利面条系统，系统里大部分人做的，就是持续地解决这些困难，优化细节。&lt;/p&gt;
&lt;p&gt;境由心生，你心中有什么样的世界，你看到的世界就长什么样。&lt;/p&gt;</summary><category term="thought"></category></entry><entry><title>利用 LeakCanary 来检查 Android 内存泄漏</title><link href="http://blog.kamidox.com/leakcanary.html" rel="alternate"></link><updated>2015-05-12T22:57:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-05-12:leakcanary.html</id><summary type="html">&lt;h3 id="_1"&gt;前言&lt;/h3&gt;
&lt;p&gt;你被概率性的 OOM 困扰么？有时候，OOM 像幽灵一样，挥之不去，可真想把它揪出来时，又捉之不着。或许，是时候用 &lt;a href="https://github.com/square/leakcanary"&gt;LeakCanary&lt;/a&gt; 来诊断一下了。它是一个用来检查 Android 下内存泄漏的开源库，这篇文章主要介绍其用法、架构和其背后的实现原理。&lt;/p&gt;
&lt;p&gt;Square &lt;a href="https://corner.squareup.com/2015/05/leak-canary.html"&gt;有篇文章&lt;/a&gt;介绍了开发这个库的原因。他们的一个付款流程里，需要用到用户的签名，他们直接用 Bitmap 来画签名，Bitmap 大小和屏幕分辨率是一样的。问题来了，在试图创建这个 Bitmap 对象时，概率性 OOM 如幽灵般相随。他们试了几个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Bitmap.Config.ALPHA_8&lt;/code&gt; 来节省内存&lt;/li&gt;
&lt;li&gt;捕获 &lt;code&gt;OutOfMemoryError&lt;/code&gt; 异常，调用 gc 清理内存，然后重试几次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终这些都不起作用。最终他们发现他们在错误的方向上走得太远了。当存在&lt;strong&gt;内存泄漏&lt;/strong&gt;时，可用内存越来越少，这个时候 OOM 可以发生在任何地方，特别是试图创建一些大内存对象，如 Bitmap 的时候。&lt;/p&gt;
&lt;p&gt;我们在上一篇文章&lt;a href="http://kamidox.com/android-memory-guide.html"&gt;《Android 内存与性能》&lt;/a&gt;里介绍了使用 &lt;a href="http://www.eclipse.org/mat/downloads.php"&gt;MAT&lt;/a&gt; 来分析内存泄漏的方法。概括起来核心步骤是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发生 OOM 或做一些可能存在内存泄漏的操作后，导出 HPROF 文件&lt;/li&gt;
&lt;li&gt;利用 MAT 结合代码分析，来发现一些引用异常，比如哪些对象本来应该被回收的，却还在系统堆中，那么它就是内存泄漏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如果有一个工具能自动完成这些事情，甚至在发生 OOM 之前，就把内存泄漏报告给你，那是多么美好的一件事情啊。&lt;/strong&gt;LeakCanary 就是用来干这个事情的。在测试你的 App 时，如果发生了内存泄漏，状态栏上会有通知告诉你。logcat 上也会有相应的 log 通知你。&lt;/p&gt;
&lt;div class="admonition notes"&gt;
&lt;p class="admonition-title"&gt;启发&lt;/p&gt;
&lt;p&gt;LeakCanary 产生的背后有几个有意思的启发。一是像 Square 这样公司一样会被 OOM 这种问题困扰；二是他们也会犯错，试了几种方法都不起作用；三是他们最终用一个优雅的方式解决了这个问题，并且通过开源库的方式让所有人共享他们的工作成果。&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_2"&gt;用法&lt;/h3&gt;
&lt;h4 id="activity"&gt;监控 Activity 泄露&lt;/h4&gt;
&lt;p&gt;我们经常把 Activity 当作为 Context 对象使用，在不同场合由各种对象引用 Activity。所以，Activity 泄漏是一个重要的需要检查的内存泄漏之一。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;public&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #0000FF"&gt;ExampleApplication&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;extends&lt;/span&gt; Application &lt;span style="color: #666666"&gt;{&lt;/span&gt;

    &lt;span style="color: #AA22FF; font-weight: bold"&gt;public&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;static&lt;/span&gt; RefWatcher &lt;span style="color: #00A000"&gt;getRefWatcher&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;Context context&lt;span style="color: #666666"&gt;)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
        ExampleApplication application &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #666666"&gt;(&lt;/span&gt;ExampleApplication&lt;span style="color: #666666"&gt;)&lt;/span&gt; context&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getApplicationContext&lt;/span&gt;&lt;span style="color: #666666"&gt;();&lt;/span&gt;
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; application&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;refWatcher&lt;/span&gt;&lt;span style="color: #666666"&gt;;&lt;/span&gt;
    &lt;span style="color: #666666"&gt;}&lt;/span&gt;

    &lt;span style="color: #AA22FF; font-weight: bold"&gt;private&lt;/span&gt; RefWatcher refWatcher&lt;span style="color: #666666"&gt;;&lt;/span&gt;

    &lt;span style="color: #AA22FF"&gt;@Override&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;public&lt;/span&gt; &lt;span style="color: #00BB00; font-weight: bold"&gt;void&lt;/span&gt; &lt;span style="color: #00A000"&gt;onCreate&lt;/span&gt;&lt;span style="color: #666666"&gt;()&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;super&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;onCreate&lt;/span&gt;&lt;span style="color: #666666"&gt;();&lt;/span&gt;
        refWatcher &lt;span style="color: #666666"&gt;=&lt;/span&gt; LeakCanary&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;install&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;this&lt;/span&gt;&lt;span style="color: #666666"&gt;);&lt;/span&gt;
    &lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;LeakCanary.install()&lt;/code&gt; 返回一个配置好了的 &lt;code&gt;RefWatcher&lt;/code&gt; 实例。它同时安装了 &lt;code&gt;ActivityRefWatcher&lt;/code&gt; 来监控 Activity 泄漏。即当 &lt;code&gt;Activity.onDestroy()&lt;/code&gt; 被调用之后，如果这个 Activity 没有被销毁，logcat 就会打印出如下信息告诉你内存泄漏发生了。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;    * com.example.leakcanary.MainActivity has leaked:
    * GC ROOT thread java.lang.Thread.&amp;lt;Java Local&amp;gt; &lt;span style="color: #666666"&gt;(&lt;/span&gt;named &lt;span style="color: #BB4444"&gt;&amp;#39;AsyncTask #1&amp;#39;&lt;/span&gt;&lt;span style="color: #666666"&gt;)&lt;/span&gt;
    * references com.example.leakcanary.MainActivity&lt;span style="color: #B8860B"&gt;$2&lt;/span&gt;.this&lt;span style="color: #B8860B"&gt;$0&lt;/span&gt; &lt;span style="color: #666666"&gt;(&lt;/span&gt;anonymous class extends android.os.AsyncTask&lt;span style="color: #666666"&gt;)&lt;/span&gt;
    * leaks com.example.leakcanary.MainActivity instance
    * Reference Key: c4d32914-618d-4caf-993b-4b835c255873
    * Device: Genymotion generic Google Galaxy Nexus - 4.2.2 - API &lt;span style="color: #666666"&gt;17&lt;/span&gt; - 720x1280 vbox86p
    * Android Version: 4.2.2 API: 17
    * Durations: &lt;span style="color: #B8860B"&gt;watch&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;5100ms, &lt;span style="color: #B8860B"&gt;gc&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;104ms, heap &lt;span style="color: #B8860B"&gt;dump&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;82ms, &lt;span style="color: #B8860B"&gt;analysis&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;3008ms
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="admonition notes"&gt;
&lt;p class="admonition-title"&gt;Notes&lt;/p&gt;
&lt;p&gt;LeakCanary 自动检测 Activity 泄漏只支持 Android ICS 以上版本。因为 &lt;code&gt;Application.registerActivityLifecycleCallbacks()&lt;/code&gt; 是在 API 14 引入的。如果要在 ICS 之前监测 Activity 泄漏，可以重载 &lt;code&gt;Activity.onDestroy()&lt;/code&gt; 方法，然后在这个方法里调用 &lt;code&gt;RefWatcher.watch(this)&lt;/code&gt; 来实现。&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id="fragment"&gt;监控 Fragment 泄漏&lt;/h4&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;public&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;abstract&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #0000FF"&gt;BaseFragment&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;extends&lt;/span&gt; Fragment &lt;span style="color: #666666"&gt;{&lt;/span&gt;

    &lt;span style="color: #AA22FF"&gt;@Override&lt;/span&gt; 
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;public&lt;/span&gt; &lt;span style="color: #00BB00; font-weight: bold"&gt;void&lt;/span&gt; &lt;span style="color: #00A000"&gt;onDestroy&lt;/span&gt;&lt;span style="color: #666666"&gt;()&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;super&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;onDestroy&lt;/span&gt;&lt;span style="color: #666666"&gt;();&lt;/span&gt;
        RefWatcher refWatcher &lt;span style="color: #666666"&gt;=&lt;/span&gt; ExampleApplication&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getRefWatcher&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;getActivity&lt;span style="color: #666666"&gt;());&lt;/span&gt;
        refWatcher&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;watch&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;this&lt;/span&gt;&lt;span style="color: #666666"&gt;);&lt;/span&gt;
    &lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当 &lt;code&gt;Fragment.onDestroy()&lt;/code&gt; 被调用之后，如果这个 fragment 实例没有被销毁，那么就会从 logcat 里看到相应的泄漏信息。&lt;/p&gt;
&lt;h4 id="_3"&gt;监控其他泄漏&lt;/h4&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;    &lt;span style="color: #666666"&gt;...&lt;/span&gt;
    RefWatcher refWatcher &lt;span style="color: #666666"&gt;=&lt;/span&gt; ExampleApplication&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getRefWatcher&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;getActivity&lt;span style="color: #666666"&gt;());&lt;/span&gt;
    refWatcher&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;watch&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;someObjNeedGced&lt;span style="color: #666666"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当 &lt;code&gt;someObjNeedGced&lt;/code&gt; 还在内存中时，就会在 logcat 里看到内存泄漏的提示。&lt;/p&gt;
&lt;h4 id="leakcanary"&gt;集成 LeakCanary 库&lt;/h4&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;dependencies {
    debugCompile &amp;#39;com.squareup.leakcanary:leakcanary-android:1.3&amp;#39;
    releaseCompile &amp;#39;com.squareup.leakcanary:leakcanary-android-no-op:1.3&amp;#39;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 debug 版本上，集成 LeakCanary 库，并执行内存泄漏监测，而在 release 版本上，集成一个无操作的 wrapper ，这样对程序性能就不会有影响。&lt;/p&gt;
&lt;h3 id="_4"&gt;原理&lt;/h3&gt;
&lt;h4 id="leakcanary_1"&gt;LeakCanary 流程图&lt;/h4&gt;
&lt;p&gt;&lt;img alt="leakcanary" src="https://raw.githubusercontent.com/kamidox/blogs/master/images/leakcanary.png" /&gt;&lt;/p&gt;
&lt;p&gt;LeakCanary 的机制如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;RefWatcher.watch()&lt;/code&gt; 会以监控对象来创建一个 &lt;code&gt;KeyedWeakReference&lt;/code&gt; 弱引用对象&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;AndroidWatchExecutor&lt;/code&gt; 的后台线程里，来检查弱引用已经被清除了，如果没被清除，则执行一次 GC&lt;/li&gt;
&lt;li&gt;如果弱引用对象仍然没有被清除，说明内存泄漏了，系统就导出 hprof 文件，保存在 app 的文件系统目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HeapAnalyzerService&lt;/code&gt; 启动一个单独的进程，使用 &lt;code&gt;HeapAnalyzer&lt;/code&gt; 来分析 hprof 文件。它使用另外一个开源库 &lt;a href="https://github.com/square/haha"&gt;HAHA&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HeapAnalyzer&lt;/code&gt; 通过查找 &lt;code&gt;KeyedWeakReference&lt;/code&gt; 弱引用对象来查找内在泄漏&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HeapAnalyzer&lt;/code&gt; 计算 &lt;code&gt;KeyedWeakReference&lt;/code&gt; 所引用对象的最短强引用路径，来分析内存泄漏，并且构建出对象引用链出来。&lt;/li&gt;
&lt;li&gt;内存泄漏信息送回给 &lt;code&gt;DisplayLeakService&lt;/code&gt;，它是运行在 app 进程里的一个服务。然后在设备通知栏显示内存泄漏信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="_5"&gt;几个有意思的代码&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;如何导出 hprof 文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;File heapDumpFile &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;new&lt;/span&gt; File&lt;span style="color: #666666"&gt;(&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;heapdump.hprof&amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;);&lt;/span&gt;
Debug&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;dumpHprofData&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;heapDumpFile&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getAbsolutePath&lt;/span&gt;&lt;span style="color: #666666"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以参阅 &lt;a href="https://github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidHeapDumper.java"&gt;AndroidHeapDumper.java&lt;/a&gt; 的代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何分析 hprof 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是个比较大的话题，感兴趣的可以移步另外一个开源库 &lt;a href="https://github.com/square/haha"&gt;HAHA&lt;/a&gt;，它的祖先是 &lt;a href="http://www.eclipse.org/mat/downloads.php"&gt;MAT&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何使用 HandlerThread&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以参阅 &lt;a href="https://github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidWatchExecutor.java"&gt;AndroidWatchExecutor.java&lt;/a&gt;的代码，特别是关于 Handler, Loop 的使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;怎么知道某个变量已经被 GC 回收&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以参阅 &lt;a href="http://www.plantuml.com"&gt;RefWatcher.java&lt;/a&gt; 的 &lt;code&gt;ensureGone()&lt;/code&gt; 函数。最主要是利用 &lt;code&gt;WeakReference&lt;/code&gt; 和 &lt;code&gt;ReferenceQueue&lt;/code&gt; 机制。简单地讲，就是当弱引用 &lt;code&gt;WeakReference&lt;/code&gt; 所引用的对象被回收后，这个 &lt;code&gt;WeakReference&lt;/code&gt; 对象就会被添加到 &lt;code&gt;ReferenceQueue&lt;/code&gt; 队列里，我们可以通过其 &lt;code&gt;poll()&lt;/code&gt; 方法获取到这个被回收的对象的 &lt;code&gt;WeakReference&lt;/code&gt; 实例，进而知道需要监控的对象是否被回收了。&lt;/p&gt;
&lt;h3 id="_6"&gt;关于内存泄漏&lt;/h3&gt;
&lt;p&gt;内存泄漏可能很容易发现，比如 Cursor 没关闭；比如在 &lt;code&gt;Activity.onResume()&lt;/code&gt; 里 register 了某个需要监听的事件，但在 &lt;code&gt;Activity.onPause()&lt;/code&gt; 里忘记 unregister 了；内存泄漏也可能很难发现，比如 &lt;a href="https://github.com/square/leakcanary/blob/master/library/leakcanary-sample/src/main/java/com/example/leakcanary/MainActivity.java"&gt;LeakCanary 示例代码&lt;/a&gt;，隐含地引用，并且只有在旋转屏幕时才会发生。还有更难发现，甚至无能为力的内存泄漏，比如 Android SDK 本身的 BUG 导致内存泄漏。&lt;a href="https://github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java"&gt;AndroidExcludedRefs.java&lt;/a&gt; 里就记录了一些己知的 AOSP 版本的以及其 OEM 实现版本里存在的内存泄漏。&lt;/p&gt;
&lt;h3 id="_7"&gt;本期推荐&lt;/h3&gt;
&lt;p&gt;推荐一个画图工具 &lt;a href="http://www.plantuml.com"&gt;planUML&lt;/a&gt;，其最大的特色是使用脚本来画图。它和 &lt;a href="http://staruml.io"&gt;starUML&lt;/a&gt; 的最大区别是，前者是画图工具，类似于微软的 visio，而且支持脚本画图，后者是建模工具。&lt;a href="http://www.plantuml.com/PlantUML_Language_Reference_Guide.pdf"&gt;这里&lt;/a&gt;是 planUML 的官方文档。它还支持一堆&lt;a href="http://www.plantuml.com/running.html"&gt;扩展&lt;/a&gt;，比如 &lt;a href="https://github.com/jvantuyl/sublime_diagram_plugin"&gt;Sublime Text&lt;/a&gt;等。本文的&lt;a href="https://raw.githubusercontent.com/kamidox/blogs/master/images/leakcanary.wsd"&gt;流程图&lt;/a&gt;就是用 planUML 画的。&lt;/p&gt;</summary><category term="android"></category></entry><entry><title>Android 内存与性能</title><link href="http://blog.kamidox.com/android-memory-guide.html" rel="alternate"></link><updated>2015-04-22T23:30:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-04-22:android-memory-guide.html</id><summary type="html">&lt;h3 id="_1"&gt;官方教程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/course/ud825"&gt;Android Performance&lt;/a&gt; 是 GOOGLE 近期发布在 Udacity 上的官方教程&lt;br /&gt;
   不方便科学上网的同学可以从我的&lt;a href="http://pan.baidu.com/s/1sjPZbxr"&gt;百度网盘&lt;/a&gt;里下载。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youku.com/playlist_show/id_23494296.html"&gt;Android Performance Patterns&lt;/a&gt; 是 GOOGLE 在 2015 年初发布在 Facebook 上的专题课程&lt;br /&gt;
   这部分内容 &lt;a href="http://www.youku.com/playlist_show/id_23494296.html"&gt;CDGChina&lt;/a&gt; 加了中文字幕，并放在 &lt;a href="http://www.youku.com/playlist_show/id_23494296.html"&gt;Youku&lt;/a&gt; 上了。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="admonition notes"&gt;
&lt;p class="admonition-title"&gt;Notes&lt;/p&gt;
&lt;p&gt;看来 Android 生态圈的性能和电量消耗等问题，已经严重到让 Google 不得不重视的地步啦 ~~&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="_2"&gt;关于内存的几个理论知识&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;GC 的工作机制&lt;/strong&gt;&lt;br /&gt;
当 GC 工作时，虚拟机停止其他工作。频繁地触发 GC 进行内存回收，会导致系统性能严重下降。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存抖动&lt;/strong&gt;&lt;br /&gt;
在极短的时间内，分配大量的内存，然后又释放它，这种现象就会造成内存抖动。典型地，在 View 控件的 onDraw 方法里分配大量内存，又释放大量内存，这种做法极易引起内存抖动，从而导致性能下降。因为 onDraw 里的大量内存分配和释放会给系统堆空间造成压力，触发 GC 工作去释放更多可用内存，而 GC 工作起来时，又会吃掉宝贵的帧时间 (帧时间是 16ms) ，最终导致性能问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存泄漏&lt;/strong&gt;&lt;br /&gt;
Java 语言的内存泄漏概念和 C/C++ 不太一样，在 Java 里是指不正确地引用导致某个对象无法被 GC 释放，从而导致可用内存越来越少。比如，一个图片查看程序，使用一个静态 Map 实例来缓存解码出来的 Bitmap 实例来加快加载进度。这个时候就可能存在内存泄漏。&lt;/p&gt;
&lt;p&gt;内存泄漏会导致可用内存越来越少，从而导致频繁触发 GC 回收内存，进而导致性能下降。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调试工具&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory Monitor Tool: 可以查阅 GC 被触发起来的时间序列，以便观察 GC 是否影响性能。&lt;/li&gt;
&lt;li&gt;Allocation Tracker Tool: 从 Android Studio 的这个工具里查看一个函数调用栈里，是否有大量的相同类型的 Object 被分配和释放。如果有，则其可能引起性能问题。&lt;/li&gt;
&lt;li&gt;MAT: 这是 Eclipse 的一个插件，也有 &lt;a href="http://www.eclipse.org/mat/downloads.php"&gt;stand alone&lt;/a&gt; 的工具可以下载使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;几个原则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;别在循环里分配内存 (创建新对象)&lt;/li&gt;
&lt;li&gt;尽量别在 View 的 onDraw 函数里分配内存&lt;/li&gt;
&lt;li&gt;实在无法避免在这些场景里分配内存时，考虑使用对象池 (Object Pool)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;两个简单的实例&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;内存抖动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过一个非常简单的例子来演示内存抖动。这个例子里，在自定义 View 的 onDraw 方法里大量分配内存来演示内存抖动和性能之间的关系。&lt;/p&gt;
&lt;p&gt;版本一：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;    &lt;span style="color: #AA22FF"&gt;@Override&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;protected&lt;/span&gt; &lt;span style="color: #00BB00; font-weight: bold"&gt;void&lt;/span&gt; &lt;span style="color: #00A000"&gt;onDraw&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;Canvas canvas&lt;span style="color: #666666"&gt;)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;super&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;onDraw&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;canvas&lt;span style="color: #666666"&gt;);&lt;/span&gt;

        String msg &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;;&lt;/span&gt;
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt; &lt;span style="color: #666666"&gt;(&lt;/span&gt;&lt;span style="color: #00BB00; font-weight: bold"&gt;int&lt;/span&gt; i &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #666666"&gt;0;&lt;/span&gt; i &lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color: #666666"&gt;500;&lt;/span&gt; i&lt;span style="color: #666666"&gt;++)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #666666"&gt;(&lt;/span&gt;i &lt;span style="color: #666666"&gt;!=&lt;/span&gt; &lt;span style="color: #666666"&gt;0)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
                msg &lt;span style="color: #666666"&gt;+=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;;&lt;/span&gt;
            &lt;span style="color: #666666"&gt;}&lt;/span&gt;
            msg &lt;span style="color: #666666"&gt;+=&lt;/span&gt; Integer&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;toString&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;i &lt;span style="color: #666666"&gt;+&lt;/span&gt; &lt;span style="color: #666666"&gt;1);&lt;/span&gt;
        &lt;span style="color: #666666"&gt;}&lt;/span&gt;
        Log&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;d&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; msg&lt;span style="color: #666666"&gt;);&lt;/span&gt;
    &lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;版本二：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;    &lt;span style="color: #AA22FF"&gt;@Override&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;protected&lt;/span&gt; &lt;span style="color: #00BB00; font-weight: bold"&gt;void&lt;/span&gt; &lt;span style="color: #00A000"&gt;onDraw&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;Canvas canvas&lt;span style="color: #666666"&gt;)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;super&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;onDraw&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;canvas&lt;span style="color: #666666"&gt;);&lt;/span&gt;

        StringBuilder sb &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;new&lt;/span&gt; StringBuilder&lt;span style="color: #666666"&gt;();&lt;/span&gt;
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt; &lt;span style="color: #666666"&gt;(&lt;/span&gt;&lt;span style="color: #00BB00; font-weight: bold"&gt;int&lt;/span&gt; i &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #666666"&gt;0;&lt;/span&gt; i &lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color: #666666"&gt;500;&lt;/span&gt; i &lt;span style="color: #666666"&gt;++)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #666666"&gt;(&lt;/span&gt;i &lt;span style="color: #666666"&gt;!=&lt;/span&gt; &lt;span style="color: #666666"&gt;0)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
                sb&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;append&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;);&lt;/span&gt;
            &lt;span style="color: #666666"&gt;}&lt;/span&gt;
            sb&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;append&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;i &lt;span style="color: #666666"&gt;+&lt;/span&gt; &lt;span style="color: #666666"&gt;1);&lt;/span&gt;
        &lt;span style="color: #666666"&gt;}&lt;/span&gt;
        Log&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;d&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; sb&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;toString&lt;/span&gt;&lt;span style="color: #666666"&gt;());&lt;/span&gt;
    &lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;内存抖动的特征：&lt;/p&gt;
&lt;p&gt;从 Memory Monitor 来看，有毛刺出现。即短时间内分配大量的内存并触发 GC。&lt;br /&gt;
&lt;img alt="memory_churn" src="https://raw.githubusercontent.com/kamidox/blogs/master/images/memory_churn.gif" /&gt;&lt;/p&gt;
&lt;p&gt;从 Allocation Tracker 里看，一次操作会有大量的内存分配产生。&lt;br /&gt;
&lt;img alt="memory_tracker" src="https://raw.githubusercontent.com/kamidox/blogs/master/images/memory_tracker.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存泄漏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个例子里，我们简单地让点击 Settings 菜单，就产生一个 100KB 的内存泄漏。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;    &lt;span style="color: #AA22FF; font-weight: bold"&gt;private&lt;/span&gt; &lt;span style="color: #00BB00; font-weight: bold"&gt;void&lt;/span&gt; &lt;span style="color: #00A000"&gt;addSomeCache&lt;/span&gt;&lt;span style="color: #666666"&gt;()&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
        &lt;span style="color: #008800; font-style: italic"&gt;// add 100KB cache&lt;/span&gt;
        &lt;span style="color: #00BB00; font-weight: bold"&gt;int&lt;/span&gt; key &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;new&lt;/span&gt; Random&lt;span style="color: #666666"&gt;().&lt;/span&gt;&lt;span style="color: #BB4444"&gt;nextInt&lt;/span&gt;&lt;span style="color: #666666"&gt;(100);&lt;/span&gt;
        Log&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;d&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;sfox&amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;add cache for key &amp;quot;&lt;/span&gt; &lt;span style="color: #666666"&gt;+&lt;/span&gt; key&lt;span style="color: #666666"&gt;);&lt;/span&gt;
        sCache&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;put&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;key&lt;span style="color: #666666"&gt;,&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;new&lt;/span&gt; &lt;span style="color: #00BB00; font-weight: bold"&gt;byte&lt;/span&gt;&lt;span style="color: #666666"&gt;[102400]);&lt;/span&gt;
    &lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;内存泄漏的特征：&lt;/p&gt;
&lt;p&gt;从 Memory Monitor 来看，内存占用越来越大&lt;br /&gt;
&lt;img alt="memory_tracker" src="https://raw.githubusercontent.com/kamidox/blogs/master/images/memory_leak.png" /&gt;&lt;/p&gt;
&lt;p&gt;利用 &lt;a href="http://www.eclipse.org/mat/downloads.php"&gt;MAT&lt;/a&gt; 工具进行专业分析。这是个很大的话题。几乎可以独立成几个章节来讲。可以参阅 MAT 本身自带的 Tutorials 来学习。另外，&lt;a href="http://android-developers.blogspot.hk/2011/03/memory-analysis-for-android.html"&gt;这篇文章&lt;/a&gt;里的分析方法是个不错的开始。&lt;/p&gt;
&lt;p&gt;示例代码使用 Android Studio 开发环境，可以从&lt;a href="http://pan.baidu.com/s/1sj3Exsx"&gt;这里&lt;/a&gt;下载。&lt;/p&gt;
&lt;h3 id="mat"&gt;利用 MAT 分析内存问题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;内存泄漏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个典型的问题是 Android 系统越用越慢。这种典型地是由内存泄漏引起的。一个很有用的解决这种问题的办法是：比较前后两个阶段的内存的使用情况。一般流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用 ddms 工具 dump HPROF file&lt;/li&gt;
&lt;li&gt;利用 hprof-conv 把 dalvik 格式的转换为普通 jvm 格式&lt;/li&gt;
&lt;li&gt;重复步骤 1 和 2 抓出两份 LOG。&lt;/li&gt;
&lt;li&gt;利用 MAT 对两份 HRPOF 文件进行分析，结合代码找出可能存在的内存泄漏&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如针对拨号盘越来越慢的问题，我们可以开机后启动拨号盘，打进打出10个电话。然后抓个 HPROF 文件。接着，再打进打出10个电话，再抓一个 HPROF 文件。接着拿这两个文件对比分析，看是不是会造成电话打进打出越多，内存占用越多的情况发生。&lt;/p&gt;
&lt;div class="admonition notes"&gt;
&lt;p class="admonition-title"&gt;HPROF文件&lt;/p&gt;
&lt;p&gt;HPROF 简单地理解，就是从 jvm 里 dump 出来的内存和 CPU 使用情况的一个二进制文件。它的英文全名叫 A Heap/CPU Profiling Tool。&lt;a href="http://docs.oracle.com/javase/7/docs/technotes/samples/hprof.html"&gt;这里&lt;/a&gt;有它完整的官方文档和它的历史介绍。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;打开 MAT 后，会有一个 Tutorials 来教大家怎么用。这里列出几个操作步骤及其注意事项。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 DDMS 里导出 HPROF 文件前，最好手动执行一下 GC。目的是让导出的内存全部是被引用的。否则在做内存占用对比时，会有很多不必要的内存占用被标识出来，干扰我们进行分析。&lt;/li&gt;
&lt;li&gt;进行对比时，最好是选择操作较多的和操作较少的对比，这样得出的 delta 是正数&lt;/li&gt;
&lt;li&gt;通过对比，发现内存泄漏时，可以用 OQL 来查询，并通过 Root to GC 功能来找到发生泄漏的源代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在我们的示例程序里面，每次点击 Settings 菜单，都会导致一次100KB的内存泄漏。下面是我们利用上面介绍的流程来查找内存泄漏问题。我们先点击 5 次 Settings 菜单，然后手动触发一次 GC，再导出 HPROF 文件。接着，我们再点击 6 次 Settings 菜单，然后手动触发一次 GC，再导出第二份 HPROF 文件。我们拿这两份 HPROF 就可以做一些对比。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mat_diff.png" src="https://raw.githubusercontent.com/kamidox/blogs/master/images/mat_diff.png" /&gt;&lt;/p&gt;
&lt;p&gt;通过上图可以看到，两次操作确实导致了某些类的实例增加了。图中可以清楚地看到 byte[] 和 java.util.HashMap$HashMapEntry 两个类增加得比较明显。这样，我们随便选择一个，通过 OQL 来查询系统中的这个内存。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mat_qql.png" src="https://raw.githubusercontent.com/kamidox/blogs/master/images/mat_qql.png" /&gt;&lt;/p&gt;
&lt;p&gt;从上图可以找到，本次 dump 出来的内存里，确实有很多个这个类的实例。在图上右击任何一个实例，右击，选择 &lt;code&gt;Paths to GC roots&lt;/code&gt;，可以找到这个实例是被谁引用的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mat_gc_root.png" src="https://raw.githubusercontent.com/kamidox/blogs/master/images/mat_gc_root.png" /&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看出来，这个内存是被 MainActivity 里的 sCache 引用的。通过阅读代码，我们就可以找到这个漏洞了。即每次都往 sCache 里保存一个引用。&lt;/p&gt;
&lt;h3 id="_4"&gt;总结&lt;/h3&gt;
&lt;p&gt;Google 视频介绍的内容是硬知识，了解这些知识可以帮助我们写出高质量，高性能的代码。而 MAT, HPROF, Memory Monitor, Allocation Tracker 提供了一个“破案”的工具给我们。我们利用这些工具，倒回来去发现代码里的问题。&lt;/p&gt;
&lt;h3 id="_5"&gt;延伸阅读&lt;/h3&gt;
&lt;p&gt;关于 Android 性能优化，网络上有几篇比较好的文章，基本按照 GOOGLE 的官方教程翻译过来的，质量比较高。可以参考一下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://hukai.me/android-performance-memory/"&gt;Android 性能优化内存篇&lt;/a&gt;－&lt;a href="http://hukai.me"&gt;胡凯的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hukai.me/android-performance-patterns/"&gt;Android性能优化典范&lt;/a&gt;－&lt;a href="http://hukai.me"&gt;胡凯的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;冷知识&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GC 是在 1959 年由 John McCarthy 发明的，此发明是为了解决 Lisp 编程语言里的内存问题的。&lt;a href="http://book.douban.com/subject/6021440/"&gt;《黑客和画家》&lt;/a&gt;作者，硅谷最有影响力的孵化器公司 YC 创立者 Paul Graham 高度评价 Lisp 语言，认为编程语言发展到现在，还是没有跳出 Lisp 语言在上世纪 60 年代所倡导的那些理念。并且，他还把自己当初创业，实现财务自由的项目 Viaweb 的成功归功于 Lisp 语言。详细可阅读 Paul Graham 的&lt;a href="http://www.paulgraham.com/hundred.html"&gt;这篇博客&lt;/a&gt;和&lt;a href="http://www.paulgraham.com/diff.html"&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;</summary><category term="android"></category></entry><entry><title>《欲望之源》读书笔记</title><link href="http://blog.kamidox.com/mean-genes-notes.html" rel="alternate"></link><updated>2015-03-27T23:30:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-03-27:mean-genes-notes.html</id><summary type="html">&lt;h3 id="_1"&gt;有趣&lt;/h3&gt;
&lt;p&gt;这是本有趣的书。最了不起的地方是把我们身上种种难以忍受的缺点，从基因进化的角度给出了合理地解释，让我们了解到这些缺点不但不讨厌，而且还在人类漫长的进化过程中，帮助我们从残酷地竞争中生存了下来。&lt;/p&gt;
&lt;p&gt;为什么我们对美食没有抵抗力？为什么存钱这么困难？为什么香烟，可卡因让人难以割舍？为什么我们能从冒险中找到刺激？为什么人生来就贪得无厌，不知满足？为什么男女有别？男人什么时候最容易出轨？女人为什么会红杏出墙？为什么我们会爱我们的家人？为什么人生下来就是自私的？&lt;/p&gt;
&lt;p&gt;没错，我们就是这些问题人类的一份子。这是我们的基因为了完成他的终极目标而设计的一整套系统，我们就是个基因系统的载体，只有符合这套系统的基因才能得到终极大奖：复制。&lt;/p&gt;
&lt;p&gt;我们的祖先大部分时间都生活在饥寒交迫中，遇到卡路里，总是想办法尽最大的努力把它们吃到肚子里，变成脂肪储存到肚子或大腿，以便能捱过食物短缺的艰辛。我们生活在物质极大丰富的工业社会，但我们的基因还停留在山顶洞时期，时刻指导着我们的大脑储存卡路里。在进化的早期，类人猿从相对安全的树上走到要面对凶猛野兽的威胁的平原，我们在冒险。我们从山洞里走出来，走出非洲，向欧洲和亚洲迁移，跨过白令海峡，到达北美，进入南美。我们就是这些爱冒险的远古人的后代，我们从他们身上继承了爱冒险的基因。那些不爱冒险的远古人，无法适应环境的变化，在进化过程中被淘汰掉了，他们的基因没有机会得到复制。我们总是倾向把赚来的钱全部花掉，因为基因认为在他那个年代，没有冰箱和银行，所有的财富就是吃到肚子里的食物，那些没有马上消费掉的食物，最终会成为秃鹰的食物。我们明知道彩票中奖概率低得离谱，比被雷电击中的概率还要低N倍，但我们还是乐此不彼地买彩票，因为我们的祖先生活范围很小，最多几百人的规模，看到别人中奖，我们的基因根据他过往的经验，总是高佑了自己的中奖概率。看到蛇，不管有没有毒，总是让我们紧张害怕，而面对更危险的枪，我们却没有害怕的感觉。基因根据它的老经验，在他生活的年代，被蛇咬死的人占了很高的比例，而他不了解的是，在现代社会，枪才是致命地武器，一年中被蛇咬死的人的数量还不足死在枪口下的人的数量的万分之一。&lt;/p&gt;
&lt;p&gt;基因自私且聪明，它利用多巴胺等“快乐神经传递素”作为激励，控制着情绪系统，操纵着我们按照他们的意图行事。我们是成了基因的傀儡，所有的行为都指向了唯一的终极目标：基因复制。&lt;/p&gt;
&lt;h3 id="_2"&gt;救赎&lt;/h3&gt;
&lt;p&gt;这是一本自我救赎的书。我们的所有缺点，都是我们可爱的基因为了完成自我复制耍的小把戏。我们所有的缺点，都是因为我们的基因进化跟不上环境变化导致的一系列误会。我们戴上了智慧的眼镜，看透了它。坦然接受了这些缺点，在需要的时候，我们也可以耍点小聪明戏弄一下基因。你要去一次食物丰盛的应酬，但又不想给肥胖的身体增加负担，可以在去之前吃两个馒头下去。想要体验血脉喷张的刺激，不需要再去体验狮口脱脸了，坐个过山车依然可以让你的肾上腺素激烈上扬。&lt;/p&gt;
&lt;p&gt;作为基因载体的人，从进化角度，基因给我们定义了角色，其终极目标是为了完成基因复制。作为有自由意志的个体的人，我们想定义自己的角色，而不愿意成为基因的傀儡，我们的一生，在进化的历史进程中实在短得不值一提。通过这本书，我们明白了我们在进化历史上的角色，让我们看透基因的小把戏，让我们更好地定义作为自由意志的个体的角色。&lt;/p&gt;
&lt;p&gt;正如本书导言所写：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最大的敌人是自己&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;知己知彼，虽不一定百战百胜，既然注定了这是一场长期的战争，至少让我们有机会了解一下驻扎在我们体内的基因敌人。&lt;/p&gt;
&lt;h3 id="_3"&gt;今日推荐&lt;/h3&gt;
&lt;p&gt;推荐&lt;a href="http://mindhacks.cn"&gt;刘未鹏的博客&lt;/a&gt;以及他的一本书&lt;a href="http://book.douban.com/subject/6709809/"&gt;《暗时间》&lt;/a&gt;。关于编程，心理学，方法论。你会惊叹作者的思考深度。&lt;/p&gt;</summary><category term="thought"></category></entry><entry><title>福流理论</title><link href="http://blog.kamidox.com/flow-experience.html" rel="alternate"></link><updated>2015-03-22T23:24:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-03-22:flow-experience.html</id><summary type="html">&lt;h3 id="_1"&gt;福流体验&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;人们对快乐的追求是为了快乐本身，而对其他所有的目标 - 比如健康，金钱，权力等，却是只有在我们认为会让自身快乐时才会得到重视。&amp;mdash; 米哈里·奇克森特米哈伊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;米哈里·奇克森特米哈伊 (&lt;a href="http://en.wikipedia.org/wiki/Mihaly_Csikszentmihalyi"&gt;Mihaly Csikszentmihalyi&lt;/a&gt;) 为感到快乐的境界想出了一个新的词汇来形容，他将此称为&lt;strong&gt;福流体验&lt;/strong&gt; (&lt;a href="http://zh.m.wikipedia.org/wiki/心流理論"&gt;Flow Experience&lt;/a&gt;)。根据米哈里·奇克森特的研究，能产生沉浸或心流体验的活动通常具备以下几个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;专注&lt;/strong&gt;：密切地专注于某件活动&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自主&lt;/strong&gt;：这些活动是我们自己的选择&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;挑战&lt;/strong&gt;：这项活动难度不能低到让我们感到无聊，也不能高到让我们过劳而无所适从&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标明确&lt;/strong&gt;：这项活动必须具备明确的目标&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;即时反馈&lt;/strong&gt;：活动的成果必须得到立即反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;置身于&lt;strong&gt;沉浸心流&lt;/strong&gt;体验的人们，不但会感觉到深深的满足，也会无视时间的流逝，而且会因为手中的工作而彻底忘记了自己。这些人沉浸于往往会让人筋疲力尽的工作时，反倒是他们最快乐的时候。&lt;/p&gt;
&lt;h3 id="_2"&gt;福流模型&lt;/h3&gt;
&lt;p&gt;程序员是幸福的，我想不出有比程序员更容易产生沉浸体验的工作了。唯一的问题似乎是在工作难度上。如果你是个程序员，但没有体验到沉浸心流，问题多半是出现在工作难度和你的能力上，下图是米哈里·奇克森的福流模型 (flow model):&lt;/p&gt;
&lt;p&gt;&lt;img alt="flow model" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Challenge_vs_skill.svg/600px-Challenge_vs_skill.svg.png" /&gt;&lt;/p&gt;
&lt;p&gt;上述模型可以发现很有意思的推论。做相同难度的工作，个人能力的高低会影响情绪体验。比如，对于长期从事&lt;strong&gt;低挑战性&lt;/strong&gt;的工作的人，如果个人能力较低，较容易产生&lt;a href="http://en.wikipedia.org/wiki/Apathy"&gt;冷淡 (Apathy)&lt;/a&gt;情绪体验，而个人能力较高时，却是产生&lt;a href="http://en.wikipedia.org/wiki/Relaxation_(psychology)"&gt;消遣 (Relaxation)&lt;/a&gt; 体验。想起了&lt;a href="http://www.douban.com/note/356146835/"&gt;渔夫和富翁晒太阳&lt;/a&gt;的笑话，虽然最终大家都在晒太阳，但晒太阳时产生的情绪体验是不一样的。如果一个事情让你很痛苦，想想看是自己能力不足还是能力过剩。&lt;/p&gt;
&lt;h3 id="_3"&gt;个人体验&lt;/h3&gt;
&lt;p&gt;我有一次较深刻的时间跨度较长的福流体验大概是在2006年，那个时候我在做一个 side project：用 C 语言实现手机上的浏览器，彩信，电子邮件客户端，目标是在各个功能手机平台上通用。这一目标在那个时候面临的挑战不小。主要手机开发环境不象现在的智能手机这样规范。MTK，TI，朗讯和展讯等平台的图形系统千差万别，类似现在苹果和 Android 的差别。系统框架层也比较弱，大部分系统只提供 TCP/IP 接口，连 HTTP 协议都没有。所幸，基本所有平台都是基于 C/C++ ，所以 C 语言基本可以通吃。为实现这样的目标需要做以下几个事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一套可移植的的轻量级的图形系统&lt;/li&gt;
&lt;li&gt;系统基础设施及其封装。如文件系统接口封装，基础图形原语封装，内存管理算法，BASE64 编解码等&lt;/li&gt;
&lt;li&gt;基础网络协议。包括 HTTP 协议，WSP/WTP 协议，SMTP/POP3/IMAP 协议，XML 解析等&lt;/li&gt;
&lt;li&gt;应用协议。MMS 解析和打包，RFC822/RFC2822 Message 解析和打包，HTML 解析和渲染等&lt;/li&gt;
&lt;li&gt;内存及性能。特别是内存，那个时候整个浏览器一般只能使用不超过 2MB 的内存。我试验过在浏览像新浪这种将近 200KB 的 HTML 网页时只使用不到 2MB 的内存，当然，只支持 HTML，不支持 JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那个时候刚毕业 2 年多，工作中一直在接触网络协议，在阅读 GNU 的一些开源代码。而这一 side project 在当时看起来也比较有市场需求，因为很多手机公司都从供应商处购买浏览器/彩信软件，授权费达到1刀每台。在这样的背影下，我每天写代码到零晨 2-3 点，第二天一大早照样精神抖擞地挤公交去上班。那个时候其实不是真正想写代码到 2-3 点，而是写着写着不知不觉就到那个点了，只好很不情愿地去睡觉。每天看着自己脑中的蓝图一点地画出来，这是最好地即时反馈系统。那个时候我女朋友 (现在的老婆) 很不理解我的行为，也心疼，觉得我这样太累了。但我觉得那段时间真的是我最快乐的时光。我甚至到现在都无法想象那个时候的我有那么强的耐心和定力。&lt;/p&gt;
&lt;p&gt;那个时候，经常对女朋友说，以后买房子就靠这个软件了。当然最终证明这是个笑话，不是软件没做出来，而是世界变化太快，智能手机把功能手机赶出了历史舞台。最终这个软件除了给我积累了一点吹牛的素材外，其实还是有两个很大的价值，一是让我有了福流体验，二是造了这么多轮子，让我编程的基本功有了长足的进步。&lt;/p&gt;
&lt;h3 id="_4"&gt;今日推荐&lt;/h3&gt;
&lt;p&gt;推荐一个程序员的微信公众号&lt;a href="http://zhuanlan.zhihu.com/prattle"&gt;程序人生&lt;/a&gt;，微信搜索 programmer_life 可以关注。篇篇原汁原味，关于技术，关于管理。&lt;/p&gt;</summary></entry><entry><title>除了编程语言，程序员还需要知道哪些东西</title><link href="http://blog.kamidox.com/more-than-programe-languages.html" rel="alternate"></link><updated>2015-03-13T23:34:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-03-13:more-than-programe-languages.html</id><summary type="html">&lt;p&gt;最近在讨论 2015 年的团队培训计划问题，Quora 上的&lt;a href="https://www.quora.com/What-are-the-things-that-a-programmer-must-know-obviously-besides-programming-languages"&gt;一篇文章&lt;/a&gt;给了我不少启发。排行第一的回答中有几个很有意思的见解。&lt;/p&gt;
&lt;h3 id="_1"&gt;抽像思维能力&lt;/h3&gt;
&lt;p&gt;作者认为这是程序员最重要的能力。我们在编程时，用到的都是一些抽像的概念。作者认为应该把培养抽像思维能力作为平时练习最重要的事情长期做下去。&lt;/p&gt;
&lt;h3 id="_2"&gt;问题分解能力&lt;/h3&gt;
&lt;p&gt;现实编程时，我们要解决的问题往往都比较大，比较复杂。怎么样把复杂的大问题分解成一个个小问题，再逐个去解决这些小问题。这个就是问题分解能力。缺少问题分解能力的人，拿到问题时总会没有思路，因为他们不懂地把问题分解成一个个简单地可解决的问题。&lt;/p&gt;
&lt;h3 id="_3"&gt;模式识别&lt;/h3&gt;
&lt;p&gt;作者举了个笑话：在一个程序员的面试过程中，面试官问被试者，微波炉着火了怎么办？被试者说把微波炉扔到窗外。面试官继续问如果咖啡机着火了怎么办？被试者说把咖啡机装在微波炉里，然后扔到窗外。&lt;/p&gt;
&lt;p&gt;这里作者想提的其实是一种问题转换的思路。把遇到的一个问题分解后，把子问题使用已经有成熟解决方案的方法来解决。其实模式识别就是抽像思维的一种。我在教女儿算数时，就用了这个方法，我先问她你有三个苹果，妈妈吃掉一个还剩下几个。等她理解后，再问她你有三个桃子，妈妈吃掉一个还剩下几个。所以，实际上我是在教我女儿抽像思维的能力，问题的重点不是苹果或桃子，而是三和一。&lt;/p&gt;
&lt;h3 id="_4"&gt;判断代码质量的能力&lt;/h3&gt;
&lt;p&gt;这里作者讲的是不要过早，过度去优化代码，不要片面去追求完美解决方案。代码的性能和质量要和问题的复杂度相当。&lt;/p&gt;
&lt;p&gt;怎么样去判断代码的质量和效率刚刚好呢？作者没有提，我觉得这个需要有一些 benchmark 工具来测量以及实际使用来衡量。在这一点上，其实我比较少看到程序员犯这方面的毛病，看到更多的是完全没有优化或没去思考性能问题的低级错误。&lt;/p&gt;
&lt;h3 id="_5"&gt;练习&lt;/h3&gt;
&lt;p&gt;练习，练习，练习。没有捷径。10000 小时理论在编程这件事情上一定是真理。可能有天才，但只要你不是特别笨，在一个细分领域持续练习，投入时间，一定会成为专家。当然，这里有些人是工作一年，学了三年的经验，有些人是工作了五年，只学了一年的经验。&lt;/p&gt;
&lt;h3 id="_6"&gt;基本原理&lt;/h3&gt;
&lt;p&gt;这条是我加的。当学会用 Java 读写文件后, 不管是 Swift 还是 Python ，他们的读写文件的方法都类似。当熟练使用 Java 的多线程编程，并且理解线程的运作方式之后，要用其他语言实现多线程编程，只需要查看 API DOC 很快就可以写出多线程代码。通过学习 Flask，理解 template, orm, auth, memcached, migration, forms 等 web 开发模型的概念和原理之后，再学习 Django 框架，你会觉得所有的东西都这么熟悉并且相似。类似的概念还有网络编程，内存管理，进程间通信，设计模式等等。新技术层出不穷，但基本原理却发展异常缓慢，而且基本保持不变。&lt;/p&gt;
&lt;h3 id="_7"&gt;今日推荐&lt;/h3&gt;
&lt;p&gt;那么问题来了，怎么样提高这些能力呢？作者没有给出答案。&lt;a href="https://www.hackerrank.com"&gt;hackerrank&lt;/a&gt; 是个不错的选择，长期练习一些有趣的算法题是对这些能力的培养很有帮助。&lt;/p&gt;</summary><category term="thought"></category></entry><entry><title>知易行难</title><link href="http://blog.kamidox.com/easy-to-understand-while-hard-to-apply.html" rel="alternate"></link><updated>2015-01-08T23:24:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-02-26:easy-to-understand-while-hard-to-apply.html</id><summary type="html">&lt;p&gt;网上流传一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;懂得很多道理，却依然过不好这一生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;讲的就是知易行难。《闻香识女人》里也有一句经典的台词：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我知道哪条路是正确的，不要问我为什么知道，我就是知道。但我就是不想走，因为太他妈的难了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们生活中也经常有这样的体验。我们明知道要做好一个产品，必须深挖用户体验和产品细节，但实际工作中，却经常做一些非理性妥协。我们明知道要维护好一个博客，必须长期坚持写有价值的文章，但实际上能坚持思考，坚持写作的人少之又少。我们明知道要提高技术能力，必须多看多练，经过时间的积累逐步提高，但往往在现实生活中，我们总是希望找到快速提高技术能力的捷径，恨不得一天吃成胖子。我们明知道情绪控制的方法是，遇到情绪时用觉察去代替抵抗，但往往情绪一上来，就本色表演，根本谈不上控制和思考。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;感性大脑和理性大脑&lt;/strong&gt;&lt;br /&gt;
刘未鹏在《暗时间》里有一篇文章《遇见20万年前的自己》系统地谈了这个问题。感性大脑在人类进化的早期阶段形成的，主要控制情绪，并根据情绪去指导人类的行为，比如遇见狮子，会害怕，进行产生规避这种危险的逃跑行为。而理性大脑是新近进化出来的大脑皮层。主要负责逻辑思维和理性分析。我们可以把感性大脑和理性大脑理解成大脑中的两个有独立人格的自己。他们经常意见不一致，当意见不一致时，你会觉得痛苦，最终要么感性大脑说服理性大脑，要么理性大脑说服感性大脑，让他们的认识统一，才能避免痛苦。现实生活中，有冲突时，感性大脑往往会战胜理性大脑。比如我们知道保持规律地运动对身体健康很有好处，但如果你的感性大脑没有体验到运动带来的成就感和快乐，那么即使你的理性大脑强迫你去跑步，也难以长期坚持下去。&lt;/p&gt;
&lt;p&gt;另外，由于感性大脑是人类进化早期形成的，经过长时间的使用，其神经通路比较宽，信号传递比较快，可以理解成其 CPU 频率比较高。而理性大脑是人类进化过程中新近形成的，其神经通路比较窄。往往一个事情，感性大脑会先反映过来，然后马上去指导行动，接着理性大脑才慢吞吞地把他的计算结果反馈上来。古语有云：三思而后行，其实就是告诫大家给你的理性大脑留点时间思考。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;训练&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;知&lt;/strong&gt;表示理解和认同，要从&lt;strong&gt;知&lt;/strong&gt;到&lt;strong&gt;行&lt;/strong&gt;，中间还有很长的路要走。学过数学的人都知道，看到一个定理的证明过程时，觉得证明得好巧妙，你已经完全理解了他的来龙去脉。过一小段时间，让你来重新证明一遍，你很有可能证明不出来。另外一个例子是学编程语言，看教科书或视频教程时，觉得全部都理解了，关闭教科书或视频后，让你重新把里面的例子程序写出来，大部分人是写不出来的。所以某件事情你达到了&lt;strong&gt;知&lt;/strong&gt;的程度，其实这些知识还只是表层，还是别人的，不是你自己的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;知&lt;/strong&gt;怎么转化为&lt;strong&gt;行&lt;/strong&gt;呢？答案是训练，通过训练让这些知识变成你自己的。还是编程的例子，如果你看视频学编程，边看边记，关闭视频后，通过回忆关键知识点把视频里的例子程序自己输入进去。如果忘记，重新打开视频查看。输入一遍后运行成功后。再自己创造一个类似的问题，不借助视频解决它。下次在实际产品开发的过程中，你很容易就能想起视频教程里针对某个总是的解决方案，进而运用这个解决方案来解决问题。&lt;/p&gt;
&lt;p&gt;上面的视频编程的例子里，不单单是记忆问题。他的模式是&lt;strong&gt;知&lt;/strong&gt;后，强迫自己通过&lt;strong&gt;行&lt;/strong&gt;来强化&lt;strong&gt;知&lt;/strong&gt;。进而转化为自己的知识。哈佛公开课《幸福课》里有个形象的比喻，人的思维模式就像河流，当河流里流过的水越多，时间越长，河道就越宽，下次发洪水时，都会优先从比较宽的河道里流过。这里的关键点是&lt;strong&gt;多&lt;/strong&gt;和&lt;strong&gt;长&lt;/strong&gt;，通过有意识地长期训练，我们可以把某个我们认知的道理固化到大脑里，升级成自己的认知模式。下次遇到问题时，就会优先运用这个认知模式来解决问题。这也解释了为什么我们的感性大脑往往比理性大脑反映更快。感性大脑在人类进化过程中最先出现，经过长时间的强化，这个“河道”很宽，“洪水”发生时，就会最先就从这个“河道”里流过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冥想&lt;/strong&gt;&lt;br /&gt;
改变是困难的。假设那个宽的河道是你原来的思维模式，而窄的河道是你的理性大脑认可的思维模式。想像一下，洪水发生时，有两个河道，一个宽，一个窄，你要控制让水多往窄的河道流是，这是一件很困难的事情。是一定需要外力干涉的。&lt;/p&gt;
&lt;p&gt;改变是可能的。假设我们能控制我们的思维，那么通过有意识地让洪水多流一点到窄的河道上，长期坚持下去，窄的河道的变宽速度就会比宽的河道快，久而久之，窄的河道就会变得比宽的河道宽，从而你的理性大脑战胜了你的感性大脑。干涉的途径就是控制你自己的思想，有意识地让洪水多流向窄的那个河道。通过冥想，我们可以训练控制自己思维的能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;br /&gt;
知易行难其实是我们的天性决定的。把知转化为行是可能的，但需要付出很多的努力。我见过一些很聪明的人，他们思维转得特别快，一个事情一下子就看到本质，出的招也是招招打到蛇的七寸。他们可以很理性地控制住自己的感性大脑，或许他们代表的就是我们人类的进化方向吧，他们进化地比较快罢了。我们也可以通过训练来加快我们的进化速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;br /&gt;
今天推荐一个国内的 Android 开发者都会喜欢的网站&lt;a href="http://www.androiddevtools.cn"&gt;androiddevtools.cn&lt;/a&gt;。不管你是用 Windows/Linux/Mac 都可以在这上面下载全套的 Android 开发工具，而且速度非常快。而且网站上还有很多优秀的设计资源和开发资料。&lt;/p&gt;</summary><category term="thought"></category></entry><entry><title>从导游身上学管理</title><link href="http://blog.kamidox.com/learn-from-tour-guide.html" rel="alternate"></link><updated>2015-02-25T23:26:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-02-25:learn-from-tour-guide.html</id><summary type="html">&lt;p&gt;春节期间和老婆跟团走了一趟云南，认真观察了一下导游，发现可以从他们身上学到很多管理技能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义规则&lt;/strong&gt;&lt;br /&gt;
一上车，就和大家套近乎，拉家常，活跃氛围。这些外围工作做完，就开始定义规则，小到车厢卫生，大到一些安全注意事项等。全部说明一遍，并且每个规则都举一个某次带团的的例子作为案例来加深印象。比如，某游客把榴莲带到车上吃，导致全车几天都有一股臭味，再比如某游客一上车就把鞋子脱了，再如某游客旅游到酒吧喝酒和当地人冲突等等，不一而足。&lt;/p&gt;
&lt;p&gt;只有把规则定义清楚了，所有的成员才知道什么是团队鼓励的，什么是团队不允许。这对团队价值导向，以及奖赏打下了基础。管理一个公司或团队不也是这个道理么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;树立权威&lt;/strong&gt;&lt;br /&gt;
利用介绍自己以及自己所在的旅游公司的机会，给自己树立了很好地权威。一上来就介绍旅游局的一些法律法规，投诉电话。其中介绍到班车的车牌号时印象特别深刻：“大家知道我们的车牌号是云ALXXXX，L是旅游专用车，外面一个牌照50W+。如果大家随便在小店报个很便宜的团，肯定不是用旅游专用车，那么你的所有权益是得不到保障的”。“大家出来玩，我是来工作的。我希望大家配合我的工作，我说句不客气的话，大家这几天玩得开不开心，完全掌握在我手中，我做得好一点事情，你们可以少踩很多坑，少吃很多亏，毕竟我是当地人，对这里的情况非常熟悉 balabala &amp;hellip;”。&lt;/p&gt;
&lt;p&gt;这些树立威信地做法，很好地把游客可能存在的一些不合理的想法甚至是合理的想法全部扼杀在摇篮里。带团队不就是这样的吗？有了规则后，还要让大家知道，这些规则我是有能力保障它得到贯彻执行的！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小题大作&lt;/strong&gt;&lt;br /&gt;
第一天早上集合，有个家庭迟到了5分钟。导游板着脸点名批评。“大家想想看，如果你迟到5分钟，全车人都在等你，几十个人加起来是多长时间？下次如果有人迟到超过10分钟，你自己想办法坐车到我们下个地点和大家汇合！”&lt;/p&gt;
&lt;p&gt;这种利用第一次的小错误来杀鸡儆狗，确实有效。后面整个团队时间观念都很强。从小事着手，从小事树立规则的权威性。这对团队建设非常重要。不单如此，有时候和供应商沟通也需要会小题大作。比如遇到一个问题，需要协调供应商解决，如果你把问题的严重程度和紧迫感放大十倍，然后想办法把放大了之后的严重性和紧迫感传达给供应商，基本上能收到事半功倍的支持效果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;收买人心&lt;/strong&gt;&lt;br /&gt;
在大家坐车的无聊时光里，导游确实还是讲述了不少当地的一些习俗以及一些陷阱，特别是那些陷阱，听起来帮助确实是很大。比如在丽江，街上有人找你绑彩辫，不要去绑，因为其实那是纳西族的“寡妇头”。再比如，打车的时候，黄金周大部分的士是不打表的，价格是平常的两倍，但正常在30元以内，超过30块一定要讲价。诸如此类的 TIP 很多，大家都感觉这个导游很值得依赖。&lt;/p&gt;
&lt;p&gt;管理团队也是类似的道理，需要从细节，从团队成员的切身利益出发，做出切切实实对团队成员有利的事，最大化公司和个人的共同利益，争取信任感。团队成员之间只有相互信任，才能走得更远，走得更长久。如果只有大棒，没有胡萝卜，一定是没法带好团队的。&lt;/p&gt;
&lt;p&gt;总结的这些虽然有点厚黑学的味道，但其实从人性的角度还是很容易解释得通的。另外一个收获是成功说服老婆，以后旅游绝不报团了。老婆是路痴，对自由行非常没安全感。通过这次不断地演绎导游的话中话，包括一些推销的伎俩，结合路途中跟团的种种不便，成功说服老婆以后绝不报团。我总结起来，报团除了行程上不自由，还有一点我无法忍受，就是在整个过程中，有时&lt;strong&gt;明明知道导游把大家当猴耍，但你还要配合着他当猴让他来耍&lt;/strong&gt;。除非你真去投诉或闹得不愉快。而且这样的较真也确实没必要，很多事情是潜规则，是导游们吃饭的技能，赤祼祼地揭穿他显得很不人道，不揭穿他又觉得自己是傻子。&lt;/p&gt;
&lt;p&gt;惹不起咱就躲呗！下次一定自由行。&lt;/p&gt;</summary><category term="thought"></category></entry><entry><title>Macbook Pro 初体验</title><link href="http://blog.kamidox.com/macbookpro.html" rel="alternate"></link><updated>2015-01-22T00:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-01-22:macbookpro.html</id><summary type="html">&lt;p&gt;长这么大，终于奢侈了一把，入手了 Macbook Pro。虽然我远不是果粉，对 IPhone 和 IPad 也不感冒，但还是被 Macbook Pro 震撼到了。是的，我确认用&lt;strong&gt;震撼&lt;/strong&gt;这个词&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;做工太精细了&lt;br /&gt;
   老婆买过 IPhone 和 IPad，但没有打动我。而 Macbook Pro 的外观和质感确实非常赞。&lt;/li&gt;
&lt;li&gt;屏幕显示效果&lt;br /&gt;
   简单地说，看完 Macbook Pro 的显示效果后，再看别的电脑简直不忍直视。&lt;/li&gt;
&lt;li&gt;超级便捷的触摸板&lt;br /&gt;
   简单学习触摸板的一些操作后，就很容易爱上它。甚至觉得鼠标都是多余的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Windows 自不必说，玩过比较久的 Ubuntu ，刚一进入 OS X 操作系统还是要习惯一下，不过还好，基本花两小时就可以习惯这些操作了。总结起来无非就是下面一些内容。&lt;/p&gt;
&lt;p&gt;Windows/Ubuntu 上的一些系统设施 Macbook Pro 上没有，但有一些简单的替代：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;鼠标右键：双指点击触控面板即可。不过这项需要进 System Preference 设置一下。&lt;/li&gt;
&lt;li&gt;Home 键：Command + Left&lt;/li&gt;
&lt;li&gt;End 键：Command + Right&lt;/li&gt;
&lt;li&gt;Page Up 键：Command + Up&lt;/li&gt;
&lt;li&gt;Page Down 键：Command + Down&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;输入法，我用搜狗五笔，感觉还不错，比系统内置的好用。&lt;/p&gt;
&lt;p&gt;之前没有用过 OS X 系统，只是在网上找了一些文章大概看了一下，学习怎么安装软件之类的。试用了几个小时还是感受到了乔帮主的无穷魅力：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;快速搜索&lt;br /&gt;
   Control + Space 可以快速唤出 Sportlight Search，可以快速查找文档或打开应用程序&lt;/li&gt;
&lt;li&gt;自动关闭屏幕&lt;br /&gt;
   进入 System Preference -&amp;gt; Mission Control -&amp;gt; Hot Corners &amp;hellip; ，选一个屏幕角落设置为 &lt;code&gt;Put Display to Sleep&lt;/code&gt; ，这样如果想省电，要关闭屏幕显示时，直接把鼠标移到屏幕的那个角落屏幕就自动关闭了。&lt;/li&gt;
&lt;li&gt;打开 Launchpad&lt;br /&gt;
   用大拇指和其他三个手指在触控屏上从外往内一收，就可以唤出 Launchpad。&lt;/li&gt;
&lt;li&gt;Safari 的一些快捷操作&lt;br /&gt;
   双指在触控板上上下滑动，可以上下滚动网页，类似鼠标的滑动轮。双指向右滑动，可以后退。大拇指加两个手指向内收，可以快速看到打开的所有 Tab 页，并在网页之间切换。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实际上，几个小时的使用，感受远不止这些。慢慢发现吧，我给自己定的规矩是，认真使用，探索 OS X 与众不同的东西。OS X 里能替代之前在 Windows/Ubuntu 里的软件都探索一遍，去发现 Apple 的设计哲学。在网上看到很多人买了 Macbook 后安装 Windows 7 使用，这得多装逼才能干出这种事啊。&lt;/p&gt;
&lt;p&gt;几个 TIPS ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;购买 Macbook Pro 时，可以上苹果官网直接购买，选择教育类优惠。大概可以便宜 700 大洋。而且还支持信用卡分期付款。&lt;/li&gt;
&lt;li&gt;打开 System Preference 看一遍所有的设置项，可以发现很多惊喜。之前用过 Ubuntu 的 Unity 桌面，所以过渡到 OS X 还是很自然的，基本上看着都明白。为了提高逼格，我还特地把系统语言改成英文。&lt;/li&gt;
&lt;li&gt;如果是在官网购买的，首次开机时要求输入 Apple ID 时，请一定输入购买时的 Apple ID ，因为 Pages, iMove 等软件是要单独购买的，你在官网购买 Macbook Pro 时，这些软件是记在你购买时的 Apple ID 名下。如果首次开机时输入了不一样的 Apple ID 后面升级很麻烦。因为这个问题我折腾了好久，升级老出错，到现在还没搞定。&lt;/li&gt;
&lt;li&gt;如果你象我一样是码农，成天和电脑打交道。不仿偿试一下 Macbook Pro ，对设计得这么好的东西，我都有点后悔没有及早用上。&lt;/li&gt;
&lt;/ol&gt;</summary><category term="thought"></category></entry><entry><title>学习开源代码的三个层次</title><link href="http://blog.kamidox.com/three-levels-of-learning-code.html" rel="alternate"></link><updated>2015-01-16T23:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2015-01-16:three-levels-of-learning-code.html</id><summary type="html">&lt;p&gt;网络上有很多优秀的开源代码，学习这些代码是提高自己编程水平的最佳途径。我们在实际项目开发的过程中也会使用很多优秀的开源代码来加快开发速度，避免重复造轮子。优秀开源代码至少可以给我们提供三个层次的学习资料。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一层次：使用开源代码&lt;/strong&gt;&lt;br /&gt;
这一步相对简单，也是大部分人在项目开发过程中最常用的方式。优秀的开源代码一般文档齐全，示例代码丰富。通过简单地学习这些资料，可以较容易地掌握开源代码的用法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二层次：阅读开源代码，理解其实现原理&lt;/strong&gt;&lt;br /&gt;
做到这一步的人就比较少了。这一步需要花很多时间，而且还需要一些必要的基础知识储备。但如果能达到这个层次，能掌握的技能也会比较多，不单单是开源代码本身的核心逻辑及其架构设计，还能掌握软件开发过程中的一些最佳实践法则。比如单元测试，利用&lt;a href="https://travis-ci.org"&gt;travis&lt;/a&gt;进行自动编译测试等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三个层次：吸收并应用开源代码的设计理念到自己的软件开发过程中去&lt;/strong&gt;&lt;br /&gt;
看得懂和懂得灵活应用是两个层次的东西。从看得懂到会灵活应用中间还需要大量的时间去思考，去实践。面试过不少人，讲起来头头是道，真要让他写出来时，却卡壳了。要么类名方法名忘记了（IDE惹的祸），要么写出来的完全变味。要真正掌握一个技能，除了多看，还要多写，更要多总结，多思考。大道至简，总结多了，无非都是那些模式。面向测试的编程，面向对象编程，设计模式，函数式编程，宏等等这些抽象的概念，通过一些优秀的开源代码去总结思考，才能真正地理解这些抽象概念，最终把这些设计理念应用到自己的代码中去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今天推荐一个Android开源库&lt;a href="https://github.com/greenrobot/EventBus"&gt;EventBus&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EventBus is publish/subscribe event bus optimized for Android.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;它和Android的广播通信方式有什么区别？&lt;/li&gt;
&lt;li&gt;它和另外一个开源库&lt;a href="https://github.com/square/otto"&gt;Otto&lt;/a&gt;有什么区别？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;答案都在其官方文档里。关于这个库，还有两个很好的学习资源：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/android-cn/android-open-project-demo/tree/master/event-bus-demo"&gt;event-bus-demo&lt;/a&gt;&lt;br /&gt;
   这是一个DEMO程序。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/android-cn/android-open-project-analysis/tree/master/event-bus"&gt;EventBus 源码解析&lt;/a&gt;&lt;br /&gt;
   这个分析了其原理和实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;网络上的那些XXX源码解析，XXX源码情景分析之类的文章质量还是比较高的，但这些文档不能代替对源码的阅读。这些文档的作用是帮助初学者更好的理解源码，降低学习成本。需要深刻理解设计精髓，还是需要通过阅读源码去深刻领会。阅读一些设计优秀的源码和青春期时阅读汪国真的蒙珑诗一样美。与其走马观花，不如花一些时间深入去学习几个开源代码，自己偿试通过阅读代码总结出其架构和设计的精髓。通过这样的训练，几个月后就会发现编程水平会有长足的进步。&lt;/p&gt;</summary><category term="thought"></category></entry><entry><title>FlaskBB阅读笔记（四）</title><link href="http://blog.kamidox.com/flaskbb-notes-4.html" rel="alternate"></link><updated>2014-12-21T23:00:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-12-21:flaskbb-notes-4.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;开篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flaskbb"&gt;FlaskBB的测试代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pytest"&gt;通过实例来看pytest的运行机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixtures"&gt;什么是fixtures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pytest_1"&gt;pytest标准的测试例收集流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conftestpy"&gt;conftest.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pytestini"&gt;pytest.ini&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;结束语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;开篇&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pytest.org/latest/contents.html#toc"&gt;FlaskBB&lt;/a&gt;是用Flask框架实现的一个轻量级的论坛社区软件，代码托管在GitHub上。本系列文章通过阅读FlaskBB的源代码来深入学习Flask框架，以及在一个产品级的Flask应用里的一些最佳实践规则。&lt;/p&gt;
&lt;p&gt;本文是本系列文章的第四篇，通过分析FlaskBB的自动测试代码，进而介绍Python下的自动化测试工具pytest。自动化测试在开发和重构过程中有着非常重要的地位。甚至还流行一种测试优先的编程方法，即针对一个功能模块，先写测试例，再去实现功能模块。&lt;/p&gt;
&lt;h2 id="flaskbb"&gt;FlaskBB的测试代码&lt;/h2&gt;
&lt;p&gt;FlaskBB的测试代码在tests目录下：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;tests/
├── conftest.py
├── fixtures
│   ├── app.py
│   ├── forum.py
│   ├── __init__.py
│   └── user.py
├── __init__.py
└── unit
    ├── __init__.py
    ├── __pycache__
    ├── test_forum_models.py
    └── utils
        ├── __init__.py
        ├── __pycache__
        ├── test_helpers.py
        ├── test_permissions.py
        ├── test_populate.py
        └── test_widgets.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在FlaskBB项目目录下执行&lt;code&gt;py.test tests&lt;/code&gt;输出以下测试结果：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;.venv&lt;span style="color: #666666"&gt;)&lt;/span&gt;kamidox@kamidox-laptop:~/code/flaskbb&lt;span style="color: #B8860B"&gt;$ &lt;/span&gt;py.test &lt;span style="color: #B8860B"&gt;tests&lt;/span&gt;
&lt;span style="color: #666666"&gt;=============================&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;test &lt;/span&gt;session &lt;span style="color: #B8860B"&gt;starts&lt;/span&gt; &lt;span style="color: #666666"&gt;==============================&lt;/span&gt;
platform linux2 -- Python 2.7.6 -- py-1.4.25 -- pytest-2.6.3 -- /home/kamidox/co
de/flaskbb/.venv/bin/python
Tests are shuffled using seed number 362536085265.
plugins: cov, random
collecting ... collected &lt;span style="color: #666666"&gt;42&lt;/span&gt; items

tests/unit/test_forum_models.py::test_topic_save PASSED
tests/unit/test_forum_models.py::test_topic_move PASSED
tests/unit/utils/test_permissions.py::test_super_moderator_permissions PASSED
tests/unit/test_forum_models.py::test_topic_url PASSED
tests/unit/utils/test_permissions.py::test_can_moderate_without_permission PASSED
tests/unit/test_forum_models.py::test_topic_merge PASSED
tests/unit/test_forum_models.py::test_forum_update_read PASSED
tests/unit/test_forum_models.py::test_forum_url PASSED
tests/unit/utils/test_helpers.py::test_slugify PASSED
tests/unit/test_forum_models.py::test_forum_save PASSED
tests/unit/test_forum_models.py::test_forum_get_topics PASSED
tests/unit/test_forum_models.py::test_forum_slugify PASSED
tests/unit/test_forum_models.py::test_forum_delete PASSED
tests/unit/utils/test_helpers.py::test_forum_is_unread PASSED
tests/unit/utils/test_permissions.py::test_moderator_permissions_without_forum PASSED
tests/unit/test_forum_models.py::test_category_delete_with_forum PASSED
tests/unit/test_forum_models.py::test_topic_merge_other_forum PASSED
tests/unit/test_forum_models.py::test_category_get_forums PASSED
tests/unit/test_forum_models.py::test_topic_slug PASSED
tests/unit/utils/test_permissions.py::test_normal_permissions PASSED
tests/unit/utils/test_widgets.py::test_select_date_widget PASSED
tests/unit/test_forum_models.py::test_forumsread PASSED
tests/unit/test_forum_models.py::test_topic_tracker_needs_update_cleared PASSED
tests/unit/test_forum_models.py::test_category_save PASSED
tests/unit/test_forum_models.py::test_category_get_all PASSED
tests/unit/utils/test_permissions.py::test_moderator_permissions_in_forum PASSED
tests/unit/test_forum_models.py::test_forum_update_read_two_topics PASSED
tests/unit/test_forum_models.py::test_category_delete PASSED
tests/unit/utils/test_permissions.py::test_admin_permissions PASSED
tests/unit/test_forum_models.py::test_topicsread PASSED
tests/unit/test_forum_models.py::test_forum_delete_with_user_and_topic PASSED
tests/unit/test_forum_models.py::test_post_save PASSED
tests/unit/test_forum_models.py::test_category_delete_with_user PASSED
tests/unit/test_forum_models.py::test_topic_delete PASSED
tests/unit/test_forum_models.py::test_post_delete PASSED
tests/unit/test_forum_models.py::test_topic_update_read PASSED
tests/unit/test_forum_models.py::test_topic_move_same_forum PASSED
tests/unit/utils/test_populate.py::test_create_default_groups PASSED
tests/unit/test_forum_models.py::test_forum_get_forum PASSED
tests/unit/test_forum_models.py::test_topic_tracker_needs_update PASSED
tests/unit/test_forum_models.py::test_report PASSED
tests/unit/test_forum_models.py::test_forum_update_last_post &lt;span style="color: #B8860B"&gt;PASSED&lt;/span&gt;

&lt;span style="color: #666666"&gt;==========================&lt;/span&gt; &lt;span style="color: #666666"&gt;42&lt;/span&gt; passed in 20.21 &lt;span style="color: #B8860B"&gt;seconds&lt;/span&gt; &lt;span style="color: #666666"&gt;==========================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以看到总共有42个测试例，全部测试通过了。&lt;/p&gt;
&lt;h2 id="pytest"&gt;通过实例来看pytest的运行机制&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tests/unit/test_forum_modules.py&lt;/code&gt;里有个删除讨论区版块的单元测试函数：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;test_forum_delete&lt;/span&gt;(forum):
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Test the delete forum method.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    forum&lt;span style="color: #666666"&gt;.&lt;/span&gt;delete()

    forum &lt;span style="color: #666666"&gt;=&lt;/span&gt; Forum&lt;span style="color: #666666"&gt;.&lt;/span&gt;query&lt;span style="color: #666666"&gt;.&lt;/span&gt;filter_by(&lt;span style="color: #AA22FF"&gt;id&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;forum&lt;span style="color: #666666"&gt;.&lt;/span&gt;id)&lt;span style="color: #666666"&gt;.&lt;/span&gt;first()

    &lt;span style="color: #AA22FF; font-weight: bold"&gt;assert&lt;/span&gt; forum &lt;span style="color: #AA22FF; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;代码很简单，先调用&lt;code&gt;forum.delete()&lt;/code&gt;来删除一个讨论区版块，接着从&lt;code&gt;Forum&lt;/code&gt;里查询这个讨论区版块，应该是查询不到的，因为这个版块已经被删除了。&lt;/p&gt;
&lt;p&gt;问题来了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单元测试函数&lt;code&gt;test_forum_delete(forum)&lt;/code&gt;运行时的上下文环境是什么？&lt;/li&gt;
&lt;li&gt;单元测试函数的参数&lt;code&gt;forum&lt;/code&gt;是哪里来的？&lt;/li&gt;
&lt;li&gt;pytest怎么发现&lt;code&gt;test_forum_delete(forum)&lt;/code&gt;单元测试函数并执行它的？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要回答这些问题，必须介绍pytest的fixtures的概念。&lt;/p&gt;
&lt;h2 id="fixtures"&gt;什么是fixtures&lt;/h2&gt;
&lt;p&gt;fixtures是指测试的上下文，单元测试函数在运行之前，必须为其创建有效的运行时上下文信息。在xUnit测试框架里，每个测试例运行时都有setup/teardown方法与之匹配，pytest不但支持经典的setup/teardown方法，借助python强大的自省功能，它支持通过测试函数的参数为单元测试函数创建运行时的上下文信息。在上例中，函数参数&lt;code&gt;forum&lt;/code&gt;就是一个fixtures，它定义在&lt;code&gt;tests/fixtures/forum.py&lt;/code&gt;里：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;@pytest.fixture&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;forum&lt;/span&gt;(category, default_settings):
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;A single forum in a category.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    forum &lt;span style="color: #666666"&gt;=&lt;/span&gt; Forum(title&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;Test Forum&amp;quot;&lt;/span&gt;, category_id&lt;span style="color: #666666"&gt;=&lt;/span&gt;category&lt;span style="color: #666666"&gt;.&lt;/span&gt;id)
    forum&lt;span style="color: #666666"&gt;.&lt;/span&gt;save()
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; forum
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;@pytest.fixture&lt;/code&gt;装饰器告诉pytest，这是一个fixture。函数体很简单，就是创建一个forum，并保存在数据库里，最后返回这个forum实例。我们可以简单地理解成，在执行&lt;code&gt;test_forum_delete(forum)&lt;/code&gt;之前，单元测试例的函数参数&lt;code&gt;forum&lt;/code&gt;就是通过调用定义在&lt;code&gt;tests/fixtures/forum.py&lt;/code&gt;里的fixture函数&lt;code&gt;forum()&lt;/code&gt;创建出来并返回的。而作为fixture函数的&lt;code&gt;forum()&lt;/code&gt;本身也引用了名字叫&lt;code&gt;category&lt;/code&gt;和&lt;code&gt;default_settings&lt;/code&gt;的fixtures。&lt;/p&gt;
&lt;p&gt;到此我们可以总结一下fixtures的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fixtures有明确的名字，并且通过在单元测试函数，测试类等的声明来调用。&lt;/li&gt;
&lt;li&gt;fixtures使用模块化来实现，一个fixture函数可以引用别的fixture。&lt;/li&gt;
&lt;li&gt;fixtures可以支持简单的单元测试以及复杂的功能测试，还可以配置在不同的测试例之间共用fixture。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;FlaskBB的自动测试程序里，其所有的fixtures都定义在&lt;code&gt;tests/fixtures&lt;/code&gt;目录下的三个文件里&lt;code&gt;app.py&lt;/code&gt;，&lt;code&gt;forum.py&lt;/code&gt;和&lt;code&gt;user.py&lt;/code&gt;，其他的fixture都很好理解，定义在&lt;code&gt;app.py&lt;/code&gt;里的&lt;code&gt;application&lt;/code&gt;代码有点特殊：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;@pytest.yield_fixture&lt;/span&gt;(autouse&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;)
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;application&lt;/span&gt;():
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;application with context.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    app &lt;span style="color: #666666"&gt;=&lt;/span&gt; create_app(Config)

    ctx &lt;span style="color: #666666"&gt;=&lt;/span&gt; app&lt;span style="color: #666666"&gt;.&lt;/span&gt;app_context()
    ctx&lt;span style="color: #666666"&gt;.&lt;/span&gt;push()

    &lt;span style="color: #AA22FF; font-weight: bold"&gt;yield&lt;/span&gt; app

    ctx&lt;span style="color: #666666"&gt;.&lt;/span&gt;pop()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这里使用&lt;code&gt;@pytest.yield_fixture&lt;/code&gt;来定义一个生成器fixture。其次注意到使用了&lt;code&gt;autouse=True&lt;/code&gt;的参数，这个参数表示这个fixture在运行任何一个单元测试函数之前都必须先调用。即所有的单元测试函数都信赖这个fixture。从函数内容来看，它创建一个Flask APP的实例，以这个实例作为单元测试的上下文。&lt;/p&gt;
&lt;h2 id="pytest_1"&gt;pytest标准的测试例收集流程&lt;/h2&gt;
&lt;p&gt;pytest在运行测试例前，必须通过一套规则来收集所有的测试例。默认情况下，pytest的测试例收集流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在运行&lt;code&gt;py.test&lt;/code&gt;命令的当前目录或其后第一个参数（可以上目录，或模块名）所指定的位置开始收集测试例&lt;/li&gt;
&lt;li&gt;从起始目录递归查找所有的文件及子文件夹（包含在&lt;code&gt;norecursedirs&lt;/code&gt;配置参数里的文件夹不会被搜索）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test_*.py&lt;/code&gt;或&lt;code&gt;*_test.py&lt;/code&gt;将会按照python包结构被import进测试的上下文&lt;/li&gt;
&lt;li&gt;以&lt;code&gt;Test&lt;/code&gt;开头的类将作为测试类被收集起来&lt;/li&gt;
&lt;li&gt;以&lt;code&gt;test_&lt;/code&gt;开头的函数将作为单元测试函数被收集起来&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，这个测试例收集规则是可以定制的，具体可参阅pytest的&lt;a href="http://pytest.org/latest/contents.html#toc"&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;FlaskBB的单元测试代码都放在&lt;code&gt;tests/unit&lt;/code&gt;目录下。所有以&lt;code&gt;test_&lt;/code&gt;打头的文件都会被import进测试的上下文。同时所有python文件里以&lt;code&gt;test_&lt;/code&gt;打头的函数都被作为单元测试函数被收集起来测试。这样我们前文提到的&lt;code&gt;test_forum_delete(forum)&lt;/code&gt;函数就被作为一个单元测试函数收集起来了。&lt;/p&gt;
&lt;h2 id="conftestpy"&gt;conftest.py&lt;/h2&gt;
&lt;p&gt;pytest在执行任何一个单元测试的时候，最靠近执行目录下的那个&lt;code&gt;conftest.py&lt;/code&gt;将被自动执行。针对FlaskBB，其内容为：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;tests.fixtures.app&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #666666"&gt;*&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;tests.fixtures.forum&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #666666"&gt;*&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;tests.fixtures.user&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #666666"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;从代码来看，它import了我们定义的所有的fixtures。除了自定义的fixtures之外，系统也有一些内置的fixtures，可以运行&lt;code&gt;py.test --fixtures&lt;/code&gt;来查阅所有的可用fixtures。&lt;/p&gt;
&lt;h2 id="pytestini"&gt;pytest.ini&lt;/h2&gt;
&lt;p&gt;pytest在执行时，会读取命令运行目录下的pytest.ini文件，通过这个文件可以定制py.test命令的一些行为。FlaskBB的里pytest.ini的内容为：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;[pytest]&lt;/span&gt;
&lt;span style="color: #BB4444"&gt;norecursedirs&lt;/span&gt; &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;docs flaskbb logs migrations whoosh_index&lt;/span&gt;
&lt;span style="color: #BB4444"&gt;addopts&lt;/span&gt; &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;--strict --random -vvl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中&lt;code&gt;norecursedirs&lt;/code&gt;表示在递归查找测试例时，忽略docs flaskbb等目录。&lt;code&gt;addopts&lt;/code&gt;为py.test命令添加一些自定义的选项。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;py.test运行方式&lt;/p&gt;
&lt;p&gt;笔者在第一次运行FlaskBB测试程序时，使用&lt;code&gt;py.test&lt;/code&gt;直接运行，结果发现执行花了很长的时间，而且很多失败项。经查，原来在笔者的环境里，通过virtualenv把&lt;code&gt;.venv&lt;/code&gt;目录放在了项目的根目录下，所以默认情况下pytest会从&lt;code&gt;.venv&lt;/code&gt;里收集其他包的测试例来测试。所以，虽然可以定义&lt;code&gt;norecursedirs&lt;/code&gt;目录，但还是推荐使用&lt;code&gt;py.test tests&lt;/code&gt;这种后面直接跟着测试代码目录的方式来运行测试例。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_2"&gt;结束语&lt;/h2&gt;
&lt;p&gt;通过上文的分析，可以轻松理解FlaskBB里的自动测试代码。在Quara上看到过一篇介绍Quara的continuous development的文章，Quara的网站每天会更新上百次，这是怎么做到的呢？如果没有自动化测试和自动化布署的工具，这是不可想象的。如果做黑盒测试，光回归测试就要累死人。有兴趣的同学可以&lt;a href="http://engineering.quora.com/Continuous-Deployment-at-Quora"&gt;点击这里&lt;/a&gt;看一下高大上的互联网公司是怎么做自动化测试和布署的。&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category></entry><entry><title>FlaskBB阅读笔记（三）</title><link href="http://blog.kamidox.com/flaskbb-notes-3.html" rel="alternate"></link><updated>2014-12-07T23:00:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-12-07:flaskbb-notes-3.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;开篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orm"&gt;什么是 ORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;定义表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;定义一对多关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;定义多对多关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;插入及修改记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;删除记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;查询记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mvc"&gt;MVC 代码结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;结束语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;开篇&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.w3school.com.cn/sql/sql_join.asp"&gt;FlaskBB&lt;/a&gt;是用Flask框架实现的一个轻量级的论坛社区软件，代码托管在GitHub上。本系列文章通过阅读FlaskBB的源代码来深入学习Flask框架，以及在一个产品级的Flask应用里的一些最佳实践规则。&lt;/p&gt;
&lt;p&gt;本文是本系列文章的第三篇，将介绍ORM基础知识，分析Flask-SQLAlchemy及sqlalchemy ORM引擎的一些常用方法，进而介绍FlaskBB用户管理模块的数据库设计。&lt;/p&gt;
&lt;h2 id="orm"&gt;什么是 ORM&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;对象关系映射（英语：Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。从效果上说，它其实是创建了一个可在编程语言里使用的“虚拟对象数据库”。-百度百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单地说，使用 ORM 来操作数据库，我们基本上不用跟 SQL 打交道了。直接用程序语言的对象来打交道即可。Flask-SQLAlchemy 是 ORM 引擎 sqlalchemy 针对 Flask 的扩展。&lt;/p&gt;
&lt;h2 id="_2"&gt;定义表&lt;/h2&gt;
&lt;p&gt;定义一个表只需要继承自 &lt;code&gt;db.Model&lt;/code&gt; 即可。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #0000FF"&gt;User&lt;/span&gt;(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Model, UserMixin):
    __tablename__ &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;
    __searchable__ &lt;span style="color: #666666"&gt;=&lt;/span&gt; [&lt;span style="color: #BB4444"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;]

    &lt;span style="color: #AA22FF"&gt;id&lt;/span&gt; &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Integer, primary_key&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;)
    username &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;String(&lt;span style="color: #666666"&gt;200&lt;/span&gt;), unique&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;, nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    email &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;String(&lt;span style="color: #666666"&gt;200&lt;/span&gt;), unique&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;, nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    _password &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(&lt;span style="color: #BB4444"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;, db&lt;span style="color: #666666"&gt;.&lt;/span&gt;String(&lt;span style="color: #666666"&gt;120&lt;/span&gt;), nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这样我们就定义了一个叫 &lt;code&gt;users&lt;/code&gt; 的表格，表格的名称由 &lt;code&gt;__tablename__&lt;/code&gt; 指定。这样任何对表格的操作，都可以转化为对 &lt;code&gt;User&lt;/code&gt; 类的操作。代码里的 &lt;code&gt;db&lt;/code&gt; 对象是什么呢？在 extensions.py 里创建了 db 对象 &lt;code&gt;db = SQLAlchemy()&lt;/code&gt;。然后在 app.py 里初始化这个 db 对象 &lt;code&gt;db.init_app(app)&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="_3"&gt;定义一对多关系&lt;/h2&gt;
&lt;p&gt;一个论坛用户会对应多个论坛主题。论坛主题由类 &lt;code&gt;Topic&lt;/code&gt; 表达。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #0000FF"&gt;Topic&lt;/span&gt;(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Model):
    __tablename__ &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;topics&amp;quot;&lt;/span&gt;
    __searchable__ &lt;span style="color: #666666"&gt;=&lt;/span&gt; [&lt;span style="color: #BB4444"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;]

    &lt;span style="color: #AA22FF"&gt;id&lt;/span&gt; &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Integer, primary_key&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;)
    forum_id &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Integer,
                         db&lt;span style="color: #666666"&gt;.&lt;/span&gt;ForeignKey(&lt;span style="color: #BB4444"&gt;&amp;quot;forums.id&amp;quot;&lt;/span&gt;,
                                       use_alter&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;,
                                       name&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;fk_topic_forum_id&amp;quot;&lt;/span&gt;),
                         nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    title &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;String(&lt;span style="color: #666666"&gt;255&lt;/span&gt;), nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    user_id &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Integer, db&lt;span style="color: #666666"&gt;.&lt;/span&gt;ForeignKey(&lt;span style="color: #BB4444"&gt;&amp;quot;users.id&amp;quot;&lt;/span&gt;))
    username &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;String(&lt;span style="color: #666666"&gt;200&lt;/span&gt;), nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    date_created &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;DateTime, default&lt;span style="color: #666666"&gt;=&lt;/span&gt;datetime&lt;span style="color: #666666"&gt;.&lt;/span&gt;utcnow())
    last_updated &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;DateTime, default&lt;span style="color: #666666"&gt;=&lt;/span&gt;datetime&lt;span style="color: #666666"&gt;.&lt;/span&gt;utcnow())
    locked &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Boolean, default&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    important &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Boolean, default&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    views &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Integer, default&lt;span style="color: #666666"&gt;=0&lt;/span&gt;)
    post_count &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Integer, default&lt;span style="color: #666666"&gt;=0&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;User 类通过 &lt;code&gt;db.relationship&lt;/code&gt; 来定义表 User 和 Topic 的一对多关系。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #0000FF"&gt;User&lt;/span&gt;(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Model, UserMixin):
    __tablename__ &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;
    __searchable__ &lt;span style="color: #666666"&gt;=&lt;/span&gt; [&lt;span style="color: #BB4444"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;]

    &lt;span style="color: #AA22FF"&gt;id&lt;/span&gt; &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Integer, primary_key&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;)
    username &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;String(&lt;span style="color: #666666"&gt;200&lt;/span&gt;), unique&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;, nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    email &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;String(&lt;span style="color: #666666"&gt;200&lt;/span&gt;), unique&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;, nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    _password &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(&lt;span style="color: #BB4444"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;, db&lt;span style="color: #666666"&gt;.&lt;/span&gt;String(&lt;span style="color: #666666"&gt;120&lt;/span&gt;), nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    &lt;span style="color: #666666"&gt;...&lt;/span&gt;
    topics &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;relationship(&lt;span style="color: #BB4444"&gt;&amp;quot;Topic&amp;quot;&lt;/span&gt;, backref&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, lazy&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;dynamic&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;关键代码在 LINE 10 。这一行代码会在 &lt;code&gt;users&lt;/code&gt; 表里创建一个列叫 &lt;code&gt;topics&lt;/code&gt;，这个列就保存了这个用户发起的所有论坛主题。然后在 &lt;code&gt;topics&lt;/code&gt; 表里创建一个列叫 &lt;code&gt;user&lt;/code&gt;，这是通过 &lt;code&gt;backref&lt;/code&gt; 这个参数实现的，所以我们可以通过 &lt;code&gt;Topic.user&lt;/code&gt; 来引用论坛主题的发起用户。最后一个参数 &lt;code&gt;lazy&lt;/code&gt; 可以有四个值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt;&lt;br /&gt;
  这是默认值，表示 SQLAlchemy 会在必要的时候一次性把所有的数据从数据库里通过 SQL SELECT 语句读取出来。当一对多的数据量比较小时可以用这个值，当数据量比较大时，用这个值会降低程序的性能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;joined&lt;/code&gt;&lt;br /&gt;
  告诉 SQLAlchemy 使用 JOIN 子句一次性地把关系数据从数据库里导出来。关于 JOIN 可参阅&lt;a href="http://www.w3school.com.cn/sql/sql_join.asp"&gt;这篇文章&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subquery&lt;/code&gt;&lt;br /&gt;
  类似 &lt;code&gt;joined&lt;/code&gt;，但 SQLAlchemy 会使用子查询来读取数据库。关于子查询可参阅&lt;a href="http://www.360doc.com/content/11/0407/17/5789627_107867377.shtml"&gt;这篇文章&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dynamic&lt;/code&gt;&lt;br /&gt;
  针对一对多关系里，数据量比较大时，这是个特殊且有用的类型。它不会一次性把所有的关系数据都从数据库里读出来，相反它会返回一个查询对象，在需要数据时，从这个查询对象时进行二次查询，才能获得需要的数据。这种类型可以提高程序性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;定义多对多关系&lt;/h2&gt;
&lt;p&gt;一个用户可以属于多个组，而一个组里也会有多个用户。针对这种多对多的关系，我们需要第三个表来保存这种多对多关系。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;groups_users &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Table(
    &lt;span style="color: #BB4444"&gt;&amp;#39;groups_users&amp;#39;&lt;/span&gt;,
    db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(&lt;span style="color: #BB4444"&gt;&amp;#39;user_id&amp;#39;&lt;/span&gt;, db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Integer(), db&lt;span style="color: #666666"&gt;.&lt;/span&gt;ForeignKey(&lt;span style="color: #BB4444"&gt;&amp;#39;users.id&amp;#39;&lt;/span&gt;)),
    db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(&lt;span style="color: #BB4444"&gt;&amp;#39;group_id&amp;#39;&lt;/span&gt;, db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Integer(), db&lt;span style="color: #666666"&gt;.&lt;/span&gt;ForeignKey(&lt;span style="color: #BB4444"&gt;&amp;#39;groups.id&amp;#39;&lt;/span&gt;)))
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;首先直接使用 &lt;code&gt;db.Table&lt;/code&gt; 定义一个多对多的关系表 &lt;code&gt;groups_users&lt;/code&gt;。这里要注意不要使用继承 &lt;code&gt;db.Model&lt;/code&gt; 来定义这个多对多关系表。然后，在 User 类里使用 &lt;code&gt;db.relationship&lt;/code&gt; 来定义多对多关系：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #0000FF"&gt;User&lt;/span&gt;(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Model, UserMixin):
    __tablename__ &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;
    __searchable__ &lt;span style="color: #666666"&gt;=&lt;/span&gt; [&lt;span style="color: #BB4444"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;]

    &lt;span style="color: #AA22FF"&gt;id&lt;/span&gt; &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Integer, primary_key&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;)
    username &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;String(&lt;span style="color: #666666"&gt;200&lt;/span&gt;), unique&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;, nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    email &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(db&lt;span style="color: #666666"&gt;.&lt;/span&gt;String(&lt;span style="color: #666666"&gt;200&lt;/span&gt;), unique&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;, nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    _password &lt;span style="color: #666666"&gt;=&lt;/span&gt; db&lt;span style="color: #666666"&gt;.&lt;/span&gt;Column(&lt;span style="color: #BB4444"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;, db&lt;span style="color: #666666"&gt;.&lt;/span&gt;String(&lt;span style="color: #666666"&gt;120&lt;/span&gt;), nullable&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;)
    &lt;span style="color: #666666"&gt;...&lt;/span&gt;
    secondary_groups &lt;span style="color: #666666"&gt;=&lt;/span&gt; \
        db&lt;span style="color: #666666"&gt;.&lt;/span&gt;relationship(&lt;span style="color: #BB4444"&gt;&amp;#39;Group&amp;#39;&lt;/span&gt;,
                    secondary&lt;span style="color: #666666"&gt;=&lt;/span&gt;groups_users,
                    primaryjoin&lt;span style="color: #666666"&gt;=&lt;/span&gt;(groups_users&lt;span style="color: #666666"&gt;.&lt;/span&gt;c&lt;span style="color: #666666"&gt;.&lt;/span&gt;user_id &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;id&lt;/span&gt;),
                    backref&lt;span style="color: #666666"&gt;=&lt;/span&gt;db&lt;span style="color: #666666"&gt;.&lt;/span&gt;backref(&lt;span style="color: #BB4444"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;, lazy&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;dynamic&amp;#39;&lt;/span&gt;),
                    lazy&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;dynamic&amp;#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;其中 LINE 10 - 15 使用 &lt;code&gt;db.relationship&lt;/code&gt; 来定义多对多关系。第一个参数表示多对多关系的类为 Group，第二个参数 &lt;code&gt;secondary=groups_users&lt;/code&gt; 表示需要从第三个叫 &lt;code&gt;groups_users&lt;/code&gt; 的表里获取多对多关系，第三个参数 &lt;code&gt;primaryjoin=(groups_users.c.user_id == id)&lt;/code&gt; 表示连接查询时的条件。第四个参数 &lt;code&gt;backref=db.backref('users', lazy='dynamic')&lt;/code&gt; 会在 Group 类里创建一个成员叫 users，其中 &lt;code&gt;db.backref&lt;/code&gt; 的 &lt;code&gt;lazy&lt;/code&gt; 参数为 &lt;code&gt;dynamic&lt;/code&gt; 表示 Group.users 为一个查询对象。第五个参数 &lt;code&gt;lazy='dynamic'&lt;/code&gt; 表示 User.secondary_groups 为一个查询对象，其实这里可以不要使用 &lt;code&gt;dynamic&lt;/code&gt;，因为一个用户所属的组是很有限的，不可能很多，可以一次性全部加载进来。&lt;/p&gt;
&lt;h2 id="_5"&gt;插入及修改记录&lt;/h2&gt;
&lt;p&gt;插入记录时，不用再写 SQL 语句了，直接使用类对象来操作即可。用户注册成功后，需要向 users 表插入一条记录。在 &lt;code&gt;flaskbb.auth.RegisterForm.save()&lt;/code&gt; 里实现：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;save&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;):
    user &lt;span style="color: #666666"&gt;=&lt;/span&gt; User(username&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;username&lt;span style="color: #666666"&gt;.&lt;/span&gt;data,
                email&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;email&lt;span style="color: #666666"&gt;.&lt;/span&gt;data,
                password&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;password&lt;span style="color: #666666"&gt;.&lt;/span&gt;data,
                date_joined&lt;span style="color: #666666"&gt;=&lt;/span&gt;datetime&lt;span style="color: #666666"&gt;.&lt;/span&gt;utcnow(),
                primary_group_id&lt;span style="color: #666666"&gt;=4&lt;/span&gt;)
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; user&lt;span style="color: #666666"&gt;.&lt;/span&gt;save()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;创建一个 User 对象，然后调用对象的 &lt;code&gt;save()&lt;/code&gt; 方法：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;save&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, groups&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;):
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Saves a user. If a list with groups is provided, it will add those&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    to the secondary groups from the user.&lt;/span&gt;

&lt;span style="color: #BB4444; font-style: italic"&gt;    :param groups: A list with groups that should be added to the&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;                   secondary groups from user.&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; groups:
        &lt;span style="color: #008800; font-style: italic"&gt;# TODO: Only remove/add groups that are selected&lt;/span&gt;
        secondary_groups &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;secondary_groups&lt;span style="color: #666666"&gt;.&lt;/span&gt;all()
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt; group &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; secondary_groups:
            &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;remove_from_group(group)
        db&lt;span style="color: #666666"&gt;.&lt;/span&gt;session&lt;span style="color: #666666"&gt;.&lt;/span&gt;commit()

        &lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt; group &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; groups:
            &lt;span style="color: #008800; font-style: italic"&gt;# Do not add the primary group to the secondary groups&lt;/span&gt;
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; group&lt;span style="color: #666666"&gt;.&lt;/span&gt;id &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;primary_group_id:
                &lt;span style="color: #AA22FF; font-weight: bold"&gt;continue&lt;/span&gt;
            &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;add_to_group(group)

        &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;invalidate_cache()

    db&lt;span style="color: #666666"&gt;.&lt;/span&gt;session&lt;span style="color: #666666"&gt;.&lt;/span&gt;add(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;)
    db&lt;span style="color: #666666"&gt;.&lt;/span&gt;session&lt;span style="color: #666666"&gt;.&lt;/span&gt;commit()
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;其关键代码是 LINE 24 - 25。其中 &lt;code&gt;db.session&lt;/code&gt; 对象是 Flask-SQLAlchemy 扩展为我们创建的一个事务对象，使用 &lt;code&gt;db.session.add()&lt;/code&gt; 来插入记录，使用 &lt;code&gt;db.session.commit()&lt;/code&gt; 来提交事务，使操作生效。LINE 9 - LINE 22是当需要改变一个用户所属的组时的操作代码，这里就不展开讨论。&lt;/p&gt;
&lt;p&gt;需要说明的是，修改记录时也是使用 &lt;code&gt;db.session.add()&lt;/code&gt; 方法。SQLAlchemy 会自动根据主键的值来判断这是一个新加的记录还是要修改的记录。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;关于db.session.commit()&lt;/p&gt;
&lt;p&gt;User.save() 方法里，当 groups 参数不为空时，会有两个 db.session.commit() 的调用。把一个操作分成两个事务，就达不到保证数据一致性的目的了。这里的代码写法应该可以再考量一下。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_6"&gt;删除记录&lt;/h2&gt;
&lt;p&gt;当我们需要从 users 表里删除记录里，调用 &lt;code&gt;User.delete()&lt;/code&gt; 方法即可，它的代码是这样的：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;delete&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;):
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Deletes the User.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;# This isn&amp;#39;t done automatically...&lt;/span&gt;
    PrivateMessage&lt;span style="color: #666666"&gt;.&lt;/span&gt;query&lt;span style="color: #666666"&gt;.&lt;/span&gt;filter_by(user_id&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;id)&lt;span style="color: #666666"&gt;.&lt;/span&gt;delete()
    ForumsRead&lt;span style="color: #666666"&gt;.&lt;/span&gt;query&lt;span style="color: #666666"&gt;.&lt;/span&gt;filter_by(user_id&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;id)&lt;span style="color: #666666"&gt;.&lt;/span&gt;delete()
    TopicsRead&lt;span style="color: #666666"&gt;.&lt;/span&gt;query&lt;span style="color: #666666"&gt;.&lt;/span&gt;filter_by(user_id&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;id)&lt;span style="color: #666666"&gt;.&lt;/span&gt;delete()

    db&lt;span style="color: #666666"&gt;.&lt;/span&gt;session&lt;span style="color: #666666"&gt;.&lt;/span&gt;delete(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;)
    db&lt;span style="color: #666666"&gt;.&lt;/span&gt;session&lt;span style="color: #666666"&gt;.&lt;/span&gt;commit()

    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;LINE 9 - 10 是用来从 users 表里删除一条记录。LINE 5-7 是用来在删除用户之前，把一些用户相关的数据也一并删除掉。&lt;/p&gt;
&lt;h2 id="_7"&gt;查询记录&lt;/h2&gt;
&lt;p&gt;继承自 &lt;code&gt;db.Model&lt;/code&gt; 的类会引入 &lt;code&gt;query&lt;/code&gt; 属性，这是个可查询对象 &lt;code&gt;Query&lt;/code&gt; 的实例。其常用的方法有 &lt;code&gt;query.filter()&lt;/code&gt;，&lt;code&gt;query.filter_by()&lt;/code&gt;，&lt;code&gt;query.order_by()&lt;/code&gt;，&lt;code&gt;query.limit()&lt;/code&gt;，&lt;code&gt;query.get()&lt;/code&gt;等等。这些函数只是指定了查询的条件，查询真正开始是在调用 &lt;code&gt;query.first()&lt;/code&gt;，&lt;code&gt;query.all()&lt;/code&gt; 等方法后才发生的。&lt;/p&gt;
&lt;p&gt;例如，获取用户的主题个数 &lt;code&gt;User.topic_count()&lt;/code&gt;：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;@property&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;topic_count&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;):
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Returns the thread count&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; Topic&lt;span style="color: #666666"&gt;.&lt;/span&gt;query&lt;span style="color: #666666"&gt;.&lt;/span&gt;filter(Topic&lt;span style="color: #666666"&gt;.&lt;/span&gt;user_id &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;id)&lt;span style="color: #666666"&gt;.&lt;/span&gt;count()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;再如 &lt;code&gt;User.delete()&lt;/code&gt; 的代码里删除用户相关的数据的代码：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;PrivateMessage&lt;span style="color: #666666"&gt;.&lt;/span&gt;query&lt;span style="color: #666666"&gt;.&lt;/span&gt;filter_by(user_id&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;id)&lt;span style="color: #666666"&gt;.&lt;/span&gt;delete()
ForumsRead&lt;span style="color: #666666"&gt;.&lt;/span&gt;query&lt;span style="color: #666666"&gt;.&lt;/span&gt;filter_by(user_id&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;id)&lt;span style="color: #666666"&gt;.&lt;/span&gt;delete()
TopicsRead&lt;span style="color: #666666"&gt;.&lt;/span&gt;query&lt;span style="color: #666666"&gt;.&lt;/span&gt;filter_by(user_id&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;id)&lt;span style="color: #666666"&gt;.&lt;/span&gt;delete()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;再如 &lt;code&gt;User.save()&lt;/code&gt; 的代码里关于群组的相关操作代码：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;secondary_groups &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;secondary_groups&lt;span style="color: #666666"&gt;.&lt;/span&gt;all()
&lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt; group &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; secondary_groups:
    &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;remove_from_group(group)
db&lt;span style="color: #666666"&gt;.&lt;/span&gt;session&lt;span style="color: #666666"&gt;.&lt;/span&gt;commit()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;通过 &lt;code&gt;self.secondary_groups.all()&lt;/code&gt; 获取所有的群组，然后在这些群组里把用户移除。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;filter() vs filter_by()&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter(*criterion)&lt;/code&gt; 使用 SQL 表达式，而 &lt;code&gt;filter_by(**kwargs)&lt;/code&gt; 使用关键字表达式。从函数声明可以看出来 &lt;code&gt;filter()&lt;/code&gt; 接受的参数是一个元组表达式，而 &lt;code&gt;filter_by()&lt;/code&gt; 接受的是一个 dict 表达式。所以，&lt;code&gt;Topic.query.filter(Topic.user_id == self.id).count()&lt;/code&gt; 等价于 &lt;code&gt;Topic.query.filter_by(user_id = self.id).count()&lt;/code&gt;。关于这个区别，还可以进一步查阅 &lt;a href="http://stackoverflow.com/questions/2128505/whats-the-difference-between-filter-and-filter-by-in-sqlalchemy"&gt;StackOverFlow&lt;/a&gt; 及 &lt;a href="http://segmentfault.com/q/1010000000140472"&gt;SegmentFault&lt;/a&gt; 上的文章，还有&lt;a href="http://docs.sqlalchemy.org/en/latest/orm/query.html?highlight=filter_by#sqlalchemy.orm.query.Query.filter"&gt;官方的文档&lt;/a&gt;。顺便吐槽一下，从这个对比可以看出来 StackOverFlow 和国内 SegmentFault 质量差异，顺便再感慨一下，学 IT 的人英文不好你就等着受苦吧，永远接触不到第一手的权威资料。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;关于查询还需要说明的一点，Flask-SQLAlchemy 提供了便利的函数 &lt;code&gt;get_or_404()&lt;/code&gt; 及 &lt;code&gt;first_or_404()&lt;/code&gt; 来替代 &lt;code&gt;get()&lt;/code&gt; 和 &lt;code&gt;first()&lt;/code&gt; 方法。这两个方法在 view 里特别有用，如找不到这个用户时，直接抛出 404 异常。而不是返回一个 None。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;@user.route&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;quot;/&amp;lt;username&amp;gt;&amp;quot;&lt;/span&gt;)
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;profile&lt;/span&gt;(username):
    user &lt;span style="color: #666666"&gt;=&lt;/span&gt; User&lt;span style="color: #666666"&gt;.&lt;/span&gt;query&lt;span style="color: #666666"&gt;.&lt;/span&gt;filter_by(username&lt;span style="color: #666666"&gt;=&lt;/span&gt;username)&lt;span style="color: #666666"&gt;.&lt;/span&gt;first_or_404()
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; render_template(&lt;span style="color: #BB4444"&gt;&amp;quot;user/profile.html&amp;quot;&lt;/span&gt;, user&lt;span style="color: #666666"&gt;=&lt;/span&gt;user)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="mvc"&gt;MVC 代码结构&lt;/h2&gt;
&lt;p&gt;介绍完 ORM，我们可以看一下 FlaskBB 项目 &lt;code&gt;flaskbb/flaskbb&lt;/code&gt; 目录下的核心代码的 MVC 代码结构。它把每个模块封装成一个独立的 bluepoint，每个模块又分为 model，view，form 三个模块。这样整体代码结构非常清晰。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;flaskbb
├── __init__.py
├── _compat.py
├── app.py
├── email.py
├── extensions.py
├── auth
│   ├── __init__.py
│   ├── forms.py
│   └── views.py
├── configs
│   ├── __init__.py
│   ├── default.py
│   ├── development.py
│   ├── development.py.example
│   ├── production.py.example
│   └── testing.py
├── fixtures
│   ├── __init__.py
│   ├── groups.py
│   └── settings.py
├── forum
│   ├── __init__.py
│   ├── forms.py
│   ├── models.py
│   └── views.py
├── management
│   ├── __init__.py
│   ├── forms.py
│   ├── models.py
│   └── views.py
├── user
│   ├── __init__.py
│   ├── forms.py
│   ├── models.py
│   └── views.py
└── utils
    ├── __init__.py
    ├── decorators.py
    ├── helpers.py
    ├── permissions.py
    ├── populate.py
    ├── settings.py
    └── widgets.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_8"&gt;结束语&lt;/h2&gt;
&lt;p&gt;本文简单介绍了 ORM 操作数据库的概念和一些基本的用法。可参考的资料很多，这里强烈推荐官方文档，深入浅出。关于入门资料，可参阅 &lt;a href="http://flask-sqlalchemy.pocoo.org/2.0"&gt;Flask-SQLAlchemy 官方文档&lt;/a&gt;。深入阅读可以参考 &lt;a href="http://docs.sqlalchemy.org/en/latest/orm"&gt;sqlalchemy 官方文档&lt;/a&gt;。&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category></entry><entry><title>使用 patchrom 移植 MIUI</title><link href="http://blog.kamidox.com/patchrom-miui.html" rel="alternate"></link><updated>2014-12-06T23:00:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-12-06:patchrom-miui.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;开篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;移植过程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#miui-patchrom"&gt;下载 MIUI patchrom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;准备移植目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ota"&gt;准备一个 OTA 升级包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#makefile"&gt;准备一个 makefile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#make-workspace"&gt;make workspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#make-firstpatch"&gt;make firstpatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reject"&gt;手动合并 reject 目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#make-fullota"&gt;make fullota&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;结语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;开篇&lt;/h2&gt;
&lt;p&gt;MIUI 使用代码插桩的方式来移植。即 MIUI 把他们基于 AOSP 的修改的代码全部用 smali 开放出来。这样我们通过对比 MIUI 的 smali 代码和 AOSP 的 smali　代码就可以知道 MIUI 修改了哪些内容，把这些内容移植过去即可完成 MIUI的移植。本文以 jellybean42-mtk 为例，描述使用 patchrom 移植 MIUI的方法以及在过程中遇到的问题及其调试方法。&lt;/p&gt;
&lt;h2 id="_2"&gt;移植过程&lt;/h2&gt;
&lt;p&gt;可以查阅 &lt;a href="http://pan.baidu.com/s/1o6yq4I2"&gt;MIUI 移植的文档&lt;/a&gt;了解一些背景知识。这里将主体步骤描述如下：&lt;/p&gt;
&lt;h3 id="miui-patchrom"&gt;下载 MIUI patchrom&lt;/h3&gt;
&lt;p&gt;下载 repo 工具&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;mkdir ~/bin
curl https://storage.googleapis.com/git-repo-downloads/repo &amp;gt; ~/bin/repo
chmod a+x ~/bin/repo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下载 MIUI patchrom 代码&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;mkdir ~/work/patchrom
&lt;span style="color: #AA22FF"&gt;cd&lt;/span&gt; ~/work/patchrom
repo init -u git://github.com/MiCode/patchrom.git -b jellybean42-mtk
repo sync
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;repo sync&lt;/code&gt; 命令需要很长的时间才能把代码下载完，代码总量大于10G。所以，基本上可以玩儿去了，不要傻傻地等了。&lt;/p&gt;
&lt;p&gt;代码下载完成后，我们就可以开始移植工作了。实际的代码目录树结构和内容和文档里描述的会有出入，我们可以忽略文档里的，以实际代码为准。本文使用2014-12-04下载的代码为准。&lt;/p&gt;
&lt;h3 id="_3"&gt;准备移植目录&lt;/h3&gt;
&lt;p&gt;在 patchrom 根目录下创建一个产品的工作目录用来移植时使用。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;cd&lt;/span&gt; ~/work/patchrom
&lt;span style="color: #AA22FF"&gt;source &lt;/span&gt;build/envsetup.sh
mkdir ~/work/patchrom/mtk6582
&lt;span style="color: #AA22FF"&gt;cd &lt;/span&gt;mtk6582
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="ota"&gt;准备一个 OTA 升级包&lt;/h3&gt;
&lt;p&gt;我们直接拿一个要当作底包的 OTA 升级包来作为 stockrom.zip。对这个底包有以下的要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个底包必须是 user 版本且足够稳定。因为根据底包移植完的软件是直接拿来当产品使用的。&lt;/li&gt;
&lt;li&gt;这个底包可以直接在手机里通过 recovery 模式升级。这个对后面移植完手的 miui-ota 包的烧录有帮助。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样，我们直接把这个 OTA 升级包 stockrom.zip 放在刚刚我们创建的 mtk6582 目录下。除此之外，我们还需要一台内核 root 过的手机，以便配合整个移植过程。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;关于stockrom.zip&lt;/p&gt;
&lt;p&gt;patchrom 官方移植教程是使用 &lt;code&gt;../tools/ota_target_from_phone -r&lt;/code&gt; 来直接从移植手机里生成 stockrom.zip 。这个命令要求手机先运行在 recovery 模式下。我自己验证过无法运行，没去深究。所以，直接拿一个 OTA 升级包来作为移植的底包。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;user 版本的 OTA 升级包里，apk 文件都是经过 odex 优化的。而 smali 反汇编又需要优化前的 apk　文件。怎么样解决这个问题呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 stockrom.zip 文件，把 system/framework 下的 pacheCoder.jar, gcm.jar, hpe.jar 从 zip 包里删除。这是因为这三个 jar 包没有经过 odex 优化。即找不到相应的 odex 包。这样的情况在下面的步骤处理时会出错。&lt;/li&gt;
&lt;li&gt;在 patchrom/mtk6582 目录下，执行如下命令　&lt;code&gt;../tools/deodex.sh stockrom.zip&lt;/code&gt; ，执行结束后，原 OTA 包会被覆盖掉，而且里面的 odex 文件将全部被打包回 apk 文件里。&lt;/li&gt;
&lt;li&gt;把步骤 1 删除掉的 3 个 jar 包放回 zip 包里。然后运行下面命令对zip包进行重新签名 &lt;code&gt;java -Xmx2048m -jar signapk.jar -w testkey.x509.pem testkey.pk8 stockrom.zip stockrom-signed.zip&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;把新生成的 ota zip 包放在手机 SD 卡里，进 recovery 模式进行升级。确保制作出来的包没有问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="makefile"&gt;准备一个 makefile&lt;/h3&gt;
&lt;p&gt;下面的 makefile 可以作为模板，里面有详细的注释说明每个字段的含义。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;#&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;# Makefile for mtk6582&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;#&lt;/span&gt;

&lt;span style="color: #008800; font-style: italic"&gt;# 指定我们要移植的手机的底包，就是上一步骤里准备的 stockrom.zip&lt;/span&gt;
&lt;span style="color: #B8860B"&gt;local-zip-file&lt;/span&gt;     &lt;span style="color: #666666"&gt;:=&lt;/span&gt; stockrom.zip

&lt;span style="color: #008800; font-style: italic"&gt;# 编译我们移植好的 MIUI ROM 时的输出文件名&lt;/span&gt;
&lt;span style="color: #B8860B"&gt;local-out-zip-file&lt;/span&gt; &lt;span style="color: #666666"&gt;:=&lt;/span&gt; MIUI_MTK6582.zip

&lt;span style="color: #008800; font-style: italic"&gt;# 制作升级差异包时所需要的上一个版本的 ota 包目录，我们暂时还用不着&lt;/span&gt;
&lt;span style="color: #B8860B"&gt;local-previous-target-dir&lt;/span&gt; &lt;span style="color: #666666"&gt;:=&lt;/span&gt; ~/work/ota_base/mtk6582

&lt;span style="color: #008800; font-style: italic"&gt;# All apps from original ZIP, but has smali files chanded&lt;/span&gt;
&lt;span style="color: #B8860B"&gt;local-modified-apps&lt;/span&gt; &lt;span style="color: #666666"&gt;:=&lt;/span&gt;

&lt;span style="color: #B8860B"&gt;local-modified-jars&lt;/span&gt; &lt;span style="color: #666666"&gt;:=&lt;/span&gt;

&lt;span style="color: #008800; font-style: italic"&gt;# 哪些 MIUI 模块不包含在最终生成的 MIUI ROM 里。这里我们默认包含所有的 MIUI 模块。&lt;/span&gt;
&lt;span style="color: #B8860B"&gt;local-miui-removed-apps&lt;/span&gt; &lt;span style="color: #666666"&gt;:=&lt;/span&gt;

&lt;span style="color: #008800; font-style: italic"&gt;# 我们在移植过程中，使用了 MIUI 的 Phone 模块，但对 MIUI 的这个模块进行反编译并修改了部分 smali 代码使其功能正常。&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;# 针对 jellybean42-mtk 这个分支，所有的 MIUI 模块定义在 patchrom/build/jellybean42-mtk.mk 文件里。&lt;/span&gt;
&lt;span style="color: #B8860B"&gt;local-miui-modified-apps&lt;/span&gt; &lt;span style="color: #666666"&gt;:=&lt;/span&gt; Phone

&lt;span style="color: #008800; font-style: italic"&gt;# density define&lt;/span&gt;
&lt;span style="color: #B8860B"&gt;local-density&lt;/span&gt; &lt;span style="color: #666666"&gt;:=&lt;/span&gt; XHDPI

&lt;span style="color: #008800"&gt;include phoneapps.mk&lt;/span&gt;

&lt;span style="color: #008800; font-style: italic"&gt;# To include the local targets before and after zip the final ZIP file,&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;# and the local-targets should:&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;# (1) be defined after including porting.mk if using any global variable(see porting.mk)&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;# (2) the name should be leaded with local- to prevent any conflict with global targets&lt;/span&gt;
&lt;span style="color: #B8860B"&gt;local-pre-zip&lt;/span&gt; &lt;span style="color: #666666"&gt;:=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;local&lt;/span&gt;-pre-zip-misc
&lt;span style="color: #B8860B"&gt;local-after-zip&lt;/span&gt;&lt;span style="color: #666666"&gt;:=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;local&lt;/span&gt;-put-to-phone

&lt;span style="color: #008800; font-style: italic"&gt;# The local targets after the zip file is generated, could include &amp;#39;zip2sd&amp;#39; to&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;# deliver the zip file to phone, or to customize other actions&lt;/span&gt;

&lt;span style="color: #008800"&gt;include $(PORT_BUILD)/porting.mk&lt;/span&gt;

&lt;span style="color: #008800; font-style: italic"&gt;# To define any local-target&lt;/span&gt;
&lt;span style="color: #B8860B"&gt;updater&lt;/span&gt; &lt;span style="color: #666666"&gt;:=&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;ZIP_DIR&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;/META-INF/com/google/android/updater-script
&lt;span style="color: #B8860B"&gt;pre_install_data_packages&lt;/span&gt; &lt;span style="color: #666666"&gt;:=&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;TMP_DIR&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;/pre_install_apk_pkgname.txt
&lt;span style="color: #00A000"&gt;local-pre-zip-misc&lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt;
    rm -rf &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;pre_install_data_packages&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt; apk in &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;ZIP_DIR&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;/data/media/preinstall_apps/*.apk; &lt;span style="color: #AA22FF; font-weight: bold"&gt;do&lt;/span&gt;&lt;span style="color: #BB6622; font-weight: bold"&gt;\&lt;/span&gt;
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;AAPT&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt; d --values resources &lt;span style="color: #B8860B"&gt;$$&lt;/span&gt;apk | grep &lt;span style="color: #BB4444"&gt;&amp;#39;id=127 packageCount&amp;#39;&lt;/span&gt; | sed -e &lt;span style="color: #BB4444"&gt;&amp;quot;s/^.*name=//&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;pre_install_data_packages&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;;&lt;span style="color: #BB6622; font-weight: bold"&gt;\&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;done&lt;/span&gt;
    more &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;pre_install_data_packages&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt; | wc -l &amp;gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;ZIP_DIR&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;/system/etc/enforcecopyinglibpackages.txt
    more &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;pre_install_data_packages&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;ZIP_DIR&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;/system/etc/enforcecopyinglibpackages.txt

&lt;span style="color: #00A000"&gt;out/framework2.jar &lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt; out/framework.jar

&lt;span style="color: #00A000"&gt;%.phone &lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt; out/%.jar
    @echo push -- to --- phone
    adb remount
    adb push &lt;span style="color: #B8860B"&gt;$&amp;lt;&lt;/span&gt; /system/framework
    adb shell chmod &lt;span style="color: #666666"&gt;644&lt;/span&gt; /system/framework/&lt;span style="color: #B8860B"&gt;$*&lt;/span&gt;.jar

&lt;span style="color: #00A000"&gt;%.sign-plat &lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt; out/%
    java -jar &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;TOOL_DIR&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;/signapk.jar &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;PORT_ROOT&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;/build/security/platform.x509.pem &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;PORT_ROOT&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;/build/security/platform.pk8  &lt;span style="color: #B8860B"&gt;$&amp;lt;&lt;/span&gt; &lt;span style="color: #B8860B"&gt;$&amp;lt;&lt;/span&gt;.signed
    @echo push -- to --- phone
    adb remount
    adb push &lt;span style="color: #B8860B"&gt;$&amp;lt;&lt;/span&gt;.signed /system/app/&lt;span style="color: #B8860B"&gt;$*&lt;/span&gt;
    adb shell chmod &lt;span style="color: #666666"&gt;644&lt;/span&gt; /system/app/&lt;span style="color: #B8860B"&gt;$*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="make-workspace"&gt;make workspace&lt;/h3&gt;
&lt;p&gt;在 patchrom/mtk6582 目录下运行 &lt;code&gt;make workspace&lt;/code&gt; 命令。这个命令会把 stockrom.zip 文件解压，并且反编译里面的 jar/apk 来作为移植的基础。在上述 makefile 内容下，会生成下面几个文件夹：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;android.policy.jar.out&lt;/li&gt;
&lt;li&gt;framework.jar.out&lt;/li&gt;
&lt;li&gt;framework-res&lt;/li&gt;
&lt;li&gt;mediatek-framework.jar.out&lt;/li&gt;
&lt;li&gt;secondary-framework.jar.out&lt;/li&gt;
&lt;li&gt;services.jar.out&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;深入理解make workspace&lt;/p&gt;
&lt;p&gt;可以阅读 patchrom/build　目录下的 makefile 文件来深入理解 patchrom　的编译系统。对 &lt;code&gt;make workspace&lt;/code&gt; 命令，实际上是根据 jellybean42-mtk.mk 里的 private-miui-jars，以及 framework-res.apk　和 makefile　里定义的 local-modified-apps 来决定反编译哪些内容的。&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="make-firstpatch"&gt;make firstpatch&lt;/h3&gt;
&lt;p&gt;在 patchrom/mtk6582 目录下运行 &lt;code&gt;make firstpatch&lt;/code&gt; 命令。这个命令偿试自动合并 smali 文件。如果无法合并，会在 reject 目录下生成有冲突的文件。所以，运行这个命令后，我们只需要合并 reject 目录下的有冲突的文件即可完成 MIUI ROM 的移植工作。&lt;/p&gt;
&lt;p&gt;这个命令在 patchrom/mtk6582/temp 目录下生成的文件树如下：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;├── dst_smali_orig &lt;span style="color: #008800; font-style: italic"&gt;# 这个是底包 stockrom.zip 里反编译出来的系统 smali 文件&lt;/span&gt;
│   ├── android.policy.jar.out
│   ├── framework.jar.out
│   ├── mediatek-framework.jar.out
│   ├── secondary-framework.jar.out
│   └── services.jar.out
├── dst_smali_patched　# 这个是程序自动合并的目标 smali 文件
│   ├── android.policy.jar.out
│   ├── framework.jar.out
│   ├── mediatek-framework.jar.out
│   ├── secondary-framework.jar.out
│   └── services.jar.out
├── new_smali &lt;span style="color: #008800; font-style: italic"&gt;# 这个是 MIUI ROM 里反编译出来的系统 smali 文件&lt;/span&gt;
│   ├── android.policy.jar.out
│   ├── framework.jar.out
│   ├── mediatek-framework.jar.out
│   ├── secondary-framework.jar.out
│   └── services.jar.out
├── old_smali　# 这个是 AOSP 里反编译出来的系统 smali 文件
│   ├── android.policy.jar.out
│   ├── framework.jar.out
│   ├── mediatek-framework.jar.out
│   ├── secondary-framework.jar.out
│   └── services.jar.out
└── reject　# 这个是由于冲突程序无法自动合并，需要手动合并的 smali 文件
    ├── android.policy.jar.out
    ├── framework.jar.out
    ├── secondary-framework.jar.out
    └── services.jar.out
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以阅读 patchrom/build 和 patchrom/tools 两个目录下的 makefile 和 shell 源码来理解 make firstpatch 过程到底做了什么事情。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;关于自动合并&lt;/p&gt;
&lt;p&gt;自动合并会把一些差异自动合并进 dst_smali_patched 目录。这个合并过程是怎么样的呢？可以阅读 patchrom/tools/patch_miui_framework.sh 文件来获取详细信息。这里总结自动合并的过程如下：1) 用 diff 命令计算 old_smali 和 new_smali 两个文件夹下的每个文件的补丁 .diff 文件。2) 用 patch 命令把计算出来的 .diff 文件逐个给 dst_smali_orig 目录下的对应文件打补丁，自动合并成功的文件最终生成成 dst_smali_patched 目录下。&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="reject"&gt;手动合并 reject 目录&lt;/h3&gt;
&lt;p&gt;看起来好简单，其实挑战刚刚开始，要手动合并 reject 目录下的内容不是件容易的事情。即使合并完，后面的调试过程也是痛苦异常。不过也别灰心。办法总比困难多。掌握了基本原理，那么合并过程和调试过程其实还是有规律可以遵循的。在开始这个痛苦过程前，需要先掌握 smali 语法以及 Dalvik　虚拟机的字节码的函义。关于 Dalvik 虚拟机字节码，这个&lt;a href="http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html"&gt;文档&lt;/a&gt;可以查阅。&lt;/p&gt;
&lt;p&gt;手动合并 smali 代码的流程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用文本编辑器逐个打开 &lt;code&gt;reject&lt;/code&gt; 目录下的所有文件，找出冲突的代码块&lt;/li&gt;
&lt;li&gt;用 BeyondCompare/Meld 工具去比较 old_smali 和 new_smali，找出冲突代码块的位置&lt;/li&gt;
&lt;li&gt;通过比较阅读 smali 文件理解 MIUI 在 AOSP 的基础修改了什么逻辑&lt;/li&gt;
&lt;li&gt;用 BeyondCompare/Meld 工具去比较 dst_smali_orig 和 dst_smali_patched，找出冲突代码块的位置&lt;/li&gt;
&lt;li&gt;根据步骤 3 的逻辑修改，把这个修改合并进 dst_smali_patched 目录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个过程刚做很痛苦，但有做几次积累一定经验后，就轻松了。过程中可能还要结合 AOSP 的 JAVA 源码阅读来理解逻辑。&lt;/p&gt;
&lt;p&gt;目标 smali 代码合并进 dst_smali_patched 之后，还需要把这个结果合并回 patchrom/mtk6582 目录下的相应 smali 文件里。比如，需要把 patchrom/mtk6582/android.policy.jar.out 目录和 patchrom/mtk6582/temp/dst_smali_patched/android.policy.jar.out 目录相比较，把最终结果合并进 patchrom/mtk6582/android.policy.jar.out　里。因为 patchrom 编译工具在生成这些需要合并的文件时，把 smali 文件里的行号删除了。这样有利于自动合并和手动合并，而不会被行号干扰。而我们合并完真正进行编译时，实际上参加编译的是 patchrom/mtk6582/android.policy.jar.out 下的 smali 文件。所以必须合并回去才能真正把 MIUI 合并过去。&lt;/p&gt;
&lt;h3 id="make-fullota"&gt;make fullota&lt;/h3&gt;
&lt;p&gt;合并完成后，可以在 patchrom/mtk6582 目录下运行 &lt;code&gt;make fullota&lt;/code&gt; 来生成目标文件 MIUI_MTK6582.zip。如果你人品足够好，那么可能一步就生成了。但基本上没有这么好的运气。过程中会有 smali 错误。需要根据提示去做适当的修改。编译通过后，就可以把 MIUI_MTK6582.zip 文件通过 recovery 方式升级到手机看移植后的效果。&lt;/p&gt;
&lt;h2 id="_4"&gt;结语&lt;/h2&gt;
&lt;p&gt;本文分析了使用 patchrom 移植 MIUI 的全过程，详细解释了 patchrom 编译系统及步骤。这个对理解 patchrom 移植的原理有比较大的帮助。移植过程中可能会碰到各种各样的问题。这些问题都需要一些丰富的知识去识别和解决。下一篇准备介绍一下移植过程中遇到的一些问题，解决方法以及找到解决方法的分析过程。&lt;/p&gt;</summary><category term="android"></category><category term="patchrom"></category><category term="miui"></category></entry><entry><title>Android电话本核心数据结构</title><link href="http://blog.kamidox.com/android-contacts-provider.html" rel="alternate"></link><updated>2014-11-27T23:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-11-27:android-contacts-provider.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contact-provider"&gt;Contact Provider结构&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#rawcontacts"&gt;RawContacts表&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#raw-contact"&gt;raw contact的重要字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;注意事项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;一个例子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#data"&gt;Data表&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;描述性字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;通用数据字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;类型相关的字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;类型相关的字段名类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#contacts"&gt;Contacts表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;从同步适配器来的数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;需要的权限&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#user-profile"&gt;User Profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contacts-provider"&gt;Contacts Provider元数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#contacts-provider_1"&gt;读写Contacts Provider&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_10"&gt;查询记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;批量操作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_12"&gt;释放点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;反向引用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;结语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;简介&lt;/h2&gt;
&lt;p&gt;Contact Provider是Android系统提供的一个功能强大且灵活的系统组件，用来管理系统里的所有联系人数据。我们在Android手机是看到的联系人信息的数据来源就是由Contact Provider提供的，我们也可以自己写程序来访问这些联系人数据，也可以把这些数据和我们自己的网络服务进行同步和备份。由于Contact Provider管理了相当多类型的数据源，对一个联系人又同时管理着非常多的信息，结果就导致Contact Provider组织结构异常复杂。本文包含以下内容来介绍Contact Provider：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contact Provider的基础数据结构&lt;/li&gt;
&lt;li&gt;怎么样从Contact Provider里获取联系人数据&lt;/li&gt;
&lt;li&gt;怎么样修改Contact Provider里的联系人数据&lt;/li&gt;
&lt;li&gt;怎么样写一个同步适配器(sync adapter)来实现联系人数据的同步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文假设你已经了解了Android的content provider机制。Android自带的一个示例程序SampleSyncAdapter很好地演示了如何写一个同步适配器，来把联系人数据同步到部署在Google Web Service上网络服务上。&lt;/p&gt;
&lt;h2 id="contact-provider"&gt;Contact Provider结构&lt;/h2&gt;
&lt;p&gt;Contact Provider是Android里的一个content provider组件。针对一个联系人，它维护三种类型的数据，分别用三个表来维护这些数据。三个表都定义在类&lt;code&gt;ContactsContract&lt;/code&gt;里，它定义了每个表的content URL，列名称等常量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ContactsContract.Contacts&lt;br /&gt;
  这个表的每一行表示一个联系人，它是由&lt;code&gt;RawContacts&lt;/code&gt;表里的数据聚合而来的。&lt;/li&gt;
&lt;li&gt;ContactsContract.RawContacts&lt;br /&gt;
  针对不同的帐户，这个表的第一行包含了一个联系人的概要信息。&lt;/li&gt;
&lt;li&gt;ContactsContract.Data&lt;br /&gt;
  这个表保存真正的联系人数据，比如电子邮件，电话号码等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义在&lt;code&gt;ContactsContract&lt;/code&gt;里的其他表，用来辅助实现Contact Provider的其他功能。三个核心的表Contacts, RawContacts, Data的相互关系如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="contacts_structure" src="https://raw.githubusercontent.com/kamidox/blogs/master/images/contacts_structure.png" /&gt;&lt;/p&gt;
&lt;h3 id="rawcontacts"&gt;RawContacts表&lt;/h3&gt;
&lt;p&gt;一个raw contacts表示一个来自特定帐户类型和名称的联系人数据。因为Contact Provider允许多个在线服务作为数据的来源，所以Contact Provider允许多个raw contacts来对应同一个联系人。用户也可以从多个帐户中合并多个raw contacts来生成一个联系人数据。&lt;/p&gt;
&lt;p&gt;raw contact的大部分数据不保存在&lt;code&gt;RawContacts&lt;/code&gt;表里，而是通过一行或多行数据保存在&lt;code&gt;ContactsContract.Data&lt;/code&gt;表里。&lt;code&gt;Data&lt;/code&gt;表里的每行数据都有一个&lt;code&gt;Data.RAW_CONTACT_ID&lt;/code&gt;，它与表&lt;code&gt;RawContacts&lt;/code&gt;的&lt;code&gt;RawContacts._ID&lt;/code&gt;是对应的。即表&lt;code&gt;Data&lt;/code&gt;里所有满足&lt;code&gt;Data.RAW_CONTACT_ID == RawContacts._ID&lt;/code&gt;的记录，都属于表&lt;code&gt;RawContacts&lt;/code&gt;里由&lt;code&gt;RawContacts._ID&lt;/code&gt;指定的这条记录的数据。&lt;/p&gt;
&lt;h4 id="raw-contact"&gt;raw contact的重要字段&lt;/h4&gt;
&lt;p&gt;下表是raw contact的表的一些重要字段。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段名称&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ACCOUNT_NAME&lt;/td&gt;
&lt;td&gt;raw contact的数据来源的帐户名称。比如对Google帐户而言，这个字段的值就是用户的Gmail地址。&lt;/td&gt;
&lt;td&gt;这个字段的数据格式是由帐户类型决定的，不一定要电子邮件地址。只要服务提供方能保证帐户名的唯一性即可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACCOUNT_TYPE&lt;/td&gt;
&lt;td&gt;raw contact的数据来源的帐户类型。比如Google帐户的帐户类型是&lt;strong&gt;com.google&lt;/strong&gt;，这个值由一般由帐户提供方的域名来保证唯一性，不和别的帐户冲突。&lt;/td&gt;
&lt;td&gt;一个帐户类型一般会和一个同步适配器关联起来，来提供数据同步服务。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETED&lt;/td&gt;
&lt;td&gt;删除标志位&lt;/td&gt;
&lt;td&gt;Contact Provider使用这个标志位来管理用户删除，但还没同步到服务器上的记录。当同步适配器开始同步，从服务器上删除了这个记录之后，这条记录才在本地删除。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="_2"&gt;注意事项&lt;/h4&gt;
&lt;p&gt;下面是关于&lt;code&gt;RawContacts&lt;/code&gt;表的重要的注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;联系人名称并不保存在&lt;code&gt;ContactsContract.RawContacts&lt;/code&gt;表里，而是保存在&lt;code&gt;ContactsContract.Data&lt;/code&gt;表里。它的数据类型是&lt;code&gt;ContactsContract.CommonDataKinds.StructuredName&lt;/code&gt;。而且每个联系人在Data表里只有一行表示联系人名字的数据。&lt;/li&gt;
&lt;li&gt;要在raw contact表里保存属于指定帐户数据，必须先通过&lt;code&gt;AccountManager&lt;/code&gt;注册帐户。可以通过提示用户添加帐户类型和帐户名称到系统里来实现注册帐户的目的。如果你不这样做，Contact Provider会自动删除raw contact表里属于这个帐户的数据。&lt;br /&gt;
  例如，如果你需要你的应用程序维护来自你的网络服务&lt;code&gt;"com.example.dataservice"&lt;/code&gt;的联系人数据，帐户的用户名是&lt;code&gt;"user@dataservice.example.com"&lt;/code&gt;。用户必须先在手机里新建一个帐户，其帐户类型是&lt;code&gt;"com.example.dataservice"&lt;/code&gt;，帐户名是&lt;code&gt;"user@dataservice.example.com"&lt;/code&gt;。添加帐户成功后，你的应用程序才能添加属于这个帐户的联系人数据到raw contact表里。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_3"&gt;一个例子&lt;/h4&gt;
&lt;p&gt;为了更好的理解raw contact的机制，我们假设有个用户叫&amp;rdquo;Emily Dickinson&amp;rdquo;，她在设备里添加了下面三个帐户：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;emily.dickinson@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emilyd@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Twitter account "belle_of_amherst"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并且都启用了自动同步功能。&lt;/p&gt;
&lt;p&gt;假设Emily在电脑上打开浏览器，用&lt;code&gt;emily.dickinson@gmail.com&lt;/code&gt;登录Gmail，打开通讯录，添加了&amp;rdquo;Thomas Higginson&amp;rdquo;。过了一会儿，她又用&lt;code&gt;emilyd@gmail.com&lt;/code&gt;登录Gmail，然后向&amp;rdquo;Thomas Higginson&amp;rdquo;发了封电子邮件，这个操作会自动把&amp;rdquo;Thomas Higginson&amp;rdquo;添加进联系人里。她也在Twitter上关注了&amp;rdquo;colonel_tom&amp;rdquo; (Thomas Higginson&amp;rsquo;s Twitter ID) 。&lt;/p&gt;
&lt;p&gt;上面的操作，会导致Contacts Provider创建了三个raw contacts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个是和&lt;code&gt;emily.dickinson@gmail.com&lt;/code&gt;帐户关联的叫&amp;rdquo;Thomas Higginson&amp;rdquo;的联系人。这个联系人所属的帐户类型是Google。&lt;/li&gt;
&lt;li&gt;第二个是和&lt;code&gt;emilyd@gmail.com&lt;/code&gt;帐户关联的叫&amp;rdquo;Thomas Higginson&amp;rdquo;的raw contact。这个联系人的帐户类型也是Google。虽然第二个联系人和第一个的名字一样，但它属于另外一个帐户名下的联系人。&lt;/li&gt;
&lt;li&gt;第三个是和Twitter帐户&amp;rdquo;belle_of_amherst&amp;rdquo;关联的叫&amp;rdquo;Thomas Higginson&amp;rdquo;的联系人。它的帐户类型是Twitter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="data"&gt;Data表&lt;/h3&gt;
&lt;p&gt;前面提过，Data表是用来保存联系人数据的，通过&lt;code&gt;Data.RAW_CONTACT_ID&lt;/code&gt;和raw contact里的&lt;code&gt;RawContacts._ID&lt;/code&gt;关联起来。这样就允许一个raw contact可以有多个相同类型的数据保存在Data表里，比如一个联系人可以有多个电子邮件地址，多个电话号码等。例如，属于&lt;code&gt;emilyd@gmail.com&lt;/code&gt;帐户的联系人&amp;rdquo;Thomas Higginson&amp;rdquo;有一个家庭电子邮件&lt;code&gt;thigg@gmail.com&lt;/code&gt;以及一个工作电子邮件&lt;code&gt;thomas.higginson@gmail.com&lt;/code&gt;，Contact Provider保存这两个电子邮件地址在Data表里，并通过&lt;code&gt;Data.RAW_CONTACT_ID&lt;/code&gt;和&lt;code&gt;RawContacts&lt;/code&gt;表里的数据关联。&lt;/p&gt;
&lt;p&gt;需要注意，不同类型的数据全部保存在&lt;code&gt;Data&lt;/code&gt;表里。联系人名字，邮件地址，电话号码，照片，网址等等，全部是保存在&lt;code&gt;Data&lt;/code&gt;表里的。为了实现这样的目的，Data表里包含一些描述性的字段来描述数据。还包含了一些真正的用来保存数据的字段。&lt;/p&gt;
&lt;h4 id="_4"&gt;描述性字段&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RAW_CONTACT_ID&lt;br /&gt;
  用来和&lt;code&gt;RawContacts._ID&lt;/code&gt;字段进行关联，以表示行数据是属于哪个raw contact的。&lt;/li&gt;
&lt;li&gt;MIMETYPE&lt;br /&gt;
  数据类型，Contact Provider使用定义&lt;code&gt;ContactsContract.CommonDataKinds&lt;/code&gt;里的子类来区别不同的数据类型。&lt;/li&gt;
&lt;li&gt;IS_PRIMARY&lt;br /&gt;
  如果一个数据类型可以出现多次，则这个字段用来标示出这种数据类型的主数据。比如一个联系人有多个电话号码，则其中一个的IS_PRIMARY可以设置为非零值，则这个号码就是主电话号码。有些应用程序可以利用这一特性地优先选择主电话号码来拨号等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_5"&gt;通用数据字段&lt;/h4&gt;
&lt;p&gt;一个Data表里的记录，总共有15个通用数据字段，从DATA1到DATA15。同时还有4个只能给同步适配器使用的字段SYNC1到SYNC4。&lt;/p&gt;
&lt;p&gt;DATA1字段会被索引起来，Contact Provider默认问题认为这个字段保存的是最经常被访问的数据，比如对Email数据而言，这个字段保存的就是Email地址。&lt;/p&gt;
&lt;p&gt;通常情况下，DATA15被用来保存二进制数据(BLOB)，比如照片的二进制数据等。&lt;/p&gt;
&lt;h4 id="_6"&gt;类型相关的字段&lt;/h4&gt;
&lt;p&gt;DATA表里的每一行保存一种类型的数据，为了方便地访问不同类型的数据，Contact Provider也提供了访问具体类型数据的字段的方法，这些类型相关的字段别名由定义在&lt;code&gt;ContactsContract.CommonDataKinds&lt;/code&gt;里的子类来定义。&lt;/p&gt;
&lt;p&gt;例如，&lt;code&gt;ContactsContract.CommonDataKinds.Email&lt;/code&gt;类定义了MIME Type为&lt;code&gt;Email.CONTENT_ITEM_TYPE&lt;/code&gt;的数据，要访问Email地址时，可以直接访问&lt;code&gt;Email.ADDRESS&lt;/code&gt;，它的值其实就是&amp;rdquo;data1&amp;rdquo;，就是通用数据字段的DATA1字段。&lt;/p&gt;
&lt;div class="admonition caution"&gt;
&lt;p class="admonition-title"&gt;警告&lt;/p&gt;
&lt;p&gt;当向&lt;code&gt;ContactsContract.Data&lt;/code&gt;表中添加自定义数据时，不要使用&lt;code&gt;ContactsContract.CommonDataKinds&lt;/code&gt;里预定义的MIME类型。否则你可以丢失数据或引起Contact Provider不能正常工作。例如，你&lt;strong&gt;不能&lt;/strong&gt;向Data表里添加一行数据，然后其MIME type定义为&lt;code&gt;Email.CONTENT_ITEM_TYPE&lt;/code&gt;，其值保存在字段DATA1上，且其值是用户名而不是Email地址。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;下图就是类型相关字段别名和通用数据字段的关联关系图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="data_columns" src="https://raw.githubusercontent.com/kamidox/blogs/master/images/data_columns.png" /&gt;&lt;/p&gt;
&lt;h4 id="_7"&gt;类型相关的字段名类&lt;/h4&gt;
&lt;p&gt;下表列出了最常用的类型相关的别名字段类&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;别名类名称&lt;/th&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ContactsContract.CommonDataKinds.StructuredName&lt;/td&gt;
&lt;td&gt;名字&lt;/td&gt;
&lt;td&gt;只能有一个名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ContactsContract.CommonDataKinds.Photo&lt;/td&gt;
&lt;td&gt;照片&lt;/td&gt;
&lt;td&gt;只能有一个照片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ContactsContract.CommonDataKinds.Email&lt;/td&gt;
&lt;td&gt;电子邮件&lt;/td&gt;
&lt;td&gt;可以有多个电子邮件地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ContactsContract.CommonDataKinds.GroupMembership&lt;/td&gt;
&lt;td&gt;联系人所在的组&lt;/td&gt;
&lt;td&gt;联系人的组是可选项&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="contacts"&gt;Contacts表&lt;/h3&gt;
&lt;p&gt;Contact Provider会从RawContacts和Data表里收集数据，组合生成一个记录放在Contacts表里。Contact Provider负责在这个表里生成记录，合并数据。应用程序和同步适配器都不能向这个表里添加记录，Contacts表里的一些字段还是只读的。&lt;/p&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;如果你试图通过ContentResolve的insert()方法向Contacts表里添加记录，会得到一个&lt;code&gt;UnsupportedOperationException&lt;/code&gt;的错误。如果试图修改只读的字段，也会被忽略。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Contact Provider会根据raw contact自动向Contacts表里添加一条记录。如果raw contact数据改变，导致Contacts表里原先和raw contact关联记录不复存在了，那么Contact Provider也会自动向Contacts里自动添加一条记录。如果应用程序或同步适配器添加了一条raw contact记录，且这条记录与Contacts表里的某条记录是一样的，那么Contact Provider会负责把这条新增加的记录和原来那条记录合并。&lt;/p&gt;
&lt;p&gt;Contact Provider通过&lt;code&gt;Contacts._ID&lt;/code&gt;和&lt;code&gt;RawContacts.CONTACT_ID&lt;/code&gt;把Contacts表和RawContacts表的数据关联起来。即一个Contacts表里的记录可以与多个RawContacts表里的记录对应。给定&lt;code&gt;Contacts._ID&lt;/code&gt;的值，所有&lt;code&gt;RawContacts.CONTACT_ID&lt;/code&gt;为这个值的记录都与Contacts里的这条记录关联。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ContactsContract.Contacts&lt;/code&gt;表还包含了一个&lt;code&gt;LOOKUP_KEY&lt;/code&gt;字段，这个字段永久地和某个特定的联系人关联起来。这个字段存在的意义在于，Contacts表是由Contacts Provider自动维护的，当发生数据合并或同步适配器修改raw contacts时，Contacts._ID的值是会发生变化的。而&lt;code&gt;Contacts.LOOKUP_KEY&lt;/code&gt;在这个过程中，是不会发生变化的。&lt;code&gt;Contacts.CONTENT_LOOKUP_URI&lt;/code&gt;和&lt;code&gt;LOOKUP_KEY&lt;/code&gt;字段组合起来所代表的联系人依然指向了原来的联系人。所以，我们可以用&lt;code&gt;LOOKUP_KEY&lt;/code&gt;来连接一个我们感兴趣的联系人。&lt;/p&gt;
&lt;p&gt;下图阐明了三个主要的表之间的关系：&lt;/p&gt;
&lt;p&gt;&lt;img alt="contacts_tables" src="https://raw.githubusercontent.com/kamidox/blogs/master/images/contacts_tables.png" /&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;从同步适配器来的数据&lt;/h3&gt;
&lt;p&gt;用户可以在设备里直接输入联系人数据，联系人数据也可以通过同步适配器自动地在设备和云端进行同步。同步适配器在系统后台运行，由系统控制，通过ContentResolver来管理数据。&lt;/p&gt;
&lt;p&gt;在Android系统上，同步适配器的云端服务是由帐户类型来区分的。一个同步适配器对应一个帐户类型。但同步适配器可以支持同一个帐户类型下的多个帐户名，就象可以在设备上登录多个Google帐户一样。下面的文字描述了帐户类型和帐户名称与同步适配器的关系。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帐户类型&lt;br /&gt;
  唯一地标识了用户存储数据的云端服务。大多数时候，用户必须通过云端服务鉴权才能使用服务。例如，Google联系人就是一个值为&amp;rdquo;com.google&amp;rdquo;的帐户类型。这个值与AccountManager类里的帐户类型的值是一样的。&lt;/li&gt;
&lt;li&gt;帐户名称&lt;br /&gt;
  唯一地标识了某个帐户类型的一个特定的帐户。Google联系人帐户和Google帐户是相同的，它们都用Gmail地址作为帐户名称。其他的云端服务可能使用一个字符串或一个数字来表示帐户名称，但必须注意的是，云端服务必须保证在同一个帐户类型里，帐户名称可以唯一地区分一个帐户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;帐户类型可以不唯一，即一个设备里可以有多个相同帐户类型的帐户。比如，设备可以登录多个Google帐户。帐户名称一般是唯一的，至少在同一个帐户类型里必须是唯一的。帐户类型和帐户名称结合起来，通过同步适配器，共同标识了一个在Contact Provider和云端服务之间的一个特定同步数据流。&lt;/p&gt;
&lt;p&gt;如果你想在你的云端服务和Contact Provider之间同步数据，你必须实现一个同步适配器。后面章节的文章会提到这个话题。&lt;/p&gt;
&lt;h3 id="_9"&gt;需要的权限&lt;/h3&gt;
&lt;p&gt;需要访问Contact Provider的应用程序必须取得下面的权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读权限&lt;br /&gt;
  需要在应用程序的AndroidManifest.xml里，添加&lt;code&gt;&amp;lt;uses-permission android:name="android.permission.READ_CONTACTS"&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;写权限&lt;br /&gt;
  需要在应用程序的AndroidManifest.xml里，添加&lt;code&gt;&amp;lt;uses-permission android:name="android.permission.WRITE_CONTACTS"&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个权限不包含User Profile数据的读写。user profile使用单独的权限来控制读写。&lt;/p&gt;
&lt;h3 id="user-profile"&gt;User Profile&lt;/h3&gt;
&lt;p&gt;User Profile就是在设备联系人应用程序里看到的&amp;rdquo;我的个人资料&amp;rdquo;，用来描述本设备所有人信息的一个数据。&lt;code&gt;ContactsContract.Contacts&lt;/code&gt;表里有一行数据用来表现user profile。这个数据用来描述设备所有人本身，而不是设备所有人的联系人。&lt;/p&gt;
&lt;p&gt;读写user profile除了读写联系人数据外，还需要额外的权限，他们是&amp;rdquo;android.permission.READ_PROFILE&amp;rdquo;和&amp;rdquo;android.permission.WRITE_PROFILE&amp;rdquo;。这两个都是在API 14的时候才加进去的。&lt;/p&gt;
&lt;p&gt;要获取user profile，可以使用ContentResolver通过&lt;code&gt;ContactsContract.Profile.CONTENT_URI&lt;/code&gt;来获取，下面是获取user profile的示例代码：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;// Sets the columns to retrieve for the user profile&lt;/span&gt;
mProjection &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;new&lt;/span&gt; String&lt;span style="color: #666666"&gt;[]&lt;/span&gt;
    &lt;span style="color: #666666"&gt;{&lt;/span&gt;
        Profile&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;_ID&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;
        Profile&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;DISPLAY_NAME_PRIMARY&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;
        Profile&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;LOOKUP_KEY&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;
        Profile&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;PHOTO_THUMBNAIL_URI&lt;/span&gt;
    &lt;span style="color: #666666"&gt;};&lt;/span&gt;

&lt;span style="color: #008800; font-style: italic"&gt;// Retrieves the profile from the Contacts Provider&lt;/span&gt;
mProfileCursor &lt;span style="color: #666666"&gt;=&lt;/span&gt; getContentResolver&lt;span style="color: #666666"&gt;().&lt;/span&gt;&lt;span style="color: #BB4444"&gt;query&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;
                Profile&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CONTENT_URI&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;
                mProjection &lt;span style="color: #666666"&gt;,&lt;/span&gt;
                &lt;span style="color: #AA22FF; font-weight: bold"&gt;null&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;
                &lt;span style="color: #AA22FF; font-weight: bold"&gt;null&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;
                &lt;span style="color: #AA22FF; font-weight: bold"&gt;null&lt;/span&gt;&lt;span style="color: #666666"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="contacts-provider"&gt;Contacts Provider元数据&lt;/h3&gt;
&lt;p&gt;Contacts Provider管理了本地的所有联系人数据，追踪他们的状态。这些元数据就是为了实现这些功能所需要的。这些元数据保存在RawContacts，Contacts, Data等表格记录里，同时还保存在&lt;code&gt;ContactsContract.Settings&lt;/code&gt;和&lt;code&gt;ContactsContract.SyncState&lt;/code&gt;表里。下面汇总了这些元数据的位置及其作用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表名称&lt;/th&gt;
&lt;th&gt;字段名称&lt;/th&gt;
&lt;th&gt;字段值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ContactsContract.RawContacts&lt;/td&gt;
&lt;td&gt;DIRTY&lt;/td&gt;
&lt;td&gt;0: 数据没变化；1: 上次同步以来数据变化了&lt;/td&gt;
&lt;td&gt;这个数据由Contact Provider维护。当用户修改记录时，这个值自动变为1；而当同步适配器修改记录时，在其修改数据的URI上，会带上&lt;code&gt;CALLER_IS_SYNCADAPTER&lt;/code&gt;参数，以表示是同步适配器修改的，不需要标记为脏数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ContactsContract.RawContacts&lt;/td&gt;
&lt;td&gt;VERSION&lt;/td&gt;
&lt;td&gt;数据的版本&lt;/td&gt;
&lt;td&gt;当RawContacts表里的记录数据改变时，Contacts Provider自动增加这个值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ContactsContract.Data&lt;/td&gt;
&lt;td&gt;DATA_VERSION&lt;/td&gt;
&lt;td&gt;数据的版本&lt;/td&gt;
&lt;td&gt;当Data表里的记录数据改变时，Contacts Provider自动增加这个值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ContactsContract.RawContacts&lt;/td&gt;
&lt;td&gt;SOURCE_ID&lt;/td&gt;
&lt;td&gt;字符串，用来唯一标识这个记录来自哪个帐户的。&lt;/td&gt;
&lt;td&gt;当同步适配器添加记录时，这个字段必须设置为服务器端针对这个记录的唯一标识。当设备端用户添加记录时，这个字段为空，这样就告诉同步适配器这个字段是用户新增的，必须在服务器端新建一条记录，并用这条记录的SOURCE_ID值来更新用户添加的这条记录。特别地，这个字段必须在一个帐户里保持全局唯一性，且必须在同步过程中保持不变。即同步前后，这个字段需要标识出相同的记录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ContactsContract.Groups&lt;/td&gt;
&lt;td&gt;GROUP_VISIBLE&lt;/td&gt;
&lt;td&gt;0: 属于这个值的记录在应用程序里不可见；1: 这个组的联系人可见&lt;/td&gt;
&lt;td&gt;这个字段可以让服务端设置组的可见性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ContactsContract.Settings&lt;/td&gt;
&lt;td&gt;UNGROUPED_VISIBLE&lt;/td&gt;
&lt;td&gt;0: 未分组的联系人不可见；1: 未分组的联系人可见&lt;/td&gt;
&lt;td&gt;默认情况下，未分组的联系人是不可见的。通过修改&lt;code&gt;ContactsContract.Settings&lt;/code&gt;表里的这个字段，可以设置应用程序显示未分组的联系人。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ContactsContract.SyncState&lt;/td&gt;
&lt;td&gt;所有字段&lt;/td&gt;
&lt;td&gt;使用这个表来保存同步适配器的元数据&lt;/td&gt;
&lt;td&gt;用这个表格来保存同步后的状态信息以及所有和同步相关的数据，比如时间戳等。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="contacts-provider_1"&gt;读写Contacts Provider&lt;/h2&gt;
&lt;p&gt;本节内容描述如何访问Contacts Provider的数据，主要集中在下面几个话题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;联系人记录查询&lt;/li&gt;
&lt;li&gt;分批修改数据&lt;/li&gt;
&lt;li&gt;通过Intent来获取或修改记录&lt;/li&gt;
&lt;li&gt;数据完整性检查&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过同步适配器修改联系人数据将在下面的章节中单独描述。&lt;/p&gt;
&lt;h3 id="_10"&gt;查询记录&lt;/h3&gt;
&lt;p&gt;因为Contacts Provider数据是按照三个核心表(Contacts, RawContacts, Data)按照层次结构组织起来的，应用程序经常需要获取一个联系人的所有信息，这就需要从这三个表里里去联合查询。比如从Contacts表里找到一个记录，然后根据Contacts._ID从RawContacts表里关联RawContacts.CONTACT_ID去查询与这个Contacts记录关联的RawContacts记录。接着，再根据找到的关联的RawContacts记录的RawContacts._ID的值从Data表里，根据Data.RAW_CONTACTS_ID去查询所有的关联记录。再把这些记录组合起来，最后得到了一个完整的联系人信息。为了达成这个目的，Contact Provider提供了&lt;em&gt;ContactsContract.Contacts.Entity&lt;/em&gt;类来实现这个功能，自动实现了这些表的联合查询。&lt;/p&gt;
&lt;p&gt;一个entity表是从Contacts, RawContacts, Data三个表里把关联的记录合并起来，从中选择一些列来组合起来的。当从entity表里查询数据时，需要提供一个感兴趣的字段列表(projection)，查询结果是一个游标(cursor)，里面包含一个个联系人的所有信息数据。例如，指定一个联系人的名字，查询出这个联系人的所有电子邮件，那么你将得到包含一行数据的游标，这行数据里有名字以及多个电子邮件的数据。&lt;/p&gt;
&lt;p&gt;entity表让查询操作更简单。你可以一次从不同的表里获取出联系人的所有信息。而不需要先从父表里查询数据，得到ID，再根据ID去子表里查询。而且，Contacts Provider把这些联合查询操作在一个事务里完成，这样保证了查询到的数据的一致性。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;一个entity一般没有包含Contacts表及其子表的所有字段，如果试图访问这些不在entity表里的字段，会有异常抛出。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;下面的代码演示了如何从entity里获取记录数据。一个联系人应用程序一般有个列表显示联系人，点击后显示这个记录的详细信息，下面的代码是显示详细信息的一部分代码。即根据联系人的ID去获取所有的联系人信息。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;    &lt;span style="color: #008800; font-style: italic"&gt;/*&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * Appends the entity path to the URI. In the case of the Contacts Provider, the&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * expected URI is content://com.google.contacts/#/entity (# is the ID value).&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     */&lt;/span&gt;
    mContactUri &lt;span style="color: #666666"&gt;=&lt;/span&gt; Uri&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withAppendedPath&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;
            mContactUri&lt;span style="color: #666666"&gt;,&lt;/span&gt;
            ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Contacts&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Entity&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CONTENT_DIRECTORY&lt;/span&gt;&lt;span style="color: #666666"&gt;);&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// Initializes the loader identified by LOADER_ID.&lt;/span&gt;
    getLoaderManager&lt;span style="color: #666666"&gt;().&lt;/span&gt;&lt;span style="color: #BB4444"&gt;initLoader&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;
            LOADER_ID&lt;span style="color: #666666"&gt;,&lt;/span&gt;  &lt;span style="color: #008800; font-style: italic"&gt;// The identifier of the loader to initialize&lt;/span&gt;
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;null&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;       &lt;span style="color: #008800; font-style: italic"&gt;// Arguments for the loader (in this case, none)&lt;/span&gt;
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;this&lt;/span&gt;&lt;span style="color: #666666"&gt;);&lt;/span&gt;      &lt;span style="color: #008800; font-style: italic"&gt;// The context of the activity&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// Creates a new cursor adapter to attach to the list view&lt;/span&gt;
    mCursorAdapter &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;new&lt;/span&gt; SimpleCursorAdapter&lt;span style="color: #666666"&gt;(&lt;/span&gt;
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;this&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;                        &lt;span style="color: #008800; font-style: italic"&gt;// the context of the activity&lt;/span&gt;
            R&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;layout&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;detail_list_item&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;   &lt;span style="color: #008800; font-style: italic"&gt;// the view item containing the detail widgets&lt;/span&gt;
            mCursor&lt;span style="color: #666666"&gt;,&lt;/span&gt;                     &lt;span style="color: #008800; font-style: italic"&gt;// the backing cursor&lt;/span&gt;
            mFromColumns&lt;span style="color: #666666"&gt;,&lt;/span&gt;                &lt;span style="color: #008800; font-style: italic"&gt;// the columns in the cursor that provide the data&lt;/span&gt;
            mToViews&lt;span style="color: #666666"&gt;,&lt;/span&gt;                    &lt;span style="color: #008800; font-style: italic"&gt;// the views in the view item that display the data&lt;/span&gt;
            &lt;span style="color: #666666"&gt;0);&lt;/span&gt;                          &lt;span style="color: #008800; font-style: italic"&gt;// flags&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// Sets the ListView&amp;#39;s backing adapter.&lt;/span&gt;
    mRawContactList&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;setAdapter&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;mCursorAdapter&lt;span style="color: #666666"&gt;);&lt;/span&gt;
    &lt;span style="color: #666666"&gt;...&lt;/span&gt;
&lt;span style="color: #AA22FF"&gt;@Override&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;public&lt;/span&gt; Loader&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;Cursor&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #00A000"&gt;onCreateLoader&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;&lt;span style="color: #00BB00; font-weight: bold"&gt;int&lt;/span&gt; id&lt;span style="color: #666666"&gt;,&lt;/span&gt; Bundle args&lt;span style="color: #666666"&gt;)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;/*&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * Sets the columns to retrieve.&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * RAW_CONTACT_ID is included to identify the raw contact associated with the data row.&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * DATA1 contains the first column in the data row (usually the most important one).&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * MIMETYPE indicates the type of data in the data row.&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     */&lt;/span&gt;
    String&lt;span style="color: #666666"&gt;[]&lt;/span&gt; projection &lt;span style="color: #666666"&gt;=&lt;/span&gt;
        &lt;span style="color: #666666"&gt;{&lt;/span&gt;
            ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Contacts&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Entity&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;RAW_CONTACT_ID&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;
            ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Contacts&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Entity&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;DATA1&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;
            ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Contacts&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Entity&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;MIMETYPE&lt;/span&gt;
        &lt;span style="color: #666666"&gt;};&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;/*&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * Sorts the retrieved cursor by raw contact id, to keep all data rows for a single raw&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * contact collated together.&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     */&lt;/span&gt;
    String sortOrder &lt;span style="color: #666666"&gt;=&lt;/span&gt;
            ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Contacts&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Entity&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;RAW_CONTACT_ID&lt;/span&gt; &lt;span style="color: #666666"&gt;+&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;&amp;quot; ASC&amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;;&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;/*&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * Returns a new CursorLoader. The arguments are similar to&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * ContentResolver.query(), except for the Context argument, which supplies the location of&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * the ContentResolver to use.&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     */&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;new&lt;/span&gt; CursorLoader&lt;span style="color: #666666"&gt;(&lt;/span&gt;
            getApplicationContext&lt;span style="color: #666666"&gt;(),&lt;/span&gt;  &lt;span style="color: #008800; font-style: italic"&gt;// The activity&amp;#39;s context&lt;/span&gt;
            mContactUri&lt;span style="color: #666666"&gt;,&lt;/span&gt;              &lt;span style="color: #008800; font-style: italic"&gt;// The entity content URI for a single contact&lt;/span&gt;
            projection&lt;span style="color: #666666"&gt;,&lt;/span&gt;               &lt;span style="color: #008800; font-style: italic"&gt;// The columns to retrieve&lt;/span&gt;
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;null&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;                     &lt;span style="color: #008800; font-style: italic"&gt;// Retrieve all the raw contacts and their data rows.&lt;/span&gt;
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;null&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;                     &lt;span style="color: #008800; font-style: italic"&gt;//&lt;/span&gt;
            sortOrder&lt;span style="color: #666666"&gt;);&lt;/span&gt;               &lt;span style="color: #008800; font-style: italic"&gt;// Sort by the raw contact ID.&lt;/span&gt;
&lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当数据加载结束，LoaderManager 会调用 Activity 的 onLoadFinish() 回调函数。这个回调函数的参数之一是 Cursor 对象，它包含了查询的结果集。应用程序可以从 Cursor 对象里获取数据并显示出来。&lt;/p&gt;
&lt;h3 id="_11"&gt;批量操作&lt;/h3&gt;
&lt;p&gt;在操作电话数据的增加，删除，修改时，尽量使用批量操作，通过创建一个 ArrayList 列表，列表里放 ContactProviderOperation 类的实例，最后再调用 ContentResolver.applyPatch() 方法来执行批量操作。Contact Provider 将把一次 applyPatch() 里的所有操作当成一个事务来执行，这样你的修改就不会造成数据不一致性。新建一个电话本记录时，批量操作也会把插入 RawContact 表里的数据和插入 Data 表里的数据放在一个事务里执行，确保数据的一致性。&lt;/p&gt;
&lt;h4 id="_12"&gt;释放点&lt;/h4&gt;
&lt;p&gt;当指操作包含大量的操作时，执行起来虽然不会阻塞 UI 纯种，但系统整体很繁忙，会阻塞其它的进程。这样就会导致用户体验下降。一个解决方法是把所有操作通过合理的安排，放进几个独立的 ArrayList 对象里，同时为了不阻塞其他进程，可以在操作之间放一个&lt;strong&gt;释放点&lt;/strong&gt;，释放点也是一个 ContentProviderOperation 实例，它的 isyieldAllowed() 会返回 true 。当 Contact Provider 执行这些操作时，遇到释放点后，它会停止事务，暂停操作，以便让其他程序运行。等到 Contact Provider 再次运行时，它将创建新的事务从上次暂停的地方继续执行操作。&lt;/p&gt;
&lt;p&gt;释放点会导致在一批操作被分隔成多个事务。正因为如此，你需要把释放点放在一批相关数据操作的结尾处。比如，你需要把释放点放在添加 RawContact 记录和添加相应的 Data 记录之后。以确保释放点之间的操作的数据一致性。&lt;/p&gt;
&lt;p&gt;释放点之间也是一个原子操作单元。所有在释放点之间的操作要么全部成功要么全部失败。如果没有设置释放点，那么整个批量操作都将作为一个原子操作，要么全部成功要么全部失败。使用释放点可以避免让系统性能受到挑战，同时又兼顾了数据操作的原子性。&lt;/p&gt;
&lt;h4 id="_13"&gt;反向引用&lt;/h4&gt;
&lt;p&gt;当你把向 RawContact 里插入一条记录，以及把其相应的数据插入到 Data 表里作为一个批量操作时，你需要把 Data 表里的 RAW_CONTACT_ID 的值填成 RawContact 表里新插入的记录的 ID 值。而由于你还没有让 Contact Provider 去执行这个批量操作，即记录还没有在 RawContact 里生成，它的 ID 值是不可用的。为了解决这个问题， ContentProviderOperation.Builder 类提供了 withValueBackReference() 方法，用来让前一个操作的返回值作为当前操作的某个字段的值。&lt;/p&gt;
&lt;p&gt;withValueBackReference() 方法有两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;key&lt;br /&gt;
  键值对里的键值，它的值必须是要引用前一个操作返回值作为当前字段值的字段名称&lt;/li&gt;
&lt;li&gt;previousResult&lt;br /&gt;
  applyPatch() 函数返回的 ContentProviderResult 实例数组的索引值，这个索引值从0开始计数。当一个批量操作被 applyPatch() 执行时，每个操作都会有个返回值，其值是一个 ContentProviderResult 实例，通过数组组织起来返回。previousResult 是这个返回数组的索引值，用这个索引值获取到 ContentProviderResult，并把结果保存在由 key 指定的当前操作的字段上。这样就允许我们在插入 Data 表时，把其 RAW_CONTACT_ID 的值作为反向引用，引用之前的插入 RawContact 操作的返回值上。appyPatch() 调用时，其结果数组一次性被创建，数组的大小就是操作的个数。结果数组的值全部被设置为 null。所以，当反向引用一个还未执行的操作的结果上时， withValueBackReference() 会抛出一个异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的代码演示如何向 raw contact 和 data 表里利用反向引用批量地插入数据。这个代码在 ContactManager 例子里。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;/**&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt; * Creates a contact entry from the current UI values in the account named by mSelectedAccount.&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt; */&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;protected&lt;/span&gt; &lt;span style="color: #00BB00; font-weight: bold"&gt;void&lt;/span&gt; &lt;span style="color: #00A000"&gt;createContactEntry&lt;/span&gt;&lt;span style="color: #666666"&gt;()&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
    &lt;span style="color: #008800; font-style: italic"&gt;// Get values from UI&lt;/span&gt;
    String name &lt;span style="color: #666666"&gt;=&lt;/span&gt; mContactNameEditText&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getText&lt;/span&gt;&lt;span style="color: #666666"&gt;().&lt;/span&gt;&lt;span style="color: #BB4444"&gt;toString&lt;/span&gt;&lt;span style="color: #666666"&gt;();&lt;/span&gt;
    String phone &lt;span style="color: #666666"&gt;=&lt;/span&gt; mContactPhoneEditText&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getText&lt;/span&gt;&lt;span style="color: #666666"&gt;().&lt;/span&gt;&lt;span style="color: #BB4444"&gt;toString&lt;/span&gt;&lt;span style="color: #666666"&gt;();&lt;/span&gt;
    String email &lt;span style="color: #666666"&gt;=&lt;/span&gt; mContactEmailEditText&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getText&lt;/span&gt;&lt;span style="color: #666666"&gt;().&lt;/span&gt;&lt;span style="color: #BB4444"&gt;toString&lt;/span&gt;&lt;span style="color: #666666"&gt;();&lt;/span&gt;
    &lt;span style="color: #00BB00; font-weight: bold"&gt;int&lt;/span&gt; phoneType &lt;span style="color: #666666"&gt;=&lt;/span&gt; mContactPhoneTypes&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;get&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;
            mContactPhoneTypeSpinner&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getSelectedItemPosition&lt;/span&gt;&lt;span style="color: #666666"&gt;());&lt;/span&gt;
    &lt;span style="color: #00BB00; font-weight: bold"&gt;int&lt;/span&gt; emailType &lt;span style="color: #666666"&gt;=&lt;/span&gt; mContactEmailTypes&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;get&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;
            mContactEmailTypeSpinner&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getSelectedItemPosition&lt;/span&gt;&lt;span style="color: #666666"&gt;());;&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// Prepare contact creation request&lt;/span&gt;
    &lt;span style="color: #008800; font-style: italic"&gt;//&lt;/span&gt;
    &lt;span style="color: #008800; font-style: italic"&gt;// Note: We use RawContacts because this data must be associated with a particular account.&lt;/span&gt;
    &lt;span style="color: #008800; font-style: italic"&gt;//       The system will aggregate this with any other data for this contact and create a&lt;/span&gt;
    &lt;span style="color: #008800; font-style: italic"&gt;//       coresponding entry in the ContactsContract.Contacts provider for us.&lt;/span&gt;
    ArrayList&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;ContentProviderOperation&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt; ops &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;new&lt;/span&gt; ArrayList&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;ContentProviderOperation&lt;span style="color: #666666"&gt;&amp;gt;();&lt;/span&gt;
    ops&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;add&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContentProviderOperation&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;newInsert&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;RawContacts&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CONTENT_URI&lt;/span&gt;&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValue&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;RawContacts&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;ACCOUNT_TYPE&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; mSelectedAccount&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getType&lt;/span&gt;&lt;span style="color: #666666"&gt;())&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValue&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;RawContacts&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;ACCOUNT_NAME&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; mSelectedAccount&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getName&lt;/span&gt;&lt;span style="color: #666666"&gt;())&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;build&lt;/span&gt;&lt;span style="color: #666666"&gt;());&lt;/span&gt;
    ops&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;add&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContentProviderOperation&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;newInsert&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Data&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CONTENT_URI&lt;/span&gt;&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValueBackReference&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Data&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;RAW_CONTACT_ID&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; &lt;span style="color: #666666"&gt;0)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValue&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Data&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;MIMETYPE&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;
                    ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CommonDataKinds&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;StructuredName&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CONTENT_ITEM_TYPE&lt;/span&gt;&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValue&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CommonDataKinds&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;StructuredName&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;DISPLAY_NAME&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; name&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;build&lt;/span&gt;&lt;span style="color: #666666"&gt;());&lt;/span&gt;
    ops&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;add&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContentProviderOperation&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;newInsert&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Data&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CONTENT_URI&lt;/span&gt;&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValueBackReference&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Data&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;RAW_CONTACT_ID&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; &lt;span style="color: #666666"&gt;0)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValue&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Data&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;MIMETYPE&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;
                    ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CommonDataKinds&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Phone&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CONTENT_ITEM_TYPE&lt;/span&gt;&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValue&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CommonDataKinds&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Phone&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;NUMBER&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; phone&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValue&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CommonDataKinds&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Phone&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;TYPE&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; phoneType&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;build&lt;/span&gt;&lt;span style="color: #666666"&gt;());&lt;/span&gt;
    ops&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;add&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContentProviderOperation&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;newInsert&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Data&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CONTENT_URI&lt;/span&gt;&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValueBackReference&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Data&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;RAW_CONTACT_ID&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; &lt;span style="color: #666666"&gt;0)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValue&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Data&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;MIMETYPE&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt;
                    ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CommonDataKinds&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Email&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CONTENT_ITEM_TYPE&lt;/span&gt;&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValue&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CommonDataKinds&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Email&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;DATA&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; email&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValue&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CommonDataKinds&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Email&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;TYPE&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; emailType&lt;span style="color: #666666"&gt;)&lt;/span&gt;
            &lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;build&lt;/span&gt;&lt;span style="color: #666666"&gt;());&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;/*&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * Demonstrates a yield point. At the end of this insert, the batch operation&amp;#39;s thread&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * will yield priority to other threads. Use after every set of operations that affect a&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     * single contact, to avoid degrading performance.&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;     */&lt;/span&gt;
    op&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withYieldAllowed&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;true&lt;/span&gt;&lt;span style="color: #666666"&gt;);&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// Ask the Contact provider to create a new contact&lt;/span&gt;
    Log&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;i&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;TAG&lt;span style="color: #666666"&gt;,&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;Selected account: &amp;quot;&lt;/span&gt; &lt;span style="color: #666666"&gt;+&lt;/span&gt; mSelectedAccount&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getName&lt;/span&gt;&lt;span style="color: #666666"&gt;()&lt;/span&gt; &lt;span style="color: #666666"&gt;+&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot; (&amp;quot;&lt;/span&gt; &lt;span style="color: #666666"&gt;+&lt;/span&gt;
            mSelectedAccount&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getType&lt;/span&gt;&lt;span style="color: #666666"&gt;()&lt;/span&gt; &lt;span style="color: #666666"&gt;+&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;);&lt;/span&gt;
    Log&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;i&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;TAG&lt;span style="color: #666666"&gt;,&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;Creating contact: &amp;quot;&lt;/span&gt; &lt;span style="color: #666666"&gt;+&lt;/span&gt; name&lt;span style="color: #666666"&gt;);&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;try&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
        getContentResolver&lt;span style="color: #666666"&gt;().&lt;/span&gt;&lt;span style="color: #BB4444"&gt;applyBatch&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ContactsContract&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;AUTHORITY&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; ops&lt;span style="color: #666666"&gt;);&lt;/span&gt;
    &lt;span style="color: #666666"&gt;}&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;catch&lt;/span&gt; &lt;span style="color: #666666"&gt;(&lt;/span&gt;Exception e&lt;span style="color: #666666"&gt;)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;
        &lt;span style="color: #008800; font-style: italic"&gt;// Display warning&lt;/span&gt;
        Context ctx &lt;span style="color: #666666"&gt;=&lt;/span&gt; getApplicationContext&lt;span style="color: #666666"&gt;();&lt;/span&gt;
        CharSequence txt &lt;span style="color: #666666"&gt;=&lt;/span&gt; getString&lt;span style="color: #666666"&gt;(&lt;/span&gt;R&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;string&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;contactCreationFailure&lt;/span&gt;&lt;span style="color: #666666"&gt;);&lt;/span&gt;
        &lt;span style="color: #00BB00; font-weight: bold"&gt;int&lt;/span&gt; duration &lt;span style="color: #666666"&gt;=&lt;/span&gt; Toast&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;LENGTH_SHORT&lt;/span&gt;&lt;span style="color: #666666"&gt;;&lt;/span&gt;
        Toast toast &lt;span style="color: #666666"&gt;=&lt;/span&gt; Toast&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;makeText&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;ctx&lt;span style="color: #666666"&gt;,&lt;/span&gt; txt&lt;span style="color: #666666"&gt;,&lt;/span&gt; duration&lt;span style="color: #666666"&gt;);&lt;/span&gt;
        toast&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;show&lt;/span&gt;&lt;span style="color: #666666"&gt;();&lt;/span&gt;

        &lt;span style="color: #008800; font-style: italic"&gt;// Log exception&lt;/span&gt;
        Log&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;e&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;TAG&lt;span style="color: #666666"&gt;,&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;Exceptoin encoutered while inserting contact: &amp;quot;&lt;/span&gt; &lt;span style="color: #666666"&gt;+&lt;/span&gt; e&lt;span style="color: #666666"&gt;);&lt;/span&gt;
    &lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;LINE 6 - 12 从编辑框里获取名字，电话，邮件以及电话类型和邮件类型。&lt;/li&gt;
&lt;li&gt;LINE 19 - 23 构建一个操作，这个操作向 RawContact 插入一条记录。然后将这个操作放在批量操作列表里。记住，这个操作的索引值是 0 。&lt;/li&gt;
&lt;li&gt;LINE 24 - 43 构建三个操作，分别向 Data 表里插入名字，电话和邮件。在这三个操作时，每个操作对 RAW_CONTACT_ID 的处理都使用了反向引用的原理，引用索引值为 0，即插入 RawContact 这个操作的返回值作为 Data 表里 RAW_CONTACT_ID 的值。&lt;/li&gt;
&lt;li&gt;LINE 50 插入一个释放点。当 Contact Provider 执行到这里时可以把CPU释放出来给别的进程执行。&lt;/li&gt;
&lt;li&gt;LINE 57 把这个批量操作列表提交给 Contact Provider 作为一个事务来执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;批量操作也可以用来&lt;strong&gt;优化并发控制&lt;/strong&gt;，它让一个事务执行时不用对数据库加锁。要使用这个方法，你可以执行这个事务，然后检查其它的修改是否同时发生了。如果发现数据不一致，则回滚整个事务，然后重试。&lt;/p&gt;
&lt;p&gt;优化并发控制对手机设备特别有用，因为手机设备大部分情况下只有一个用户在使用，同时并发操作数据库的情景比较少。因为没有用锁来控制数据操作，所以不需要花时间来请求锁和释放锁，这样整个系统性能会比较好。要使用&lt;strong&gt;优化并发控制&lt;/strong&gt;来修改一行 RawContact 的数据，可以用下面的步骤来进行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取 RawContact 的数据时，把 VERSION 字段也一并获取出来&lt;/li&gt;
&lt;li&gt;使用 newAssertQuery(Uri) 静态方法来创建 ContentProviderOperation.Builder 实例，其 Uri 参数使用 RawContacts.CONTENT_URI 加 RawContact._ID组合起来。&lt;/li&gt;
&lt;li&gt;对创建出来的 ContentProviderOperation.Builder 实例，使用 withValue() 来和步骤 1 获取出来的 VERSION 字段值进行比较。&lt;/li&gt;
&lt;li&gt;对同一个 ContentProviderOperation.Builder 实例，使用 withExpectedCount() 来保证获得出来的记录有且只有一条。&lt;/li&gt;
&lt;li&gt;调用 build() 方法来创建 ContentProviderOperation 实例，并把它添加到批量操作列表的第一项。&lt;/li&gt;
&lt;li&gt;调用 applyPatch() 来执行这个事务。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果一个潜在的修改在你获取数据和修改数据之间发生，那么 VERSION 值将会自动递增，这样步骤 4 的断言动作就会失败，从而整个事务都会回退。这样你可以选择重试或其它操作，总之数据会保持一致。下面的代码演示如何使用 CursorLoader 来创建包含&lt;strong&gt;断言&lt;/strong&gt;的 ContentProviderOperation 实例。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;/*&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt; * The application uses CursorLoader to query the raw contacts table. The system calls this method&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt; * when the load is finished.&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt; */&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;public&lt;/span&gt; &lt;span style="color: #00BB00; font-weight: bold"&gt;void&lt;/span&gt; &lt;span style="color: #00A000"&gt;onLoadFinished&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;Loader&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;Cursor&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt; loader&lt;span style="color: #666666"&gt;,&lt;/span&gt; Cursor cursor&lt;span style="color: #666666"&gt;)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// Gets the raw contact&amp;#39;s _ID and VERSION values&lt;/span&gt;
    mRawContactID &lt;span style="color: #666666"&gt;=&lt;/span&gt; cursor&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getLong&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;cursor&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getColumnIndex&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;BaseColumns&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;_ID&lt;/span&gt;&lt;span style="color: #666666"&gt;));&lt;/span&gt;
    mVersion &lt;span style="color: #666666"&gt;=&lt;/span&gt; cursor&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getInt&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;cursor&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;getColumnIndex&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;SyncColumns&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;VERSION&lt;/span&gt;&lt;span style="color: #666666"&gt;));&lt;/span&gt;
&lt;span style="color: #666666"&gt;}&lt;/span&gt;

&lt;span style="color: #666666"&gt;...&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// Sets up a Uri for the assert operation&lt;/span&gt;
    Uri rawContactUri &lt;span style="color: #666666"&gt;=&lt;/span&gt; ContentUris&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withAppendedId&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;RawContacts&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;CONTENT_URI&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; mRawContactID&lt;span style="color: #666666"&gt;);&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// Creates a builder for the assert operation&lt;/span&gt;
    ContentProviderOperation&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;Builder&lt;/span&gt; assertOp &lt;span style="color: #666666"&gt;=&lt;/span&gt; ContentProviderOperation&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;netAssertQuery&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;rawContactUri&lt;span style="color: #666666"&gt;);&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// Adds the assertions to the assert operation: checks the version and count of rows tested&lt;/span&gt;
    assertOp&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withValue&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;SyncColumns&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;VERSION&lt;/span&gt;&lt;span style="color: #666666"&gt;,&lt;/span&gt; mVersion&lt;span style="color: #666666"&gt;);&lt;/span&gt;
    assertOp&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;withExpectedCount&lt;/span&gt;&lt;span style="color: #666666"&gt;(1);&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// Creates an ArrayList to hold the ContentProviderOperation objects&lt;/span&gt;
    ArrayList ops &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;new&lt;/span&gt; ArrayList&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;ContentProviderOperationg&lt;span style="color: #666666"&gt;&amp;gt;;&lt;/span&gt;

    ops&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;add&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;assertOp&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;build&lt;/span&gt;&lt;span style="color: #666666"&gt;());&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// You would add the rest of your batch operations to &amp;quot;ops&amp;quot; here&lt;/span&gt;

    &lt;span style="color: #666666"&gt;...&lt;/span&gt;

    &lt;span style="color: #008800; font-style: italic"&gt;// Applies the batch. If the assert fails, an Exception is thrown&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;try&lt;/span&gt;
        &lt;span style="color: #666666"&gt;{&lt;/span&gt;
            ContentProviderResult&lt;span style="color: #666666"&gt;[]&lt;/span&gt; results &lt;span style="color: #666666"&gt;=&lt;/span&gt;
                    getContentResolver&lt;span style="color: #666666"&gt;().&lt;/span&gt;&lt;span style="color: #BB4444"&gt;applyBatch&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;AUTHORITY&lt;span style="color: #666666"&gt;,&lt;/span&gt; ops&lt;span style="color: #666666"&gt;);&lt;/span&gt;

        &lt;span style="color: #666666"&gt;}&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;catch&lt;/span&gt; &lt;span style="color: #666666"&gt;(&lt;/span&gt;OperationApplicationException e&lt;span style="color: #666666"&gt;)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;

            &lt;span style="color: #008800; font-style: italic"&gt;// Actions you want to take if the assert operation fails go here&lt;/span&gt;
        &lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_14"&gt;结语&lt;/h2&gt;
&lt;p&gt;联系人的数据结构特别复杂。把握住了本文介绍的这几个核心数据结构及操作。基本上原电话本就会有一个全面的了解。下一篇关于电话本的文章，我们将结合 Android 的示例程序 SampleSyncAdapter 来介绍如何做一个电话本同步服务器以及如何在手机端添加一个同步适配器来同步自己的电话本数据。&lt;/p&gt;</summary><category term="android"></category><category term="contacts"></category><category term="contacts provider"></category></entry><entry><title>Android应用性能调试</title><link href="http://blog.kamidox.com/android-performance-debug-tools.html" rel="alternate"></link><updated>2014-11-18T23:30:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-11-18:android-performance-debug-tools.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;开篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;性能问题汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;性能调试工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gpu"&gt;GPU呈现模式分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gpu_1"&gt;调试GPU过度绘制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#method-profiling"&gt;Method Profiling工具&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;刷新时间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#listviewviewholder"&gt;ListView的ViewHolder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;一些技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;结束语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;开篇&lt;/h2&gt;
&lt;p&gt;关于Android性能方面，不能不读&lt;a href="http://www.curious-creature.org/docs/android-performance-case-study-1.html"&gt;这篇文章&lt;/a&gt;。作者是GOOGLE员工，同时也是个摄影爱好者。本文就是通过阅读这篇文章，结合Android 4.4平台和自身实践总结出来的，个人认为对Android应用程序性能优化较有帮助的一些工具及使用示例。不足之处欢迎指正。&lt;/p&gt;
&lt;h2 id="_2"&gt;性能问题汇总&lt;/h2&gt;
&lt;p&gt;性能问题总的来说，就是反映慢。实际上，从图形学意义来讲，就是帧率低。性能问题最终可以归纳成两类问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;布局不合理导致过度绘制。&lt;br /&gt;
   重绘(Over Draw)是指屏幕上的一个象素点被画了多次，比如一个图片按钮(ImageButton)要先按出背景，再画出按钮上的图片，这就是重绘的概念。过度重绘是指有由于布局不合理导致一些不必要的重绘，比如一个窗口多有层背景，那么在渲染的时候，就会一层一层地画上去，上面的背景覆盖掉下而把背景。这个时候我们可以把下面的背景去掉。只画上层的背景，从而提高刷新速度。&lt;/li&gt;
&lt;li&gt;函数调用不合理导致每帧的刷新之间CPU花了太长的时间。&lt;br /&gt;
   比如每次刷新时，或者处理点击事件时，都去大量地读写文件。对于这种问题，要么使用缓存减少文件读取次数。如果不得不读，可能就要考虑使用异步加载的方式来确保界面刷新，数据加载完填充数据的方式来优化性能和用户体验。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;性能调试工具&lt;/h2&gt;
&lt;p&gt;Android的开发者选项里以及ADT/monitor提供了大量性能调试工具来调试上述性能问题。本文重点介绍三个工具：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GPU呈现模式分析 -&amp;gt; 在adb shell dumpsys gfxinfo中&lt;br /&gt;
   这个在开发者选项的&lt;strong&gt;监控&lt;/strong&gt;里面。可以从GPU刷新的角度分析我们的刷新帧率问题。&lt;/li&gt;
&lt;li&gt;调试GPU过度绘制 -&amp;gt; 显示过度重绘区域&lt;br /&gt;
   这个在开发者选项的&lt;strong&gt;硬件加速渲染&lt;/strong&gt;里面。这个可以查看一些界面的布局不合理导致的过度绘制的性能问题。&lt;/li&gt;
&lt;li&gt;Method Profiling工具&lt;br /&gt;
   这个在DDMS/monitor里可以找到，这个工具可以从虚拟机层面抓取每个函数及其调用的函数的运行时间，统计运行次数等功能。是分析性能问题的绝佳工具。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="gpu"&gt;GPU呈现模式分析&lt;/h2&gt;
&lt;p&gt;GPU呈现模式分析可以从GPU层面上分析我们的刷新效率。使用这个工具可以用来发现有没有刷新帧率过低的问题。&lt;/p&gt;
&lt;p&gt;首先，在开发者模式里打开&lt;strong&gt;GPU呈现模式分析&lt;/strong&gt;菜单，在弹出式菜单里选择&lt;strong&gt;在adb shell dumpsys gfxinfo中&lt;/strong&gt;选项。打开这个选项后，系统会为每个窗口记录最近128帧的刷新时间。&lt;/p&gt;
&lt;p&gt;接着，手机连接电脑，确保adb可用。然后运行你要调试的应用程序做一些必要的操作之后，运行下面的命令在抓取GPU刷新的LOG：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;adb shell dumpsys gfxinfo com.android.soundrecorder &amp;gt; soundrecorder_gfxinfo_1.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中&lt;em&gt;com.android.soundrecorder&lt;/em&gt;是要分析的应用的包名称；&lt;em&gt;soundrecorder_gfxinfo_1.log&lt;/em&gt;是抓取出来的LOG保存位置。&lt;/p&gt;
&lt;p&gt;接着，打开LOG文件&lt;em&gt;soundrecorder_gfxinfo_1.log&lt;/em&gt;，找到&lt;strong&gt;Profile data in ms:&lt;/strong&gt;那节，可以看到类似下面的数据：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;com.android.soundrecorder/com.android.soundrecorder.SoundRecorder/android.view.ViewRootImpl@41db6d18
Draw    Process Execute
4.38    6.49    0.87
0.65    5.69    0.84
4.40    7.82    3.10
2.64    4.62    0.92
...     ...     ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中有三种类型的数据数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Draw是在java里构建显示列表所花的时间，这个表示花在&lt;code&gt;View.onDraw(Canvas canvas)&lt;/code&gt;里的时间&lt;/li&gt;
&lt;li&gt;Process是android的2D渲染器执行Draw所构建出来的显示列表所花的时间，一个View的结构层次越复杂，就有越多的渲染命令需要被执行，就会花越多的时间&lt;/li&gt;
&lt;li&gt;Execute是发送一帧显示数据给GPU的合成器所花的时间，这部分时间一般较短且较固定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述的描述比较抽象，我们从代码层面来看这三个数据的含义：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;android.view.HardwareRender$GlRenderer.draw()&lt;/code&gt;函数抛开无关代码后，只剩下两行：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;@Override&lt;/span&gt;
&lt;span style="color: #00BB00; font-weight: bold"&gt;void&lt;/span&gt; &lt;span style="color: #00A000"&gt;draw&lt;/span&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;View view&lt;span style="color: #666666"&gt;,&lt;/span&gt; View&lt;span style="color: #666666"&gt;.&lt;/span&gt;&lt;span style="color: #BB4444"&gt;AttachInfo&lt;/span&gt; attachInfo&lt;span style="color: #666666"&gt;,&lt;/span&gt; HardwareDrawCallbacks callbacks&lt;span style="color: #666666"&gt;,&lt;/span&gt; Rect dirty&lt;span style="color: #666666"&gt;)&lt;/span&gt; &lt;span style="color: #666666"&gt;{&lt;/span&gt;

    &lt;span style="color: #666666"&gt;...&lt;/span&gt;

    DisplayList displayList &lt;span style="color: #666666"&gt;=&lt;/span&gt; buildDisplayList&lt;span style="color: #666666"&gt;(&lt;/span&gt;view&lt;span style="color: #666666"&gt;,&lt;/span&gt; canvas&lt;span style="color: #666666"&gt;);&lt;/span&gt;

    &lt;span style="color: #666666"&gt;...&lt;/span&gt;

    status &lt;span style="color: #666666"&gt;|=&lt;/span&gt; drawDisplayList&lt;span style="color: #666666"&gt;(&lt;/span&gt;attachInfo&lt;span style="color: #666666"&gt;,&lt;/span&gt; canvas&lt;span style="color: #666666"&gt;,&lt;/span&gt; displayList&lt;span style="color: #666666"&gt;,&lt;/span&gt; status&lt;span style="color: #666666"&gt;);&lt;/span&gt;

    &lt;span style="color: #666666"&gt;...&lt;/span&gt;
&lt;span style="color: #666666"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Line 6: 这个就是Draw的时间，&lt;code&gt;buildDisplayList()&lt;/code&gt;最终会调用&lt;code&gt;View.getDisplayList()&lt;/code&gt;，而后者就是从View树里从根部开始遍历所有的子View，并且依次调用每个View的&lt;code&gt;View.onDraw()&lt;/code&gt;方法把控件都画在画布上。这里，每个View都独立地画在一个Canvas上。&lt;br /&gt;
Line 10: 这个就是Process的时间，&lt;code&gt;drawDisplayList()&lt;/code&gt;会调用&lt;code&gt;android.view.GLE20Canvas.drawDisplayList()&lt;/code&gt;函数来把DisplayList合并起来。即Draw的结果是一个DisplayList，Process要做的就是把这个DisplayList合并起来。&lt;/p&gt;
&lt;p&gt;有了上面的分析，我们就清楚了这三个数据的含义，要减少Draw的时间，就要去减少控件层次结构和个数，同时优化每个控件的onDraw函数。要减少Process时间，就去减少控件层次结构和个数以及一些复杂的效果，如半透明之类的。而Execute的时间基本不受软件控制，可以排除在优化对象之外。&lt;/p&gt;
&lt;p&gt;接下来，回到我们抓到的LOG数据&lt;em&gt;soundrecorder_gfxinfo_1.log&lt;/em&gt;里面。我们把这三个数据拷贝到excel里，做一个柱状图(Stacked Column)来直观地观察一下GPU的刷新时间。&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/soundrecorder_gfxinfo_1_stacked_column.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看出来，一帧的刷新时间大部分都小于16ms，部分帧超过16ms。除了这个数据外，我们也可以算一下Draw和Process的平均时间，计算这个时间是为了量化对比优化前后的性能指标。我们可以精确地计算出性能提升了多少个百分点。针对本次抓到的LOG，我们计算出来的平均时间如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Draw平均时间：3.926ms&lt;/li&gt;
&lt;li&gt;Process平均时间：7.262ms&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;16ms的含义&lt;/p&gt;
&lt;p&gt;一般情况下，如果能保证60fps的刷新帧率，那么人眼看起来就会觉得很流畅。这样1000 / 60大概就是16ms。所以需要保证一帧的刷新时间小于16ms就能保证流畅度。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="gpu_1"&gt;调试GPU过度绘制&lt;/h2&gt;
&lt;p&gt;GPU呈现模式分析让我们了解GPU刷新，并且能知道帧率能不能达到60fps。还能算出Draw和Process平均时间供对比分析，但对怎么样优化就不明确了。这样我们就需要GPU过度绘制工具来帮忙。&lt;/p&gt;
&lt;p&gt;首先，在开发者模式里关闭之前打开的&lt;strong&gt;GPU呈现模式分析&lt;/strong&gt;，然后打开&lt;strong&gt;调试GPU过度绘制&lt;/strong&gt;，选择&lt;strong&gt;显示过度重绘区域&lt;/strong&gt;。这样就会看到界面会画出花花绿绿的背景。这些不同颜色的背景就是用来指示出过度重绘的程度的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;背景颜色&lt;/th&gt;
&lt;th&gt;表示的含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;无颜色&lt;/td&gt;
&lt;td&gt;表示没有重绘，即一个象素点只被绘制了1次。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;蓝色&lt;/td&gt;
&lt;td&gt;表示重绘了1次，即一个象素点被绘制了2次。屏幕上如果有大块的的蓝色区域是可以接受的，但如果整个屏幕都是蓝色的，那就需要优化了，可以去掉一层。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;绿色&lt;/td&gt;
&lt;td&gt;表示重绘了2次，即一个象素点被绘制了3次。中等面积的绿色区域是可以接受的，不过最好引起警惕，去看一下能不能优化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;淡红色&lt;/td&gt;
&lt;td&gt;表示重绘了3次，即一个象素绘制了4次。很小的淡红色区域是可以接受的，其他情况就需要去优化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;深红色&lt;/td&gt;
&lt;td&gt;表示重绘了4次以上。这个不正确的，必须进行优化。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们可以打开录音机模块，看一下录音机这个模块在优化之前的GPU过度绘制显示图片：&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/recorder_1.png" /&gt; &lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/recorder_list_1.png" /&gt;&lt;/p&gt;
&lt;p&gt;录音主界面可以看出两个明显的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整个背景都是蓝色的。这个应该可以优化，去掉一层。&lt;/li&gt;
&lt;li&gt;底部区域是绿色的，被重绘了2次，需要分析一下是否可以优化。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;录音列表界面也可以看出一个问题：底部区域是蓝色的，重绘了2次，可以想办法优化。&lt;/p&gt;
&lt;p&gt;我们以录音主界面为例，看一下它的布局文件：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span style="color: #BB4444"&gt;xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;
    &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;
    &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;
    &lt;span style="color: #BB4444"&gt;android:orientation=&amp;quot;vertical&amp;quot;&lt;/span&gt;
    &lt;span style="color: #BB4444"&gt;android:background=&amp;quot;@drawable/main_bg&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&lt;/span&gt;

    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;RelativeLayout&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@+id/timerViewLayout&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;123dip&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&lt;/span&gt;

        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;ImageButton&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@+id/listButtons&amp;quot;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;android:layout_alignParentTop=&amp;quot;true&amp;quot;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;android:layout_alignParentRight=&amp;quot;true&amp;quot;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;android:src=&amp;quot;@drawable/record_ic_recordlist&amp;quot;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;android:background=&amp;quot;@null&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;TextView&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@+id/stateMessage1&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_toLeftOf=&amp;quot;@+id/listButtons&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_alignParentTop=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_alignParentLeft=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_marginTop=&amp;quot;15dip&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_marginLeft=&amp;quot;45dip&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:gravity=&amp;quot;center&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;style=&amp;quot;@android:style/TextAppearance.Small.Inverse&amp;quot;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;TextView&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@+id/timerView&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:textSize=&amp;quot;60sp&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_centerHorizontal=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_alignParentBottom=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;style=&amp;quot;@android:style/TextAppearance.Large.Inverse&amp;quot;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;

    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;com.android.soundrecorder.VUMeter&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@+id/uvMeter&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;0dip&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_weight=&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;RelativeLayout&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;150dip&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:background=&amp;quot;@drawable/op_bar_bg&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&lt;/span&gt;

        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;ImageButton&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@+id/recordButton&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt; 
            &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_centerInParent=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:src=&amp;quot;@drawable/record_btn_record&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:background=&amp;quot;@null&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;TextView&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@+id/stopButton&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:textSize=&amp;quot;14sp&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:textColor=&amp;quot;#CCCCCC&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:text=&amp;quot;@string/accept&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_alignParentRight=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_centerVertical=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:singleLine=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:gravity=&amp;quot;center&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_marginRight=&amp;quot;25dip&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:clickable=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:background=&amp;quot;@drawable/record_btn_complete&amp;quot;&lt;/span&gt;
             &lt;span style="color: #008000; font-weight: bold"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;LINE 5：主界面有个主背景图片&lt;code&gt;@drawable/main_bg&lt;/code&gt;，这是个全屏的背景图片。加上窗口背景图片，这块实际上有完全叠加起来的两层背景。我们可以优化去掉一层背景。&lt;br /&gt;
LINE 48：底部区域也有个背景图片&lt;code&gt;@drawable/op_bar_bg&lt;/code&gt;。这个实际上是多余的，可以去掉。&lt;/p&gt;
&lt;p&gt;优化措施：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去掉LINE 5及LINE 48的背景图片&lt;/li&gt;
&lt;li&gt;在录音Activity的&lt;code&gt;onCreate()&lt;/code&gt;方法设置窗口的背景图片&lt;code&gt;getWindow().setBackgroundDrawableResource(R.drawable.main_bg);&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;窗口背景图片&lt;/p&gt;
&lt;p&gt;定义在Theme里的窗口背景，在Activity启动的时候由系统创建并应用在Activity窗口里。所以在上面第2个优化步骤里。我们是直接把背景图片从布局文件里删除，移到Activity的窗口里。这样就省去了一层背景图片。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;再来看一下录音列表这个activity的布局文件：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span style="color: #BB4444"&gt;xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;
    &lt;span style="color: #BB4444"&gt;android:orientation=&amp;quot;vertical&amp;quot;&lt;/span&gt; 
    &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;fill_parent&amp;quot;&lt;/span&gt;
    &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;fill_parent&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&lt;/span&gt;

    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;FrameLayout&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;fill_parent&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;0dip&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_weight=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&lt;/span&gt;

        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;TextView&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@android:id/empty&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;fill_parent&amp;quot;&lt;/span&gt; 
            &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;fill_parent&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:gravity=&amp;quot;center|center&amp;quot;&lt;/span&gt; 
            &lt;span style="color: #BB4444"&gt;android:textSize=&amp;quot;18sp&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:text=&amp;quot;@string/list_empty&amp;quot;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;ListView&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@android:id/list&amp;quot;&lt;/span&gt; 
            &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;fill_parent&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt; 
            &lt;span style="color: #BB4444"&gt;android:gravity=&amp;quot;left|top&amp;quot;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/FrameLayout&amp;gt;&lt;/span&gt;

    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;View&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@+id/menuAnchor&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;1dip&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;5dip&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_gravity=&amp;quot;right&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:visibility=&amp;quot;invisible&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;/&amp;gt;&lt;/span&gt;&amp;quot;

    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;RelativeLayout&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@+id/bottomBarLayout&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;150dip&amp;quot;&lt;/span&gt;
        &lt;span style="color: #BB4444"&gt;android:background=&amp;quot;@drawable/op_bar_bg&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&lt;/span&gt;

        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;ImageButton&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@+id/recordButton&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt; 
            &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_centerInParent=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:src=&amp;quot;@drawable/record_btn_record&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:background=&amp;quot;@null&amp;quot;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;ImageButton&lt;/span&gt; &lt;span style="color: #BB4444"&gt;android:id=&amp;quot;@+id/optionButton&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt; 
            &lt;span style="color: #BB4444"&gt;android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_alignParentRight=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_centerVertical=&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:layout_marginRight=&amp;quot;25dip&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:src=&amp;quot;@drawable/recordlist_btn_more&amp;quot;&lt;/span&gt;
            &lt;span style="color: #BB4444"&gt;android:background=&amp;quot;@null&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;LINE 35：底部区域有个背景图片&lt;code&gt;android:background="@drawable/op_bar_bg&lt;/code&gt;，加上我们上面提到的窗口背景图片，所以底部区域这块实际上覆盖了两层背景。就是说这块背景会绘制2次，所以呈现了蓝色。&lt;/p&gt;
&lt;p&gt;优化措施：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LINE 7的FrameLayout我们给它加上一个白色的背景色。&lt;/li&gt;
&lt;li&gt;在录音列表Activity的&lt;code&gt;onCreate()&lt;/code&gt;方法里去掉窗口背景图片。&lt;code&gt;getWindow().setBackgroundDrawable(null)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优化之后，我们再看一下这两个窗口在优化前后的样子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/recorder_1.png" /&gt; &lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/recorder_2.png" /&gt; &lt;/p&gt;
&lt;p&gt;对比可以看得出来，录音主界面从原来是全屏蓝色，底部绿色变成背景全部无色。这样我们就省去了一层背景图片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/recorder_list_1.png" /&gt; &lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/recorder_list_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;而录音列表界面背景也变成无色的，即背景只画一次。&lt;/p&gt;
&lt;p&gt;优化之后，我们通过上面介绍的&lt;strong&gt;GPU呈现模式分析&lt;/strong&gt;再抓一次LOG，计算Draw和Process的平均时间分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Draw平均时间：3.566ms；优化之前是3.926ms&lt;/li&gt;
&lt;li&gt;Process平均时间：7.200ms；优化之前是7.262ms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上面定量来看，Draw性能大概提高了9.17%。而Process性能没有明显提高。这也是符合我们的预期的，因为我们只优化了画图部分，并没有优化布局的层次结构，所以Process不会提高。&lt;/p&gt;
&lt;h2 id="method-profiling"&gt;Method Profiling工具&lt;/h2&gt;
&lt;p&gt;上面介绍的工具用来调试布局不合理导致过度绘制，而Method Profiling工具则可以调试刷新之外的性能，比如响应用户点击事件时花了大量的时间读写文件之类的问题。&lt;/p&gt;
&lt;p&gt;首先，手机连接电脑，确保adb可用。打开ADT/monitor，打开&lt;strong&gt;device&lt;/strong&gt;窗口，选择要调试的应用程序，然后点击&lt;strong&gt;Start Method Profiling&lt;/strong&gt;开始抓取LOG。&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/soundrecorder_start_method_profiling.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;接着，操作手机运行你要优化性能的程序，在里面做适当的操作。操作完成后，点击&lt;strong&gt;Stop Method Profiling&lt;/strong&gt;按钮，会自动在临时目录保存一个trace文件，打开后大概如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/soundrecorder_main_method_profiling.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;一些关键数据的含义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Incl Cpu Time %&lt;/td&gt;
&lt;td&gt;函数自己及其调用的函数总共所占用CPU的时间占总时间的百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Incl Cpu Time&lt;/td&gt;
&lt;td&gt;函数自己及其调用的函数总共所占用CPU的时间，单位为ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Excl CPU Time %&lt;/td&gt;
&lt;td&gt;函数自己(不包含其调用的函数)运行时占用的CPU时间的百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Excl CPU Time&lt;/td&gt;
&lt;td&gt;函数自己(不包含其调用的函数)运行时占用的CPU时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Incl Real Time&lt;/td&gt;
&lt;td&gt;函数自己及其调用的函数总共所用的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Excl Real Time&lt;/td&gt;
&lt;td&gt;函数自己(不包含其调用的函数)运行时所用的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Calls + RecurCalls/Total&lt;/td&gt;
&lt;td&gt;在抓LOG这段时间内函数的调用的总次数，包含递归调用的次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cpu Time/Call&lt;/td&gt;
&lt;td&gt;函数调用一次所用的CPU时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Real Time/Call&lt;/td&gt;
&lt;td&gt;函数调用一次所用的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;CPU Time vs Real Time&lt;/p&gt;
&lt;p&gt;这两个时间有什么区别呢？简单地讲，CPU Time就是CPU真正在运行这个函数的代码所花的时间；而Real time是Wall time，即这个函数从开始进入到真正退出所花的时间。这两个时间为什么会不同呢？举个例子，假如一个函数读取文件，并处理文件里的文本内容。读取文件涉及到IO操作，比如打开文件，实际上打开文件时调用打开文件的这个函数所在线程会短时间进入SLEEP状态，即不占用CPU，但也不返回，而是等待底层真正文件打开成功后，退出SLEEP状态再返回。这个短时间的SLEEP状态是不计处CPU Time的，因为它不占用CPU。但是计入Real time，因为函数还没返回。所以两者必定满足下面的条件：CPU Time &amp;lt;= Real Time。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Method Profiling的信息量很大，可以挖掘很多很有意思的信息。下面列举一些信息来抛砖引玉。&lt;/p&gt;
&lt;h3 id="_4"&gt;刷新时间&lt;/h3&gt;
&lt;p&gt;我们可以用Method Profiling抓一个录音过程中的LOG文件。在ADT/monitor里可以看到上文我们提到Draw和Process的概念：&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/soundrecorder_GlRenderer.draw.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;在ADT/monitor里的信息可以看出，&lt;code&gt;android.view.HardwareRender$GlRenderer.draw()&lt;/code&gt;的&lt;strong&gt;Incl Cpu Time&lt;/strong&gt;总共占用CPU 3012.359ms，占总CPU时间的88.8%，在抓LOG的这段时间里，总共调用了85次，每次调用的CPU时间是35.440ms，Real time是45.637ms。而其Children里面，&lt;code&gt;GlRenderer.buildDisplayList()&lt;/code&gt;占用74.1%，这个实际上就是&lt;code&gt;View.onDraw()&lt;/code&gt;占用的时间总和。&lt;code&gt;GlRenderer.drawDisplayList()&lt;/code&gt;占用19.7%，这个就是合成DisplayList占用的时间。&lt;/p&gt;
&lt;p&gt;通过这些信息，我们知道我们抓的这段LOG里，CPU主要花费在界面刷新上（占了88.8%）。我们需要优化控件的&lt;code&gt;onDraw()&lt;/code&gt;方法来优化性能。&lt;/p&gt;
&lt;p&gt;继续往下看，我们可以看到录音控件里的&lt;code&gt;UVMeter.onDraw()&lt;/code&gt;方法占用了整个的CPU时间的61.8%。&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/soundrecorder_VUMeter.onDraw.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我们可以看出来&lt;code&gt;drawLine()&lt;/code&gt;函数CPU时间占用了44.8%，总共用时940.858ms，调用了15046次，每次调用需要用时0.063ms；从这些数据来看，我们优化的方向应该想办法减少&lt;code&gt;UVMeter.onDraw()&lt;/code&gt;里对&lt;code&gt;drawLine()&lt;/code&gt;的调用次数。&lt;code&gt;String.format()&lt;/code&gt;函数CPU时间占用了35.4%。可以用类似的方法来分析。&lt;/p&gt;
&lt;p&gt;接下来，就是深入&lt;code&gt;UVMeter.onDraw()&lt;/code&gt;方法的代码里，去看有没有办法减少&lt;code&gt;drawLine()&lt;/code&gt;和&lt;code&gt;String.format()&lt;/code&gt;函数的调用次数了。&lt;/p&gt;
&lt;h3 id="listviewviewholder"&gt;ListView的ViewHolder&lt;/h3&gt;
&lt;p&gt;在优化ListView的滚动效率时，我们经常会给每个Item一个ViewHolder避免重复创建View。我们抓一个打开录音列表Activity的Method Profiling LOG文件，从LOG文件里可以定量地看出来这个优化能节省多少时间。&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/soundrecorder_getView.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;从trace里可以看到，&lt;code&gt;getView()&lt;/code&gt;函数占总CPU时间的45.5%，每次调用平均CPU用时31.052ms。而其Children里的&lt;code&gt;LayoutInflater.inflate()&lt;/code&gt;占用CPU时间72.7%，总共调用11次，每次CPU用时52.971ms。ViewHolder就是为了避免重复调用&lt;code&gt;inflate()&lt;/code&gt;函数来创建View的。这样就可以为每个Item节省52.971ms。这是一个非常值得的优化项目。&lt;/p&gt;
&lt;p&gt;我们可以再录音列表里上下滚动来抓一个LOG来对比：&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMAGE" src="http://kamidox-blogs.qiniudn.com/soundrecorder_scroll_getView.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;从对比可知，&lt;code&gt;getView()&lt;/code&gt;占总CPU时间为12.8%，每次调用平均CPU时间为10.369ms。由此可见尽量减少调用&lt;code&gt;inflate()&lt;/code&gt;是优化性能的一个重要方法。同时要减少&lt;code&gt;inflate()&lt;/code&gt;函数的用时，可以通过简化View的布局层次结构来达到目的。&lt;/p&gt;
&lt;h3 id="_5"&gt;一些技巧&lt;/h3&gt;
&lt;p&gt;Method Profiling能看到的信息远不止这些。可以通过重点关注需要优化的性能瓶颈，有针对性地从Method Profiling Log里找到可优化的线索，一些有用的技巧总结如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;针对需要优化的性能问题抓取LOG&lt;br /&gt;
   比如需要优化滚动慢的问题，就只抓滚动的LOG，如果需要优化启动慢的问题，就只抓启动的LOG。这样才能有针对性地从LOG里找出可优化的线索。&lt;/li&gt;
&lt;li&gt;阅读LOG的时候，可以从上往下，按照CPU占用时间倒序来发现线索。针对framework里的一些函数如果不清楚其功能可以跳过。当看到应用里面的函数调用时，就需要深入去对比LOG和代码，来发现可优化的线索。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_6"&gt;结束语&lt;/h2&gt;
&lt;p&gt;性能问题是个复杂的问题。单靠这些调试工具不能完全解决问题，而应该在设计阶段就考虑性能问题。在优化阶段利用这些调试工具来优化细节，同时发现一些设计阶段没有发现的性能瓶颈问题。&lt;/p&gt;
&lt;p&gt;本文将录音机应用作为例子描述的一些log文件可以在&lt;a href="http://pan.baidu.com/s/1Gp5Xc"&gt;这里&lt;/a&gt;下载到。里面的文件说明如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sound_record_list_start.trace：启动录音列表的trace文件&lt;/li&gt;
&lt;li&gt;sound_record_list.trace：在录音列表里上下滚动的trace文件&lt;/li&gt;
&lt;li&gt;sound_recorder.trace：录音过程中的trace文件&lt;/li&gt;
&lt;li&gt;soundrecorder_gfxinfo_1.log：优化前的gfxinfo文件&lt;/li&gt;
&lt;li&gt;soundrecorder_gfxinfo_1.xlsx：优化前的gfxinfo文件制作出来的excel文件&lt;/li&gt;
&lt;li&gt;soundrecorder_gfxinfo_2.log：优化后的gfxinfo文件&lt;/li&gt;
&lt;li&gt;soundrecorder_gfxinfo_2.xlsx：优化后的gfxinfo文件制作出来的excel文件&lt;/li&gt;
&lt;/ul&gt;</summary><category term="android"></category></entry><entry><title>FlaskBB阅读笔记（二）</title><link href="http://blog.kamidox.com/flaskbb-notes-2.html" rel="alternate"></link><updated>2014-11-04T23:00:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-11-04:flaskbb-notes-2.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;开篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flask-script"&gt;Flask-Script用法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;创建命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;获取用户输入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;其它技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#managepy"&gt;manage.py源码分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;结束语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;开篇&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/sh4nks/flaskbb"&gt;FlaskBB&lt;/a&gt;是用Flask框架实现的一个轻量级的论坛社区软件，代码托管在GitHub上。本系列文章通过阅读FlaskBB的源代码来深入学习Flask框架，以及在一个产品级的Flask应用里的一些最佳实践规则。&lt;/p&gt;
&lt;p&gt;本文是这系列文章的第二遍。本文分析FlaskBB的脚本管理程序&lt;code&gt;manage.py&lt;/code&gt;的源码。基本上每个Flask程序都需要一个&lt;code&gt;manage.py&lt;/code&gt;，用户可以通过它来创建数据库，运行开发服务器的任务。在FlaskBB的&lt;code&gt;README.md&lt;/code&gt;里有下面一段话：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;* Create a virtualenv
* Install the dependencies
    * `pip install -r requirements.txt`
* Configuration (_adjust them accordingly to your needs_)
    * For development copy `flaskbb/configs/development.py.example` to `flaskbb/configs/development.py`
* Database creation
    * `python manage.py createall`
* Run the development server
    * `python manage.py runserver`
* Visit [localhost:8080](http://localhost:8080)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些指令是指导用户安装/运行FlaskBB论坛程序的。其中&lt;code&gt;python manage.py createall&lt;/code&gt;和&lt;code&gt;python manage.py runserver&lt;/code&gt;就是本文要介绍的主角，其中第一条命令用来创建一个测试数据库，第二条命令用来运行开发服务器。&lt;/p&gt;
&lt;p&gt;有了这些神器，从GitHub下载代码：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;cd&lt;/span&gt; ~
git clone https://github.com/sh4nks/flaskbb.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后创建virtualenv：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;cd&lt;/span&gt; ~/flaskbb
virtualenv .venv
&lt;span style="color: #AA22FF"&gt;source&lt;/span&gt; .venv/bin/activate
pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;拷贝配置文件：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;cp flaskbb/configs/development.py.example flaskbb/configs/development.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建数据库，并运行开发服务器：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;python manage.py createall
python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样打开&lt;a href="http://localhost:8080"&gt;localhost:8080&lt;/a&gt;即可看到FlaskBB运行出来的论坛网站了。&lt;/p&gt;
&lt;h2 id="flask-script"&gt;Flask-Script用法&lt;/h2&gt;
&lt;p&gt;要了解&lt;code&gt;manage.py&lt;/code&gt;的工作原理，必须先了解Flask-Script扩展模块的用法。在本系列第一篇文章中，我们简要介绍了Flask-Script的作用。其官方文档这样描述自己：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Flask-Script extension provides support for writing external scripts in Flask. This includes running a development server, a customised Python shell, scripts to set up your database, cronjobs, and other command-line tasks that belong outside the web application itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_2"&gt;创建命令&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;@command&lt;/code&gt;装饰器创建命令：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;flask.ext.script&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; Manager

app &lt;span style="color: #666666"&gt;=&lt;/span&gt; Flask(__name__)
&lt;span style="color: #008800; font-style: italic"&gt;# configure your app&lt;/span&gt;

manager &lt;span style="color: #666666"&gt;=&lt;/span&gt; Manager(app)

&lt;span style="color: #AA22FF"&gt;@manager.command&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;hello&lt;/span&gt;():
    &lt;span style="color: #BB4444"&gt;&amp;quot;Just say hello&amp;quot;&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;print&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;

&lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; __name__ &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:
    manager&lt;span style="color: #666666"&gt;.&lt;/span&gt;run()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这样就创建了一个&lt;code&gt;hello&lt;/code&gt;的命令，假设上述文件保存为&lt;code&gt;manage.py&lt;/code&gt;，则可以运行这个添加的命令：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #B8860B"&gt;$ &lt;/span&gt;python manage.py hello
&amp;gt; hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用&lt;code&gt;@option&lt;/code&gt;装饰器创建带参数的命令：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;@manager.option&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;#39;-n&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;--name&amp;#39;&lt;/span&gt;, dest&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, default&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;joe&amp;#39;&lt;/span&gt;)
&lt;span style="color: #AA22FF"&gt;@manager.option&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;#39;-u&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;--url&amp;#39;&lt;/span&gt;, dest&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;, default&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;)
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;hello&lt;/span&gt;(name, url):
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; url &lt;span style="color: #AA22FF; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;:
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;print&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, name
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;else&lt;/span&gt;:
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;print&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, name, &lt;span style="color: #BB4444"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;, url
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述命令可以这样调用：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #B8860B"&gt;$ &lt;/span&gt;python manage.py hello -n Joe -u reddit.com
&amp;gt; hello Joe from reddit.com
&lt;span style="color: #B8860B"&gt;$ &lt;/span&gt;python manage.py hello -n Joe
&amp;gt; hello Joe
&lt;span style="color: #B8860B"&gt;$ &lt;/span&gt;python manage.py hello --name Joey --url kamidox.com
&amp;gt; hello Joey from kamidox.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上，使用&lt;code&gt;@command&lt;/code&gt;装饰器也可以实现上述相同的带参数的命令，只是使用&lt;code&gt;@option&lt;/code&gt;可读性更好一点。&lt;/p&gt;
&lt;h3 id="_3"&gt;获取用户输入&lt;/h3&gt;
&lt;p&gt;在创建数据库时，需要和用户交互，输入数据库用户名密码等信息。我们可以借助prompt系列函数来获取用户的输入：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;flask.ext.script&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; Manager, prompt_bool

&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;myapp&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; app
&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;myapp.models&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; db

manager &lt;span style="color: #666666"&gt;=&lt;/span&gt; Manager(app)

&lt;span style="color: #AA22FF"&gt;@manager.command&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;dropdb&lt;/span&gt;():
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; prompt_bool(&lt;span style="color: #BB4444"&gt;&amp;quot;Are you sure you want to lose all your data&amp;quot;&lt;/span&gt;):
        db&lt;span style="color: #666666"&gt;.&lt;/span&gt;drop_all()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这个命令可以这样调用：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #B8860B"&gt;$ &lt;/span&gt;python manage.py dropdb
&amp;gt; Are you sure you want to lose all your data ? &lt;span style="color: #666666"&gt;[&lt;/span&gt;N&lt;span style="color: #666666"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Flask-Script还提供了&lt;code&gt;prompt_pass()&lt;/code&gt;，&lt;code&gt;prompt_choices()&lt;/code&gt;等不同形态的函数来获取用户输入信息。&lt;/p&gt;
&lt;h3 id="_4"&gt;其它技巧&lt;/h3&gt;
&lt;p&gt;不带任何参数运行&lt;code&gt;python manage.py&lt;/code&gt;会输出可用的命令列表：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;.venv&lt;span style="color: #666666"&gt;)&lt;/span&gt;kamidox@kamidox-laptop:~/code/flaskbb&lt;span style="color: #B8860B"&gt;$ &lt;/span&gt;python manage.py
usage: manage.py &lt;span style="color: #666666"&gt;[&lt;/span&gt;-?&lt;span style="color: #666666"&gt;]&lt;/span&gt;
                 &lt;span style="color: #666666"&gt;{&lt;/span&gt;shell,create_admin,db,createall,runserver,initflaskbb,initdb,dropdb&lt;span style="color: #666666"&gt;}&lt;/span&gt;
                 ...

positional arguments:
  &lt;span style="color: #666666"&gt;{&lt;/span&gt;shell,create_admin,db,createall,runserver,initflaskbb,initdb,dropdb&lt;span style="color: #666666"&gt;}&lt;/span&gt;
    shell               Runs a Python shell inside Flask application context.
    create_admin        Creates the admin user
    db                  Perform database migrations
    createall           Creates the database with some testing content. If you
                        &lt;span style="color: #AA22FF; font-weight: bold"&gt;do&lt;/span&gt; not want to drop or create the db add &lt;span style="color: #BB4444"&gt;&amp;#39;-c&amp;#39;&lt;/span&gt; &lt;span style="color: #666666"&gt;(&lt;/span&gt;to not
                        create the db&lt;span style="color: #666666"&gt;)&lt;/span&gt; and &lt;span style="color: #BB4444"&gt;&amp;#39;-d&amp;#39;&lt;/span&gt; &lt;span style="color: #666666"&gt;(&lt;/span&gt;to not drop the db&lt;span style="color: #666666"&gt;)&lt;/span&gt;
    runserver           Runs the Flask development server i.e. app.run&lt;span style="color: #666666"&gt;()&lt;/span&gt;
    initflaskbb         Initializes FlaskBB with all necessary data
    initdb              Creates the database.
    dropdb              Deletes the database

optional arguments:
  -?, --help            show this &lt;span style="color: #AA22FF"&gt;help &lt;/span&gt;message and &lt;span style="color: #AA22FF"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以针对特定命令获取其帮助信息：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #666666"&gt;(&lt;/span&gt;.venv&lt;span style="color: #666666"&gt;)&lt;/span&gt;kamidox@kamidox-laptop:~/code/flaskbb&lt;span style="color: #B8860B"&gt;$ &lt;/span&gt;python manage.py runserver --help
usage: manage.py runserver &lt;span style="color: #666666"&gt;[&lt;/span&gt;-?&lt;span style="color: #666666"&gt;]&lt;/span&gt; &lt;span style="color: #666666"&gt;[&lt;/span&gt;-h HOST&lt;span style="color: #666666"&gt;]&lt;/span&gt; &lt;span style="color: #666666"&gt;[&lt;/span&gt;-p PORT&lt;span style="color: #666666"&gt;]&lt;/span&gt; &lt;span style="color: #666666"&gt;[&lt;/span&gt;--threaded&lt;span style="color: #666666"&gt;]&lt;/span&gt;
                           &lt;span style="color: #666666"&gt;[&lt;/span&gt;--processes PROCESSES&lt;span style="color: #666666"&gt;]&lt;/span&gt; &lt;span style="color: #666666"&gt;[&lt;/span&gt;--passthrough-errors&lt;span style="color: #666666"&gt;]&lt;/span&gt; &lt;span style="color: #666666"&gt;[&lt;/span&gt;-d&lt;span style="color: #666666"&gt;]&lt;/span&gt;
                           &lt;span style="color: #666666"&gt;[&lt;/span&gt;-D&lt;span style="color: #666666"&gt;]&lt;/span&gt; &lt;span style="color: #666666"&gt;[&lt;/span&gt;-r&lt;span style="color: #666666"&gt;]&lt;/span&gt; &lt;span style="color: #666666"&gt;[&lt;/span&gt;-R&lt;span style="color: #666666"&gt;]&lt;/span&gt;

Runs the Flask development server i.e. app.run&lt;span style="color: #666666"&gt;()&lt;/span&gt;

optional arguments:
  -?, --help            show this &lt;span style="color: #AA22FF"&gt;help &lt;/span&gt;message and &lt;span style="color: #AA22FF"&gt;exit&lt;/span&gt;
  -h HOST, --host HOST
  -p PORT, --port PORT
  --threaded
  --processes PROCESSES
  --passthrough-errors
  -d, --debug           &lt;span style="color: #AA22FF"&gt;enable &lt;/span&gt;the Werkzeug debugger &lt;span style="color: #666666"&gt;(&lt;/span&gt;DO NOT use in production
                        code&lt;span style="color: #666666"&gt;)&lt;/span&gt;
  -D, --no-debug        disable the Werkzeug debugger
  -r, --reload          monitor Python files &lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt; changes &lt;span style="color: #666666"&gt;(&lt;/span&gt;not 100&lt;span style="color: #666666"&gt;{&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;const&amp;#39;&lt;/span&gt;:
                        True, &lt;span style="color: #BB4444"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;: &lt;span style="color: #BB4444"&gt;&amp;#39;monitor Python files for changes (not&lt;/span&gt;
&lt;span style="color: #BB4444"&gt;                        100% safe for production use)&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;option_strings&amp;#39;&lt;/span&gt;:
                        &lt;span style="color: #666666"&gt;[&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;-r&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;--reload&amp;#39;&lt;/span&gt;&lt;span style="color: #666666"&gt;]&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;dest&amp;#39;&lt;/span&gt;: &lt;span style="color: #BB4444"&gt;&amp;#39;use_reloader&amp;#39;&lt;/span&gt;,
                        &lt;span style="color: #BB4444"&gt;&amp;#39;required&amp;#39;&lt;/span&gt;: False, &lt;span style="color: #BB4444"&gt;&amp;#39;nargs&amp;#39;&lt;/span&gt;: 0, &lt;span style="color: #BB4444"&gt;&amp;#39;choices&amp;#39;&lt;/span&gt;: None,
                        &lt;span style="color: #BB4444"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;: None, &lt;span style="color: #BB4444"&gt;&amp;#39;prog&amp;#39;&lt;/span&gt;: &lt;span style="color: #BB4444"&gt;&amp;#39;manage.py runserver&amp;#39;&lt;/span&gt;,
                        &lt;span style="color: #BB4444"&gt;&amp;#39;container&amp;#39;&lt;/span&gt;: &amp;lt;argparse._ArgumentGroup object at
                        0xb609cd6c&amp;gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;: None, &lt;span style="color: #BB4444"&gt;&amp;#39;metavar&amp;#39;&lt;/span&gt;: None&lt;span style="color: #666666"&gt;}&lt;/span&gt;afe &lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt;
                        production use&lt;span style="color: #666666"&gt;)&lt;/span&gt;
  -R, --no-reload       &lt;span style="color: #AA22FF; font-weight: bold"&gt;do&lt;/span&gt; not monitor Python files &lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt; changes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多详细的用法可参阅&lt;a href="http://flask-script.readthedocs.org/"&gt;Flask-Script官方文档&lt;/a&gt;，如果翻墙不便，也可以从GitHub上下载Flask-Script源码，然后在docs自己编译生成html文档。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;cd&lt;/span&gt; ~/code
git clone https://github.com/smurfix/flask-script.git
&lt;span style="color: #AA22FF"&gt;cd &lt;/span&gt;docs
make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编译完成后，打开&lt;code&gt;docs/_build/html/index.html&lt;/code&gt;即可查阅Flask-Script文档了。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Sphinx&lt;/p&gt;
&lt;p&gt;如果编译提示出错，检查一下是否安装了&lt;a href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;。这是个用来生成优美的html文档的引擎。IBM DeveloperWorks有&lt;a href="http://www.ibm.com/developerworks/cn/opensource/os-sphinx-documentation/"&gt;一篇文章&lt;/a&gt;介绍了Sphinx的作用。感兴趣的朋友可以参考一下。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="managepy"&gt;manage.py源码分析&lt;/h2&gt;
&lt;p&gt;有了上面的背景知识，阅读&lt;code&gt;manage.py&lt;/code&gt;就很轻松了。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;@manager.option&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;#39;-u&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;--username&amp;#39;&lt;/span&gt;, dest&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;)
&lt;span style="color: #AA22FF"&gt;@manager.option&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;#39;-p&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;--password&amp;#39;&lt;/span&gt;, dest&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;)
&lt;span style="color: #AA22FF"&gt;@manager.option&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;#39;-e&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;--email&amp;#39;&lt;/span&gt;, dest&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;)
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;initflaskbb&lt;/span&gt;(username&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;, password&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;, email&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;):
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Initializes FlaskBB with all necessary data&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;logger&lt;span style="color: #666666"&gt;.&lt;/span&gt;info(&lt;span style="color: #BB4444"&gt;&amp;quot;Creating default data...&amp;quot;&lt;/span&gt;)
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;try&lt;/span&gt;:
        create_default_groups()
        create_default_settings()
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;except&lt;/span&gt; IntegrityError:
        app&lt;span style="color: #666666"&gt;.&lt;/span&gt;logger&lt;span style="color: #666666"&gt;.&lt;/span&gt;error(&lt;span style="color: #BB4444"&gt;&amp;quot;Couldn&amp;#39;t create the default data because it already &amp;quot;&lt;/span&gt;
                         &lt;span style="color: #BB4444"&gt;&amp;quot;exist!&amp;quot;&lt;/span&gt;)
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; prompt_bool(&lt;span style="color: #BB4444"&gt;&amp;quot;Do you want to recreate the database? (y/n)&amp;quot;&lt;/span&gt;):
            db&lt;span style="color: #666666"&gt;.&lt;/span&gt;session&lt;span style="color: #666666"&gt;.&lt;/span&gt;rollback()
            db&lt;span style="color: #666666"&gt;.&lt;/span&gt;drop_all()
            db&lt;span style="color: #666666"&gt;.&lt;/span&gt;create_all()
            create_default_groups()
            create_default_settings()
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;else&lt;/span&gt;:
            sys&lt;span style="color: #666666"&gt;.&lt;/span&gt;exit(&lt;span style="color: #666666"&gt;0&lt;/span&gt;)
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;except&lt;/span&gt; OperationalError:
        app&lt;span style="color: #666666"&gt;.&lt;/span&gt;logger&lt;span style="color: #666666"&gt;.&lt;/span&gt;error(&lt;span style="color: #BB4444"&gt;&amp;quot;No database found.&amp;quot;&lt;/span&gt;)
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; prompt_bool(&lt;span style="color: #BB4444"&gt;&amp;quot;Do you want to create the database now? (y/n)&amp;quot;&lt;/span&gt;):
            db&lt;span style="color: #666666"&gt;.&lt;/span&gt;session&lt;span style="color: #666666"&gt;.&lt;/span&gt;rollback()
            db&lt;span style="color: #666666"&gt;.&lt;/span&gt;create_all()
            create_default_groups()
            create_default_settings()
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;else&lt;/span&gt;:
            sys&lt;span style="color: #666666"&gt;.&lt;/span&gt;exit(&lt;span style="color: #666666"&gt;0&lt;/span&gt;)

    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;logger&lt;span style="color: #666666"&gt;.&lt;/span&gt;info(&lt;span style="color: #BB4444"&gt;&amp;quot;Creating admin user...&amp;quot;&lt;/span&gt;)
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; username &lt;span style="color: #AA22FF; font-weight: bold"&gt;and&lt;/span&gt; password &lt;span style="color: #AA22FF; font-weight: bold"&gt;and&lt;/span&gt; email:
        create_admin_user(username&lt;span style="color: #666666"&gt;=&lt;/span&gt;username, password&lt;span style="color: #666666"&gt;=&lt;/span&gt;password, email&lt;span style="color: #666666"&gt;=&lt;/span&gt;email)
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;else&lt;/span&gt;:
        create_admin()

    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;logger&lt;span style="color: #666666"&gt;.&lt;/span&gt;info(&lt;span style="color: #BB4444"&gt;&amp;quot;Creating welcome forum...&amp;quot;&lt;/span&gt;)
    create_welcome_forum()

    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;logger&lt;span style="color: #666666"&gt;.&lt;/span&gt;info(&lt;span style="color: #BB4444"&gt;&amp;quot;Congratulations! FlaskBB has been successfully installed&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;上面是&lt;code&gt;manage.py&lt;/code&gt;里&lt;code&gt;initflaskbb&lt;/code&gt;命令的代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line 1-4: 声明了&lt;code&gt;initflaskbb&lt;/code&gt;命令，并且带三个参数，分别是&lt;code&gt;username&lt;/code&gt;，&lt;code&gt;password&lt;/code&gt;，&lt;code&gt;email&lt;/code&gt;用来创建管理员用户&lt;/li&gt;
&lt;li&gt;Line 9-10: 创建论坛默认组和设置信息。具体后面分析应用程序的数据模型时再来深入分析。&lt;/li&gt;
&lt;li&gt;Line 11-14: 如果捕获到&lt;code&gt;IntegrityError&lt;/code&gt;异常，说明数据库中的相应数据已经存在，则用&lt;code&gt;prompt_bool&lt;/code&gt;来提示用户是否覆盖原有数据&lt;/li&gt;
&lt;li&gt;Line 22-24: 如何捕获到&lt;code&gt;OperationalError&lt;/code&gt;异常，说明数据库不存在，用&lt;code&gt;prompt_bool&lt;/code&gt;提示用户是否创建数据库&lt;/li&gt;
&lt;li&gt;Line 33-36: 创建管理员帐户&lt;/li&gt;
&lt;li&gt;Line 39: 创建默认的论坛板块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以通过运行下面的命令来初始化论坛数据：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;python manage.py initflaskbb -u admin -p admin -e admin@kamidox.com
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_5"&gt;结束语&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;manage.py&lt;/code&gt;主要通过Flask-Script扩展来实现开发，调试及部署过程中的数据库初始化以及一些交互调试功能，是程序必不可少的组成部分。&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category></entry><entry><title>FlaskBB阅读笔记（一）</title><link href="http://blog.kamidox.com/flaskbb-notes-1.html" rel="alternate"></link><updated>2014-11-02T23:25:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-11-02:flaskbb-notes-1.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;开篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#blueprint"&gt;Blueprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flaskbbflask"&gt;FlaskBB用到的Flask扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#jinja2"&gt;自定义的Jinja2过滤器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;向模板注入设置信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;更新用户在线信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;自定义错误处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#log"&gt;LOG配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;结束语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;开篇&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/sh4nks/flaskbb"&gt;FlaskBB&lt;/a&gt;是用Flask框架实现的一个轻量级的论坛社区软件，代码托管在GitHub上。本系列文章通过阅读FlaskBB的源代码来深入学习Flask框架，以及在一个产品级的Flask应用里的一些最佳实践规则。&lt;/p&gt;
&lt;p&gt;本文是这系列文章的第一遍。本文分析FlaskBB的主程序&lt;code&gt;app.py&lt;/code&gt;的源码。我们从&lt;code&gt;create_app()&lt;/code&gt;函数入手，分析FlaskBB的软件结构。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;create_app&lt;/span&gt;(config&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;):
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    Creates the app.&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #008800; font-style: italic"&gt;# Initialize the app&lt;/span&gt;
    app &lt;span style="color: #666666"&gt;=&lt;/span&gt; Flask(&lt;span style="color: #BB4444"&gt;&amp;quot;flaskbb&amp;quot;&lt;/span&gt;)

    &lt;span style="color: #008800; font-style: italic"&gt;# Use the default config and override it afterwards&lt;/span&gt;
    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config&lt;span style="color: #666666"&gt;.&lt;/span&gt;from_object(&lt;span style="color: #BB4444"&gt;&amp;#39;flaskbb.configs.default.DefaultConfig&amp;#39;&lt;/span&gt;)
    &lt;span style="color: #008800; font-style: italic"&gt;# Update the config&lt;/span&gt;
    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config&lt;span style="color: #666666"&gt;.&lt;/span&gt;from_object(config)
    &lt;span style="color: #008800; font-style: italic"&gt;# try to update the config via the environment variable&lt;/span&gt;
    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config&lt;span style="color: #666666"&gt;.&lt;/span&gt;from_envvar(&lt;span style="color: #BB4444"&gt;&amp;quot;FLASKBB_SETTINGS&amp;quot;&lt;/span&gt;, silent&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;)

    configure_blueprints(app)
    configure_extensions(app)
    configure_template_filters(app)
    configure_context_processors(app)
    configure_before_handlers(app)
    configure_errorhandlers(app)
    configure_logging(app)

    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; app
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_2"&gt;配置&lt;/h2&gt;
&lt;p&gt;FlaskBB使用下面典型的配置代码了加载应用程序的配置信息。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;# Use the default config and override it afterwards&lt;/span&gt;
app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config&lt;span style="color: #666666"&gt;.&lt;/span&gt;from_object(&lt;span style="color: #BB4444"&gt;&amp;#39;flaskbb.configs.default.DefaultConfig&amp;#39;&lt;/span&gt;)
&lt;span style="color: #008800; font-style: italic"&gt;# Update the config&lt;/span&gt;
app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config&lt;span style="color: #666666"&gt;.&lt;/span&gt;from_object(config)
&lt;span style="color: #008800; font-style: italic"&gt;# try to update the config via the environment variable&lt;/span&gt;
app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config&lt;span style="color: #666666"&gt;.&lt;/span&gt;from_envvar(&lt;span style="color: #BB4444"&gt;&amp;quot;FLASKBB_SETTINGS&amp;quot;&lt;/span&gt;, silent&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;Flask.config&lt;/code&gt;类是专门用来处理应用程序全局配置信息的。它类似python的&lt;code&gt;dict&lt;/code&gt;类，增加了一些导入配置的函数而已。其中&lt;code&gt;Flask.config.from_object()&lt;/code&gt;用来从一个python类里导入配置信息，需要注意的是，这个函数&lt;strong&gt;只导入大写的类成员变量&lt;/strong&gt;，小写的类成员函数是不导入的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Flask.config.from_envvar()&lt;/code&gt;用来从环境变量指定的文件中导入设置信息，比如上例中，可以设置&lt;code&gt;FLASKBB_SETTINGS&lt;/code&gt;的环境变量指向&lt;em&gt;/path/to/python/config/file.py&lt;/em&gt;，这样程序就会从这个文件里导入配置信息。&lt;/p&gt;
&lt;p&gt;需要注意的是，最后导入的配置信息可覆盖前面导入的信息。所以，一般会有三个层次：一是默认配置；二是应用程序创建时传入的参数；最后再从环境变量里导入。&lt;/p&gt;
&lt;p&gt;FlaskBB提供了不少配置信息，比如&lt;code&gt;SEND_LOGS&lt;/code&gt;表示是不是要把错误信息发送给网站管理员邮箱；&lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt;表示ORM数据库路径等等。具体参阅&lt;code&gt;flaskbb.configs.default.DefaultConfig&lt;/code&gt;类。&lt;/p&gt;
&lt;h2 id="blueprint"&gt;Blueprint&lt;/h2&gt;
&lt;p&gt;Blueprint是Flask提供的模块化设计组件。FlaskBB通过&lt;code&gt;configure_blueprints()&lt;/code&gt;来初始化Blueprint&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;configure_blueprints&lt;/span&gt;(app):
    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;register_blueprint(forum, url_prefix&lt;span style="color: #666666"&gt;=&lt;/span&gt;app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config[&lt;span style="color: #BB4444"&gt;&amp;quot;FORUM_URL_PREFIX&amp;quot;&lt;/span&gt;])
    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;register_blueprint(user, url_prefix&lt;span style="color: #666666"&gt;=&lt;/span&gt;app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config[&lt;span style="color: #BB4444"&gt;&amp;quot;USER_URL_PREFIX&amp;quot;&lt;/span&gt;])
    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;register_blueprint(auth, url_prefix&lt;span style="color: #666666"&gt;=&lt;/span&gt;app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config[&lt;span style="color: #BB4444"&gt;&amp;quot;AUTH_URL_PREFIX&amp;quot;&lt;/span&gt;])
    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;register_blueprint(management, url_prefix&lt;span style="color: #666666"&gt;=&lt;/span&gt;app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config[&lt;span style="color: #BB4444"&gt;&amp;quot;ADMIN_URL_PREFIX&amp;quot;&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;主要由四个Blueprint组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;forum&lt;br /&gt;
  论坛主模块，由&lt;code&gt;flaskbb.forum.views.forum&lt;/code&gt;Blueprint实现，默认其挂载的URL是&lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;user&lt;br /&gt;
  用户管理模块，由&lt;code&gt;flaskbb.user.views.user&lt;/code&gt;Blueprint实现，默认其挂载的URL是&lt;code&gt;/user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;auth&lt;br /&gt;
  鉴权模块，由&lt;code&gt;flaskbb.auth.views.auth&lt;/code&gt;Blueprint实现，默认其挂载的URL是&lt;code&gt;/auth&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;management&lt;br /&gt;
  后台管理模块，由&lt;code&gt;flaskbb.management.views.management&lt;/code&gt;Blueprint实现，默认其挂载的URL是&lt;code&gt;/admin&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="flaskbbflask"&gt;FlaskBB用到的Flask扩展&lt;/h2&gt;
&lt;p&gt;有大量的第三方开发者为Flask构架开发扩展，在&lt;a href="http://flask.pocoo.org/extensions/"&gt;这里&lt;/a&gt;可以找到官方收录的所有Flask扩展。FlaskBB通过&lt;code&gt;configure_extensions()&lt;/code&gt;函数来初始化用到的扩展。这些扩展的简要信息汇总如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://github.com/mitsuhiko/flask-sqlalchemy/"&gt;Flask-SQLAlchemy&lt;/a&gt;&lt;br /&gt;
  这是&lt;a href="http://www.sqlalchemy.org/"&gt;sqlalchemy&lt;/a&gt;的Flask扩展，提供SQL数据库和ORM访问。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/maxcountryman/flask-login/"&gt;Flask-Login&lt;/a&gt;&lt;br /&gt;
  这个扩展提供了用户会话管理。实现了一些通用的会话管理任务，如登录，登出，以及记录用户会话期间的状态数据等。&lt;/li&gt;
&lt;li&gt;&lt;a href="　http://github.com/mattupstate/flask-mail/"&gt;Flask-Mail&lt;/a&gt;&lt;br /&gt;
  这个扩展让Flask应用很容易地发送电子邮件，而且支持单元测试。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/thadeusb/flask-cache/"&gt;Flask-Cache&lt;/a&gt;&lt;br /&gt;
  给Flask程序提供Cache支持。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/mgood/flask-debugtoolbar/"&gt;Flask-DebugToolbar&lt;/a&gt;&lt;br /&gt;
  从Django移植过来的适用于Flask的调试器。主要用来调试Flask程序及性能。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rhyselsmore/flask-redis/"&gt;Flask-Redis&lt;/a&gt;&lt;br /&gt;
  给Flask程序添加&lt;a href="http://www.redis.cn/"&gt;Redis&lt;/a&gt;的扩展。Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/miguelgrinberg/Flask-Migrate"&gt;Flask-Migrate&lt;/a&gt;&lt;br /&gt;
  给Flask用的SQLAlchemy数据库迁移工具。比如，Flask应用的1.3版本在1.2版本的数据库的某个表里添加了一个字段，那么使用这个工具可以自动生成数据库迁移脚本，帮助使用1.2版本的用户把数据库从1.2版本升级到1.3版本。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sysr-q/flask-themes2"&gt;Flask-Theme2&lt;/a&gt;&lt;br /&gt;
  给Flask应用添加主题支持。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sh4nks/flask-plugins"&gt;Flask-Plugins&lt;/a&gt;&lt;br /&gt;
  和FlaskBB的作者是同一个人。提供更简单的插件管理。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gyllstromk/Flask-WhooshAlchemy"&gt;Flask-WhooshAlchemy&lt;/a&gt;&lt;br /&gt;
  这个扩展帮助Flask程序实现基于SQLAlchemy数据库内容的文本搜索和索引服务。正如扩展的名字，它是使用&lt;a href="https://bitbucket.org/mchaput/whoosh/wiki/Home"&gt;whoosh&lt;/a&gt;和SQLAlchemy的ORM结合起来实现广西内容的搜索和索引功能。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lepture/flask-wtf"&gt;Flask-WTF&lt;/a&gt;&lt;br /&gt;
  当你必须处理浏览器提交的表单数据时，视图代码很快会变得难以阅读。有一些库可以简化这个工作，其中之一便是WTForms。这个扩展让Flask使用更简单地集成WTForms，同时处理了CSRF(Cross-Site Rrequest Forgery，跨站请求伪造)，提供更好的安全性。还提供文件上传等功能。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/techniq/flask-script/"&gt;Flask-Script&lt;/a&gt;&lt;br /&gt;
  给Flask应用程序提供外部脚本支持。比如运行开发服务器，初始化数据库，等命令行相关的任务。对FlaskBB而言，&lt;code&gt;python manage.py runserver&lt;/code&gt;和&lt;code&gt;python manage.py createall&lt;/code&gt;等命令就是通过这个扩展实现的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="jinja2"&gt;自定义的Jinja2过滤器&lt;/h2&gt;
&lt;p&gt;Jinja2提供了&lt;a href="http://jinja.pocoo.org/docs/dev/api/#custom-filters"&gt;自定义过滤器&lt;/a&gt;的功能，可以在Jinja2模板里灵活使用。FlaskBB通过函数&lt;code&gt;configure_template_filters()&lt;/code&gt;定义了一系列过滤器，其中&lt;code&gt;is_online&lt;/code&gt;过滤器是这样定义的：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;app&lt;span style="color: #666666"&gt;.&lt;/span&gt;jinja_env&lt;span style="color: #666666"&gt;.&lt;/span&gt;filters[&lt;span style="color: #BB4444"&gt;&amp;#39;is_online&amp;#39;&lt;/span&gt;] &lt;span style="color: #666666"&gt;=&lt;/span&gt; is_online
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;过滤器就是一个简单的python函数，&lt;code&gt;is_online()&lt;/code&gt;函数定义在&lt;em&gt;flaskbb/utils/helper.py&lt;/em&gt;里：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;is_online&lt;/span&gt;(user):
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;A simple check to see if the user was online within a specified&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    time range&lt;/span&gt;

&lt;span style="color: #BB4444; font-style: italic"&gt;    :param user: The user who needs to be checked&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; user&lt;span style="color: #666666"&gt;.&lt;/span&gt;lastseen &lt;span style="color: #666666"&gt;&amp;gt;=&lt;/span&gt; time_diff()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这样，在Jinaja2模板&lt;em&gt;flaskbb/templates/user/profile.html&lt;/em&gt;里，就可以使用下面的代码来判断用户是否在线：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;{% if user|is_online %}
&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span style="color: #BB4444"&gt;class=&amp;quot;label label-success&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&lt;/span&gt;Online&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
{% else %}
&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span style="color: #BB4444"&gt;class=&amp;quot;label label-default&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&lt;/span&gt;Offline&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面Jinja2模板里&lt;code&gt;user|is_online&lt;/code&gt;脚本会导致&lt;code&gt;is_online(user)&lt;/code&gt;被调用来判断用户是否在线。&lt;/p&gt;
&lt;h2 id="_3"&gt;向模板注入设置信息&lt;/h2&gt;
&lt;p&gt;FlaskBB通过调用&lt;code&gt;configure_context_processors()&lt;/code&gt;向模板注入设置信息。代码如下：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;configure_context_processors&lt;/span&gt;(app):
&lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;Configures the context processors&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style="color: #AA22FF"&gt;@app.context_processor&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;inject_flaskbb_config&lt;/span&gt;():
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    Injects the ``flaskbb_config`` config variable into the templates.&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;dict&lt;/span&gt;(flaskbb_config&lt;span style="color: #666666"&gt;=&lt;/span&gt;flaskbb_config)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;使用&lt;code&gt;context_processor&lt;/code&gt;装饰器来装饰&lt;code&gt;inject_flaskbb_config()&lt;/code&gt;函数，这样这个函数会被Flask记录起来，每次要渲染模板时，会先调用这个函数更新一下模板上下文信息。这样，在模板里就可以访问这里注入的上下文信息。上下文处理器函数必须返回一个&lt;code&gt;dict&lt;/code&gt;实例。Flask官方文档对&lt;a href="http://flask.pocoo.org/docs/0.10/templating/#context-processors"&gt;context_processor&lt;/a&gt;有详细的描述。&lt;/p&gt;
&lt;p&gt;例如，返回的&lt;code&gt;dict&lt;/code&gt;里包含&amp;rsquo;name: kamidox&amp;rsquo;这样的值，则在Jinja2模板里可以直接用&lt;code&gt;{% name %}&lt;/code&gt;来访问&lt;code&gt;name&lt;/code&gt;变量，其值为&lt;code&gt;kamidox&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="_4"&gt;更新用户在线信息&lt;/h2&gt;
&lt;p&gt;FlaskBB通过&lt;code&gt;configure_before_handlers()&lt;/code&gt;函数来注册每个请求之前的动作，以记录用户的在线信息。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;configure_before_handlers&lt;/span&gt;(app):
&lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;Configures the before request handlers&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span style="color: #AA22FF"&gt;@app.before_request&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;update_lastseen&lt;/span&gt;():
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    Updates `lastseen` before every reguest if the user is authenticated&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; current_user&lt;span style="color: #666666"&gt;.&lt;/span&gt;is_authenticated():
        current_user&lt;span style="color: #666666"&gt;.&lt;/span&gt;lastseen &lt;span style="color: #666666"&gt;=&lt;/span&gt; datetime&lt;span style="color: #666666"&gt;.&lt;/span&gt;datetime&lt;span style="color: #666666"&gt;.&lt;/span&gt;utcnow()
        db&lt;span style="color: #666666"&gt;.&lt;/span&gt;session&lt;span style="color: #666666"&gt;.&lt;/span&gt;add(current_user)
        db&lt;span style="color: #666666"&gt;.&lt;/span&gt;session&lt;span style="color: #666666"&gt;.&lt;/span&gt;commit()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这里，&lt;code&gt;before_request&lt;/code&gt;装饰器将把&lt;code&gt;update_lastseen()&lt;/code&gt;函数注册进Flask，Flask在处理请求之前都会调用这个函数。FlaskBB使用这个机制来记录最后一次看到用户的时间。结合会话的超时机制，就可以判断用户是否在线。&lt;/p&gt;
&lt;h2 id="_5"&gt;自定义错误处理&lt;/h2&gt;
&lt;p&gt;通过&lt;code&gt;configure_errorhandlers()&lt;/code&gt;来实现自定义错误处理。其中，HTTP 403, 404及500的错误处理定义如下&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;configure_errorhandlers&lt;/span&gt;(app):
&lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;Configures the error handlers&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span style="color: #AA22FF"&gt;@app.errorhandler&lt;/span&gt;(&lt;span style="color: #666666"&gt;403&lt;/span&gt;)
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;forbidden_page&lt;/span&gt;(error):
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; render_template(&lt;span style="color: #BB4444"&gt;&amp;quot;errors/forbidden_page.html&amp;quot;&lt;/span&gt;), &lt;span style="color: #666666"&gt;403&lt;/span&gt;

&lt;span style="color: #AA22FF"&gt;@app.errorhandler&lt;/span&gt;(&lt;span style="color: #666666"&gt;404&lt;/span&gt;)
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;page_not_found&lt;/span&gt;(error):
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; render_template(&lt;span style="color: #BB4444"&gt;&amp;quot;errors/page_not_found.html&amp;quot;&lt;/span&gt;), &lt;span style="color: #666666"&gt;404&lt;/span&gt;

&lt;span style="color: #AA22FF"&gt;@app.errorhandler&lt;/span&gt;(&lt;span style="color: #666666"&gt;500&lt;/span&gt;)
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;server_error_page&lt;/span&gt;(error):
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; render_template(&lt;span style="color: #BB4444"&gt;&amp;quot;errors/server_error.html&amp;quot;&lt;/span&gt;), &lt;span style="color: #666666"&gt;500&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这样当发生这些http错误时，错误网页将从服务器返回自定义的错误网页，而不是浏览器客户端默认的错误页面。&lt;/p&gt;
&lt;h2 id="log"&gt;LOG配置&lt;/h2&gt;
&lt;p&gt;通过&lt;code&gt;configure_logging()&lt;/code&gt;来配置系统的LOG。FlaskBB的LOG主要保存在应用程序根目录下的&lt;em&gt;logs&lt;/em&gt;目录里，分两个文件保存，一个是INFO级别的LOG，另外一个是ERROR级别的LOG。同时还支持把ERROR级别的LOG通过邮件的方式发送给网站管理员。&lt;/p&gt;
&lt;p&gt;下面代码配置了INFO级别的LOG：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;logs_folder &lt;span style="color: #666666"&gt;=&lt;/span&gt; os&lt;span style="color: #666666"&gt;.&lt;/span&gt;path&lt;span style="color: #666666"&gt;.&lt;/span&gt;join(app&lt;span style="color: #666666"&gt;.&lt;/span&gt;root_path, os&lt;span style="color: #666666"&gt;.&lt;/span&gt;pardir, &lt;span style="color: #BB4444"&gt;&amp;quot;logs&amp;quot;&lt;/span&gt;)
formatter &lt;span style="color: #666666"&gt;=&lt;/span&gt; logging&lt;span style="color: #666666"&gt;.&lt;/span&gt;Formatter(
    &lt;span style="color: #BB4444"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%(asctime)s&lt;/span&gt;&lt;span style="color: #BB4444"&gt; &lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%(levelname)s&lt;/span&gt;&lt;span style="color: #BB4444"&gt;: &lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%(message)s&lt;/span&gt;&lt;span style="color: #BB4444"&gt; &amp;#39;&lt;/span&gt;
    &lt;span style="color: #BB4444"&gt;&amp;#39;[in &lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%(pathname)s&lt;/span&gt;&lt;span style="color: #BB4444"&gt;:&lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%(lineno)d&lt;/span&gt;&lt;span style="color: #BB4444"&gt;]&amp;#39;&lt;/span&gt;)

info_log &lt;span style="color: #666666"&gt;=&lt;/span&gt; os&lt;span style="color: #666666"&gt;.&lt;/span&gt;path&lt;span style="color: #666666"&gt;.&lt;/span&gt;join(logs_folder, app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config[&lt;span style="color: #BB4444"&gt;&amp;#39;INFO_LOG&amp;#39;&lt;/span&gt;])

info_file_handler &lt;span style="color: #666666"&gt;=&lt;/span&gt; logging&lt;span style="color: #666666"&gt;.&lt;/span&gt;handlers&lt;span style="color: #666666"&gt;.&lt;/span&gt;RotatingFileHandler(
    info_log,
    maxBytes&lt;span style="color: #666666"&gt;=100000&lt;/span&gt;,
    backupCount&lt;span style="color: #666666"&gt;=10&lt;/span&gt;
)

info_file_handler&lt;span style="color: #666666"&gt;.&lt;/span&gt;setLevel(logging&lt;span style="color: #666666"&gt;.&lt;/span&gt;INFO)
info_file_handler&lt;span style="color: #666666"&gt;.&lt;/span&gt;setFormatter(formatter)
app&lt;span style="color: #666666"&gt;.&lt;/span&gt;logger&lt;span style="color: #666666"&gt;.&lt;/span&gt;addHandler(info_file_handler)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;下面代码配置了通过邮件发送错误LOG给网站管理员：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;logging.handlers&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; SMTPHandler
&lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config[&lt;span style="color: #BB4444"&gt;&amp;quot;SEND_LOGS&amp;quot;&lt;/span&gt;]:
    mail_handler &lt;span style="color: #666666"&gt;=&lt;/span&gt; \
        SMTPHandler(app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config[&lt;span style="color: #BB4444"&gt;&amp;#39;MAIL_SERVER&amp;#39;&lt;/span&gt;],
                    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config[&lt;span style="color: #BB4444"&gt;&amp;#39;MAIL_DEFAULT_SENDER&amp;#39;&lt;/span&gt;],
                    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config[&lt;span style="color: #BB4444"&gt;&amp;#39;ADMINS&amp;#39;&lt;/span&gt;],
                    &lt;span style="color: #BB4444"&gt;&amp;#39;application error, no admins specified&amp;#39;&lt;/span&gt;,
                    (
                        app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config[&lt;span style="color: #BB4444"&gt;&amp;#39;MAIL_USERNAME&amp;#39;&lt;/span&gt;],
                        app&lt;span style="color: #666666"&gt;.&lt;/span&gt;config[&lt;span style="color: #BB4444"&gt;&amp;#39;MAIL_PASSWORD&amp;#39;&lt;/span&gt;],
                    ))

    mail_handler&lt;span style="color: #666666"&gt;.&lt;/span&gt;setLevel(logging&lt;span style="color: #666666"&gt;.&lt;/span&gt;ERROR)
    mail_handler&lt;span style="color: #666666"&gt;.&lt;/span&gt;setFormatter(formatter)
    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;logger&lt;span style="color: #666666"&gt;.&lt;/span&gt;addHandler(mail_handler)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_6"&gt;结束语&lt;/h2&gt;
&lt;p&gt;通过对主程序&lt;code&gt;app.py&lt;/code&gt;的代码分析，我们基本上知道了FlaskBB的主体框架，模块划分，用到的外部扩展等信息。下一篇将分模块深入阅读各个Blueprint模块的实现以及数据库设计方面的内容。&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category></entry><entry><title>使用Flask搭建一个流媒体服务器</title><link href="http://blog.kamidox.com/build-streaming-server-by-flask.html" rel="alternate"></link><updated>2014-10-28T23:25:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-10-28:build-streaming-server-by-flask.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;摘要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;理论基础&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;生成器函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multipart"&gt;Multipart应答&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;实现流媒体服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;模拟视频帧数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;连接硬件摄像头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;一些限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;摘要&lt;/h2&gt;
&lt;p&gt;收到前不久订阅的&lt;a href="http://www.pythonweekly.com/"&gt;PythonWeekly&lt;/a&gt;发过来的一个邮件通知，由&lt;a href="http://blog.miguelgrinberg.com/"&gt;Miguel&lt;/a&gt;写的一篇介绍如何使用Flask搭建一个流媒体服务器的文章，思路很新颖也很有意思。你可以点击&lt;a href="http://blog.miguelgrinberg.com/post/video-streaming-with-flask"&gt;这里&lt;/a&gt;阅读英文原文。或者跟随本文跟我一起体验一把搭建一个流媒体服务器的过程吧。&lt;/p&gt;
&lt;h2 id="_2"&gt;理论基础&lt;/h2&gt;
&lt;p&gt;流媒体有两大特点，一是数据量大。二是有实时性要求。针对这两个特点，我们必须把应答数据分块传输给客户端来实现流媒体服务器。这里我们用到了两个关键技术来实现流媒体服务器，我们使用生成器函数来把数据分块传送，Flask的&lt;code&gt;Response&lt;/code&gt;类本身对生成器函数有良好的支持。接着，我们使用&lt;strong&gt;Multipart&lt;/strong&gt;来组装一个HTTP应答。&lt;/p&gt;
&lt;h3 id="_3"&gt;生成器函数&lt;/h3&gt;
&lt;p&gt;生成器函数是可被打断和恢复的函数。其关键字是&lt;code&gt;yield&lt;/code&gt;，来看一个例子：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;gen&lt;/span&gt;():
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;yield&lt;/span&gt; &lt;span style="color: #666666"&gt;1&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;yield&lt;/span&gt; &lt;span style="color: #666666"&gt;2&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;yield&lt;/span&gt; &lt;span style="color: #666666"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码我们就定义了一个生成器函数，当生成器函数被调用时，它返回一个生成器迭代器，或直接叫生成器。通过不断地调用生成器的&lt;code&gt;next()&lt;/code&gt;方法来执行生成器函数体的代码，直到遇到异常为止。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #666666"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; g &lt;span style="color: #666666"&gt;=&lt;/span&gt; gen()
&lt;span style="color: #666666"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; g
&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;generator &lt;span style="color: #AA22FF"&gt;object&lt;/span&gt; gen at &lt;span style="color: #666666"&gt;0xb72330a4&amp;gt;&lt;/span&gt;
&lt;span style="color: #666666"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; g&lt;span style="color: #666666"&gt;.&lt;/span&gt;next()
&lt;span style="color: #666666"&gt;1&lt;/span&gt;
&lt;span style="color: #666666"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; g&lt;span style="color: #666666"&gt;.&lt;/span&gt;next()
&lt;span style="color: #666666"&gt;2&lt;/span&gt;
&lt;span style="color: #666666"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; g&lt;span style="color: #666666"&gt;.&lt;/span&gt;next()
&lt;span style="color: #666666"&gt;3&lt;/span&gt;
&lt;span style="color: #666666"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; g&lt;span style="color: #666666"&gt;.&lt;/span&gt;next()
Traceback (most recent call last):
  File &lt;span style="color: #BB4444"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span style="color: #666666"&gt;1&lt;/span&gt;, &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;module&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #D2413A; font-weight: bold"&gt;StopIteration&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上面的例子可以看到一个生成器函数可以返回多个结果。每当程序执行到&lt;code&gt;yield&lt;/code&gt;语句时，函数现场会被保留，同时返回一个值。Flask就是利用这个特性把应答数据通过生成器分块发送给客户端。&lt;/p&gt;
&lt;h3 id="multipart"&gt;Multipart应答&lt;/h3&gt;
&lt;p&gt;Multipart应答包含一个&lt;em&gt;multipart&lt;/em&gt;媒体类型，后面跟着多块独立的数据，每块数据有自己的&lt;em&gt;Content-Type&lt;/em&gt;，每块数据之间通过&lt;em&gt;boundary&lt;/em&gt;分隔。下面是一个例子：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;HTTP/1.1 200 OK
Content-Type: multipart/x-mixed-replace; boundary=frame

--frame
Content-Type: image/jpeg

&amp;lt;jpeg data here&amp;gt;
--frame
Content-Type: image/jpeg

&amp;lt;jpeg data here&amp;gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Multipart有多种不同的类型，针对流媒体，我们使用&lt;code&gt;multipart/x-mixed-replace&lt;/code&gt;。浏览器处理这种Multipart类型时，会使用当前的块数据替换之前的块数据。这刚好就是我们想要的流媒体的效果。我们可以把媒体的一帧数据打包为一个数据块，每块数据有自己的&lt;em&gt;Content-Type&lt;/em&gt;和可选的&lt;em&gt;Content-Length&lt;/em&gt;。浏览器逐帧替换，就实现了视频的播放功能。&lt;a href="http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html"&gt;RFC1341&lt;/a&gt;对Multipart媒体类型进行了详细的描述，有兴趣的朋友可移步参考。&lt;/p&gt;
&lt;h2 id="_4"&gt;实现流媒体服务器&lt;/h2&gt;
&lt;p&gt;上面介绍了实现流媒体服务器的理论知识。接下来我们使用这些知识来用Flask搭建一个流媒体服务器。&lt;/p&gt;
&lt;p&gt;有多种方法可以在浏览器里实现流媒体播放，和Flask配合较好的是使用&lt;a href="http://baike.baidu.com/view/4875263.htm"&gt;Motion JPEG&lt;/a&gt;的方法。简单地讲，就是把视频画面通过JPEG图片的方式，一帧一帧地发送给浏览器。这也是很多IP Camera使用的流媒体播放方式，它实时性很好，但视频效果不是很理想。因为Motion JPEG对视频的压缩效率太低了。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;flask&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; Flask, render_template, Response
&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;camera&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; Camera

app &lt;span style="color: #666666"&gt;=&lt;/span&gt; Flask(__name__)

&lt;span style="color: #AA22FF"&gt;@app.route&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;index&lt;/span&gt;():
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; render_template(&lt;span style="color: #BB4444"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;)

&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;gen&lt;/span&gt;(camera):
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;while&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;:
        frame &lt;span style="color: #666666"&gt;=&lt;/span&gt; camera&lt;span style="color: #666666"&gt;.&lt;/span&gt;get_frame()
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;yield&lt;/span&gt; (b&lt;span style="color: #BB4444"&gt;&amp;#39;--frame&lt;/span&gt;&lt;span style="color: #BB6622; font-weight: bold"&gt;\r\n&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;&lt;/span&gt;
               b&lt;span style="color: #BB4444"&gt;&amp;#39;Content-Type: image/jpeg&lt;/span&gt;&lt;span style="color: #BB6622; font-weight: bold"&gt;\r\n\r\n&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color: #666666"&gt;+&lt;/span&gt; frame &lt;span style="color: #666666"&gt;+&lt;/span&gt; b&lt;span style="color: #BB4444"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #BB6622; font-weight: bold"&gt;\r\n&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;&lt;/span&gt;)

&lt;span style="color: #AA22FF"&gt;@app.route&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;#39;/video_feed&amp;#39;&lt;/span&gt;)
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;video_feed&lt;/span&gt;():
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; Response(gen(Camera()),
                    mimetype&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;multipart/x-mixed-replace; boundary=frame&amp;#39;&lt;/span&gt;)

&lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; __name__ &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    app&lt;span style="color: #666666"&gt;.&lt;/span&gt;run(host&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;, debug&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这个Flask应用程序导入了一个&lt;code&gt;Camera&lt;/code&gt;类，这个类是为了持续不断地提供视频的帧数据的类。这个程序提供了两个服务路径，&lt;code&gt;/&lt;/code&gt;路径由&lt;code&gt;index.html&lt;/code&gt;模板提供服务，下面是它的内容：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Video Streaming Demonstration&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Video Streaming Demonstration&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;img&lt;/span&gt; &lt;span style="color: #BB4444"&gt;src=&amp;quot;{{ url_for(&amp;#39;video_feed&amp;#39;) }}&amp;quot;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;&amp;gt;&lt;/span&gt;
  &lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个非常简单的HTML网页。其中关键的是&lt;code&gt;img&lt;/code&gt;这个标签，它定义了一张图片元素，其URL是&lt;code&gt;/video_feed&lt;/code&gt;。从Flask应用程序代码的Line17-20可以知道，&lt;code&gt;/video_feed&lt;/code&gt;是由一个&lt;code&gt;video_feed()&lt;/code&gt;方法提供服务的，它返回的是一个multipart应答。这个应答的内容是由生成器函数&lt;code&gt;gen()&lt;/code&gt;提供的。而&lt;code&gt;gen()&lt;/code&gt;函数就是不停地从camera里获取一帧一帧的图片，并通过生成器返回给客户端。客户端浏览器在收到这个流媒体时，会在&lt;code&gt;img&lt;/code&gt;标签定义的图片里，逐帧地显示图片，这样一个视频就播放出来的。目前市面上绝大部分浏览器都支持这个功能。&lt;/p&gt;
&lt;h2 id="_5"&gt;模拟视频帧数据&lt;/h2&gt;
&lt;p&gt;现在只要实现&lt;code&gt;Camera&lt;/code&gt;类，并提供源源不断的视频帧数据即可运行上面的程序了。由于连接摄像头涉及到硬件，我们使用一个简单的模拟器来源源不断地返回数据：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;time&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; time

&lt;span style="color: #AA22FF; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #0000FF"&gt;Camera&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;object&lt;/span&gt;):
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;__init__&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;):
        &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;frames &lt;span style="color: #666666"&gt;=&lt;/span&gt; [&lt;span style="color: #AA22FF"&gt;open&lt;/span&gt;(f &lt;span style="color: #666666"&gt;+&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)&lt;span style="color: #666666"&gt;.&lt;/span&gt;read() &lt;span style="color: #AA22FF; font-weight: bold"&gt;for&lt;/span&gt; f &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; [&lt;span style="color: #BB4444"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;]]

    &lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;get_frame&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;):
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;frames[&lt;span style="color: #AA22FF"&gt;int&lt;/span&gt;(time()) &lt;span style="color: #666666"&gt;%&lt;/span&gt; &lt;span style="color: #666666"&gt;3&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这个代码很简单，它从本地读取三个图片，并根据当前时间，每秒返回不同的图片来模拟提供源源不断的视频帧数据。&lt;/p&gt;
&lt;p&gt;大家可以从原作者的GitHub上下载程序的代码来运行。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #B8860B"&gt;$ &lt;/span&gt;git clone https://github.com/miguelgrinberg/flask-video-streaming.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者直接下载&lt;a href="https://github.com/miguelgrinberg/flask-video-streaming/archive/master.zip"&gt;ZIP&lt;/a&gt;包来运行。&lt;/p&gt;
&lt;p&gt;下载完代码，进入代码根目录，执行&lt;code&gt;python app.py&lt;/code&gt;。然后在浏览器里打开&lt;code&gt;http://localhost:5000&lt;/code&gt;即可以看到模拟的视频了。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;安装Flask&lt;/p&gt;
&lt;p&gt;要运行上述代码，需要先安装Flask。&lt;a href="http://flask.pocoo.org/"&gt;官网&lt;/a&gt;上有教程，简单易懂。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_6"&gt;连接硬件摄像头&lt;/h2&gt;
&lt;p&gt;下载代码的同学应该可以看到代码里还有一个&lt;code&gt;camera_pi.py&lt;/code&gt;的文件，这个是用来实现真正的连接硬件摄像头的代码。原文作者使用的摄像头是&lt;a href="http://baike.baidu.com/view/5730914.htm"&gt;Raspberry Pi&lt;/a&gt;，这是个类似Arduino的开源的硬件项目。&lt;/p&gt;
&lt;h2 id="_7"&gt;一些限制&lt;/h2&gt;
&lt;p&gt;当客户端浏览器打开上述流媒体服务的网址时，它就独占了这个线程。在把Flask应用Deploy到Nginx+uwsgi服务器上时，它能服务的最大客户端数目为应用程序的线程数，一般就是几个到几十个。而如果是在本机使用&lt;code&gt;python app.py&lt;/code&gt;运行的测试服务器，则只能服务一个客户端。&lt;/p&gt;
&lt;p&gt;针对这个问题，原文作者提供了一个解决方案。使用&lt;a href="http://www.gevent.org/"&gt;gevent&lt;/a&gt;来解决。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gevent is a coroutine-based Python networking library that uses greenlet to provide a high-level synchronous API on top of the libev event loop.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有兴趣的同学可以在原代码的基础上，引入gevent来支持多客户端。&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category></entry><entry><title>使用Pelican搭建博客系统</title><link href="http://blog.kamidox.com/build-blog-system-by-pelican.html" rel="alternate"></link><updated>2014-10-26T23:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-10-26:build-blog-system-by-pelican.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;摘要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pelican"&gt;Pelican介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pelican_1"&gt;什么是Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pelican_2"&gt;为什么选择Pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pelican_3"&gt;Pelican安装与配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pelican_4"&gt;安装Pelican并创建项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pelicanconfpypublishconfpy"&gt;配置pelicanconf.py和publishconf.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#makefile"&gt;配置Makefile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;配置主题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;撰写博客&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;撰写博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;预览博客文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;发布博客&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#nginx"&gt;配置Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;上传博客到服务器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;摘要&lt;/h2&gt;
&lt;p&gt;经过几天的折腾，用Pelican搭建的独立博客系统终于上线运行了。可以打开&lt;a href="http://kamidox.com"&gt;kamidox.com&lt;/a&gt;看一下效果图。由于选用了响应式网页设计的主题，所以在手机上的浏览效果也相当赞。本文介绍了Pelican的特性；选择Pelican的理由以及从头安装配置，搭建出一个可运行的独立博客系统。最后给出我自己的最佳实践描述。&lt;/p&gt;
&lt;h2 id="pelican"&gt;Pelican介绍&lt;/h2&gt;
&lt;h3 id="pelican_1"&gt;什么是Pelican&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;Perlican&lt;/a&gt;是用Python实现的一个静态网站生成器，支持&lt;a href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt;或&lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;。它支持以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;博客文章和静态网页&lt;/li&gt;
&lt;li&gt;支持评论。评论是通过第三方服务&lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;支持的。即评论数据保存在第三方服务器上&lt;/li&gt;
&lt;li&gt;主题支持&lt;/li&gt;
&lt;li&gt;把博客文章生成PDF格式文档&lt;/li&gt;
&lt;li&gt;多语言博客支持，如可以用英文和中文写同一篇博客。不同语言访问者访问相应语言的博文&lt;/li&gt;
&lt;li&gt;支持Atom/RSS订阅&lt;/li&gt;
&lt;li&gt;博文中代码高亮支持&lt;/li&gt;
&lt;li&gt;博客搬家支持(WordPress, Dotclear, 或RSS feeds)&lt;/li&gt;
&lt;li&gt;支持插件，如Twiter, Google Analytics等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pelican_2"&gt;为什么选择Pelican&lt;/h3&gt;
&lt;p&gt;首先排除掉WordPress之类的CMS系统。因为我不想要数据库，我只需要一个轻量级的静态网站生成器。我的博客使用Markdown编写，且保存在GitHub上。我想要的，只是用Markdown写完博客之后，git commit + git push即可直接发布到博客网站上。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.iwantmyname.com/2014/05/the-updated-big-list-of-static-website-generators-for-your-site-blog-or-wiki.html"&gt;这篇文章&lt;/a&gt;介绍了32个各种语言实现的博客引擎，而&lt;a href="http://siliconangle.com/blog/2012/03/20/5-minimalist-static-html-blog-generators-to-check-out/"&gt;这篇文章&lt;/a&gt;介绍了５个最轻量级的静态网站生成器。最终选择Pelican是基于如下原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Python实现。由于最近在学习Python，我可以阅读源码并按照我的需求来改造Pelican使之完全符合我的需求。下次学习Ruby，用&lt;a href="https://github.com/jekyll/jekyll"&gt;jekyll&lt;/a&gt;再折腾一遍。因为Jekyll是用Ruby实现的。且GitHub Pages的后台就是用Jekyll，到时可直接用GitHub Pages实现个人博客。&lt;/li&gt;
&lt;li&gt;足够轻量级。总的代码量才1MB多。安装也方便。&lt;/li&gt;
&lt;li&gt;有一堆现成的主题可以使用。这对我这种非专业前端的开发者来说，省了不少事。&lt;/li&gt;
&lt;li&gt;文档齐全。&lt;/li&gt;
&lt;li&gt;开发活动活跃。GitHub上代码提交活跃。上面文章里介绍的很多博客系统基本上都2+年前就停止更新了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后两点对使用任何开源工具来说都是很重要的，只有开发活跃，社区资源多，文档齐全，遇到问题的时候才能较快地得到解决。&lt;/p&gt;
&lt;h2 id="pelican_3"&gt;Pelican安装与配置&lt;/h2&gt;
&lt;h3 id="pelican_4"&gt;安装Pelican并创建项目&lt;/h3&gt;
&lt;p&gt;详细的信息可以参阅&lt;a href="http://docs.getpelican.com/en/3.4.0/"&gt;Pelican官方文档&lt;/a&gt;。假设电脑上已经安装Python和pip。首先，通过pip安装pelican和markdown：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;pip install pelican markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后创建你的博客项目：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;mkdir ~/blogs
&lt;span style="color: #AA22FF"&gt;cd&lt;/span&gt; ~/blogs
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在运行pelican-quickstart时，系统会问一系列问题，比如你的博客网址啊，作者名字啊之类的，根据真实情况填写即可，这些问题只是用来生成配置文件的，我们后面都可以通过修改配置文件来手动修改这些设置。我填写的内容如下：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;kamidox@kamidox-laptop:~/lab/blogs&lt;span style="color: #B8860B"&gt;$ &lt;/span&gt;pelican-quickstart
Welcome to pelican-quickstart v3.4.0.

This script will &lt;span style="color: #AA22FF"&gt;help &lt;/span&gt;you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

&amp;gt; Where &lt;span style="color: #AA22FF; font-weight: bold"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span style="color: #666666"&gt;[&lt;/span&gt;.&lt;span style="color: #666666"&gt;]&lt;/span&gt;
&amp;gt; What will be the title of this web site? kamidox
&amp;gt; Who will be the author of this web site? Joey Huang
&amp;gt; What will be the default language of this web site? &lt;span style="color: #666666"&gt;[&lt;/span&gt;en&lt;span style="color: #666666"&gt;]&lt;/span&gt;
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span style="color: #666666"&gt;(&lt;/span&gt;Y/n&lt;span style="color: #666666"&gt;)&lt;/span&gt;
&amp;gt; What is your URL prefix? &lt;span style="color: #666666"&gt;(&lt;/span&gt;see above example; no trailing slash&lt;span style="color: #666666"&gt;)&lt;/span&gt; http://kamidox.com
&amp;gt; Do you want to &lt;span style="color: #AA22FF"&gt;enable &lt;/span&gt;article pagination? &lt;span style="color: #666666"&gt;(&lt;/span&gt;Y/n&lt;span style="color: #666666"&gt;)&lt;/span&gt; Y
&amp;gt; How many articles per page &lt;span style="color: #AA22FF; font-weight: bold"&gt;do&lt;/span&gt; you want? &lt;span style="color: #666666"&gt;[&lt;/span&gt;10&lt;span style="color: #666666"&gt;]&lt;/span&gt;
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span style="color: #666666"&gt;(&lt;/span&gt;Y/n&lt;span style="color: #666666"&gt;)&lt;/span&gt; Y
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? &lt;span style="color: #666666"&gt;(&lt;/span&gt;Y/n&lt;span style="color: #666666"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using FTP? &lt;span style="color: #666666"&gt;(&lt;/span&gt;y/N&lt;span style="color: #666666"&gt;)&lt;/span&gt; N
&amp;gt; Do you want to upload your website using SSH? &lt;span style="color: #666666"&gt;(&lt;/span&gt;y/N&lt;span style="color: #666666"&gt;)&lt;/span&gt; y
&amp;gt; What is the hostname of your SSH server? &lt;span style="color: #666666"&gt;[&lt;/span&gt;localhost&lt;span style="color: #666666"&gt;]&lt;/span&gt; kamidox.com
&amp;gt; What is the port of your SSH server? &lt;span style="color: #666666"&gt;[&lt;/span&gt;22&lt;span style="color: #666666"&gt;]&lt;/span&gt;
&amp;gt; What is your username on that server? &lt;span style="color: #666666"&gt;[&lt;/span&gt;root&lt;span style="color: #666666"&gt;]&lt;/span&gt; ubuntu
&amp;gt; Where &lt;span style="color: #AA22FF; font-weight: bold"&gt;do&lt;/span&gt; you want to put your web site on that server? &lt;span style="color: #666666"&gt;[&lt;/span&gt;/var/www&lt;span style="color: #666666"&gt;]&lt;/span&gt; /home/ubuntu/blogs
&amp;gt; Do you want to upload your website using Dropbox? &lt;span style="color: #666666"&gt;(&lt;/span&gt;y/N&lt;span style="color: #666666"&gt;)&lt;/span&gt; N
&amp;gt; Do you want to upload your website using S3? &lt;span style="color: #666666"&gt;(&lt;/span&gt;y/N&lt;span style="color: #666666"&gt;)&lt;/span&gt; N
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span style="color: #666666"&gt;(&lt;/span&gt;y/N&lt;span style="color: #666666"&gt;)&lt;/span&gt; N
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span style="color: #666666"&gt;(&lt;/span&gt;y/N&lt;span style="color: #666666"&gt;)&lt;/span&gt; N
Done. Your new project is available at /home/kamidox/lab/blogs
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;其中第14行的&lt;code&gt;http://kamidox.com&lt;/code&gt;以及第21行的&lt;code&gt;kamidox.com&lt;/code&gt;是我的域名，如果你只是在本机试验，可以填localhost。创建完项目后，目录下看起来象这样。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;kamidox@kamidox-laptop:~/lab/blogs&lt;span style="color: #B8860B"&gt;$ &lt;/span&gt;tree
.
├── content     &lt;span style="color: #008800; font-style: italic"&gt;# 这个就是放博客内容目录，这个目录及子目录下的所有md和rst文件将会被转成html文件&lt;/span&gt;
├── develop_server.sh   &lt;span style="color: #008800; font-style: italic"&gt;#这个是用来在本地运行一个服务器来实时查看生成的html文档的脚本&lt;/span&gt;
├── fabfile.py  &lt;span style="color: #008800; font-style: italic"&gt;# 这个是使用Python的fabric来实现文件上传的工具，即Deploy工具&lt;/span&gt;
├── Makefile    &lt;span style="color: #008800; font-style: italic"&gt;# 这个是使用是用来生成网站内容并上传的工具。后文详细解释&lt;/span&gt;
├── output      &lt;span style="color: #008800; font-style: italic"&gt;# 这个是从content目录生成的html目标文件的存放目录&lt;/span&gt;
├── pelicanconf.py      &lt;span style="color: #008800; font-style: italic"&gt;# 这个是本地开发时的配置文件&lt;/span&gt;
└── publishconf.py      &lt;span style="color: #008800; font-style: italic"&gt;# 这个是发布时的配置文件&lt;/span&gt;

&lt;span style="color: #666666"&gt;2&lt;/span&gt; directories, &lt;span style="color: #666666"&gt;5&lt;/span&gt; files
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="pelicanconfpypublishconfpy"&gt;配置pelicanconf.py和publishconf.py&lt;/h3&gt;
&lt;p&gt;Pelican的配置文件是直接用Python写的，我本地开发配置文件&lt;code&gt;pelicanconf.py&lt;/code&gt;内容如下：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;__future__&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; unicode_literals

AUTHOR &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;u&amp;#39;Joey Huang&amp;#39;&lt;/span&gt;
SITENAME &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;u&amp;quot;kamidox.com&amp;quot;&lt;/span&gt;
SITEURL &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;http://localhost&amp;#39;&lt;/span&gt;
DISQUS_SITENAME &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;kamidox&amp;#39;&lt;/span&gt;

PATH &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;

TIMEZONE &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;Asia/Shanghai&amp;#39;&lt;/span&gt;

DEFAULT_LANG &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;u&amp;#39;zh_CN&amp;#39;&lt;/span&gt;
DEFAULT_DATE_FORMAT &lt;span style="color: #666666"&gt;=&lt;/span&gt; (&lt;span style="color: #BB4444"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%d&lt;/span&gt;&lt;span style="color: #BB4444"&gt;(%A) %H:%M&amp;#39;&lt;/span&gt;)

USE_FOLDER_AS_CATEGORY &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;
DEFAULT_CATEGORY &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;hide&amp;#39;&lt;/span&gt;

&lt;span style="color: #008800; font-style: italic"&gt;# Feed generation is usually not desired when developing&lt;/span&gt;
FEED_ATOM &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;feeds/atom.xml&amp;#39;&lt;/span&gt;
FEED_RSS &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;feeds/rss.xml&amp;#39;&lt;/span&gt;
FEED_ALL_ATOM &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;
FEED_ALL_RSS &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;
CATEGORY_FEED_ATOM &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;
TRANSLATION_FEED_ATOM &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;

&lt;span style="color: #008800; font-style: italic"&gt;# menu items&lt;/span&gt;
MENUITEMS &lt;span style="color: #666666"&gt;=&lt;/span&gt; [(&lt;span style="color: #BB4444"&gt;&amp;#39;Home&amp;#39;&lt;/span&gt;, SITEURL),
            (&lt;span style="color: #BB4444"&gt;&amp;#39;About&amp;#39;&lt;/span&gt;, &lt;span style="color: #BB4444"&gt;&amp;#39;about.html&amp;#39;&lt;/span&gt;),]

DEFAULT_PAGINATION &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #666666"&gt;10&lt;/span&gt;
MD_EXTENSIONS &lt;span style="color: #666666"&gt;=&lt;/span&gt; [
        &lt;span style="color: #BB4444"&gt;&amp;quot;extra&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #BB4444"&gt;&amp;quot;toc&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #BB4444"&gt;&amp;quot;headerid&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #BB4444"&gt;&amp;quot;meta&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #BB4444"&gt;&amp;quot;sane_lists&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #BB4444"&gt;&amp;quot;smarty&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #BB4444"&gt;&amp;quot;wikilinks&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #BB4444"&gt;&amp;quot;admonition&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #BB4444"&gt;&amp;quot;codehilite(guess_lang=False,pygments_style=emacs,noclasses=True)&amp;quot;&lt;/span&gt;]

CNZZ_ANALYTICS &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;
MONTH_ARCHIVE_SAVE_AS &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/index.html&amp;#39;&lt;/span&gt;
THEME &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;themes/foundation-default-colours&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
&lt;li&gt;第6行的SITENAME是博客网站的名称，可以是任何字符；第7行是博客网站的网址，这个字段在本地开发和发布版本是不一样的，本地直接填localhost即可，发布版本里需要填博客网址。&lt;/li&gt;
&lt;li&gt;第8行：我使用了Disqus作为我的评论系统，Disqus也是&lt;a href="https://www.ycombinator.com/"&gt;YC&lt;/a&gt;毕业生。启用Disqus评论系统非常简单，在官网上注册一个Disqus帐户，然后把帐户名填在&lt;code&gt;DISQUS_SITENAME&lt;/code&gt;值里即可启用。我的Disqus帐号刚好也是&lt;code&gt;kamidox&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;第33－42行：这里是配置Markdown扩展，用来支持代码高亮。并且使用Emacs风格的代码高亮。&lt;/li&gt;
&lt;li&gt;第44行：由于GFW的存在，我把Google Analize换成了国内的CNZZ统计。&lt;/li&gt;
&lt;li&gt;第46行：我的博客使用了&lt;code&gt;foundation-default-colours&lt;/code&gt;这套主题。关于主题，后文详解。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;开发环境和发布环境的配置差不多，除SITEURL不一样外，还多了两个配置：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;SITEURL &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;http://kamidox.com&amp;#39;&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;# usful setting for publish&lt;/span&gt;
RELATIVE_URLS &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;False&lt;/span&gt;   &lt;span style="color: #008800; font-style: italic"&gt;# 禁用相对路径引用&lt;/span&gt;
DELETE_OUTPUT_DIRECTORY &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;True&lt;/span&gt;      &lt;span style="color: #008800; font-style: italic"&gt;# 编译之前删除output目录，这样保证output下生成的内容是干净的&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其它的配置项，可以参阅&lt;a href="http://docs.getpelican.com/en/3.4.0/settings.html"&gt;Pelican设置文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="makefile"&gt;配置Makefile&lt;/h3&gt;
&lt;p&gt;撰写完博客，并在本地预览后，需要发布到服务器上。我使用Makefile的形式来生成文档并发布。我的Makefile核心代码如下：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;#!/makefile&lt;/span&gt;
&lt;span style="color: #B8860B"&gt;SSH_HOST&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;kamidox.com
&lt;span style="color: #B8860B"&gt;SSH_PORT&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;22
&lt;span style="color: #B8860B"&gt;SSH_USER&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;ubuntu
&lt;span style="color: #B8860B"&gt;SSH_TARGET_DIR&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;/home/ubuntu/blogs/
&lt;span style="color: #B8860B"&gt;SSH_KEY&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;/home/kamidox/work/aws/kamidox-key-tokyo.pem

&lt;span style="color: #00A000"&gt;rsync_upload&lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt; publish
    rsync -e &lt;span style="color: #BB4444"&gt;&amp;quot;ssh -p &lt;/span&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;SSH_PORT&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;&lt;span style="color: #BB4444"&gt; -i &lt;/span&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;SSH_KEY&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;&lt;/span&gt; -P -rvzc --delete &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;/ &lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;SSH_USER&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;@&lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;SSH_HOST&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt;:&lt;span style="color: #AA22FF; font-weight: bold"&gt;$(&lt;/span&gt;SSH_TARGET_DIR&lt;span style="color: #AA22FF; font-weight: bold"&gt;)&lt;/span&gt; --cvs-exclude
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
&lt;li&gt;第2－4行：指定了要上传内容的目的服务器的地址，端口以及用户名&lt;/li&gt;
&lt;li&gt;第5行：指定了远程服务器上保存博客内容的目录&lt;/li&gt;
&lt;li&gt;第6行：我添加的SSH Identity文件路径。这是因为Amazon EC2登录时我是用SSH Identity文件登录的，而不是使用用户名和密码&lt;/li&gt;
&lt;li&gt;第8-9行：我使用rsync来进行上传操作。rsync可以在本地和远程服务器之间同步文件。同步过程中只同步那些改变了的文件，且传输过程中会压缩数据，它比scp要所需要的带宽要小。这里要注意的是，我在默认生成的Makefile上增加了&lt;code&gt;-i $(SSH_KEY)&lt;/code&gt;，这个就是指定SSH Identity文件登录远程SSH的方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_2"&gt;配置主题&lt;/h3&gt;
&lt;p&gt;Pelican支持大量的开源主题，GitHub上的&lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt;项目有几十套主题，大部分都带了效果预览图。可以从里面挑一个你喜欢的主题样式来使用。还有一个更方便的挑选主题的方式，直接打开&lt;a href="http://www.pelicanthemes.com/"&gt;www.pelicanthemes.com&lt;/a&gt;挑选吧。一个网页里就列出了几乎所有的主题。我的博客是使用&lt;code&gt;foundation-default-colours&lt;/code&gt;主题，并在这套主题的基础上进行了一些定制。选定好喜欢的主题后，从GitHub上下载下来所有的主题：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;mkdir ~/pelican
&lt;span style="color: #AA22FF"&gt;cd&lt;/span&gt; ~/pelican
git clone https://github.com/getpelican/pelican-themes.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从里面拷贝一份你选中的主题到项目根目录的&lt;code&gt;themes&lt;/code&gt;目录下，在本文的例子中是&lt;code&gt;~/lab/blogs/themes&lt;/code&gt;。然后在&lt;code&gt;pelicanconf.py&lt;/code&gt;和&lt;code&gt;publishconf.py&lt;/code&gt;里通过下面代码指定博客主题：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;THEME &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;themes/foundation-default-colours&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通常的做法是，选中一个自己喜欢的主题后，会进行一些定制。Pelican使用&lt;a href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;来配置主题。一个主题的典型结构如下：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;├── static
│   ├── css
│   └── images
└── templates
    ├── analytics_cnzz.html // 这个是我添加的使用cnzz的统计服务的代码
    ├── analytics.html      // 这是Google Analytics的代码
    ├── archives.html       // 这个是博客归档页面的模板
    ├── article.html        // 这个是博客正文的显示模板
    ├── base.html           //　这个是所有页面的父类模板，即所有页面都引用这个页面。比如网页导航栏啊之类的，都定义在这里
    ├── categories.html     //　所有博客文章的分类列表
    ├── category.html       // 某个博客分类的文章列表模板
    ├── index.html          // 主页
    ├── page.html           // 分页显示的模板
    ├── tag.html            // 某类标签下的文章列表
    └── tags.html           // 所有的标签列表页面模板
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;稍微有点Jinja的知识加上一些HTML和CSS的知识，就可以自己定义主题了。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;为什么博客主页打开半天都不显示出来&lt;/p&gt;
&lt;p&gt;因为GFW封锁了几乎所有和Google相关的网站，这些主题里又用了Google的字体，所以下载这些字体时会导致无法下载成功而半天不显示网页。解决方案很简单，直接修改css文件，不去下载Google字体即可。比如针对&lt;code&gt;foundation-default-colours&lt;/code&gt;主题，打开主题根目录下的&lt;code&gt;static/css/foundation.css&lt;/code&gt;和&lt;code&gt;static/css/foundation.min.css&lt;/code&gt;文件，删除掉&lt;code&gt;@import url("//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,700italic,400,300,700");&lt;/code&gt;内容即可。当然，如果你和你的读者都是翻墙高手，那就不会遇到这个问题了。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_3"&gt;撰写博客&lt;/h2&gt;
&lt;h3 id="_4"&gt;撰写博客&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;content&lt;/code&gt;目录下新建一个xxx.md，使用Makedown语法直接撰写文档即可。我在ubuntu下使用的是gedit，代码高亮效果很好。撰写博客的时候需要注意，Pelican支持一些元数据。比如，本文的元数据如下：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;Title: 使用Pelican搭建博客系统
Date: 2014-10-07 22:20
Modified: 2014-10-07 23:04
Tags: python, pelican
Slug: build-blog-system-by-pelican
Authors: Joey Huang
Summary: 本文介绍了Pelican的特性；选择Pelican的理由以及从头安装配置，搭建出一个可运行的独立博客系统。
Status: draft
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
&lt;li&gt;第5行：Slug是文档的唯一标识，生成html时，会直接使用这个值当html的文件名。所以，不同博客文章这个值需要保证唯一性，否则生成html时会报错。&lt;/li&gt;
&lt;li&gt;第8行：这个表示本文是草稿。比如我们一篇博客经常不是一次性写完的，写了一半暂不想让读者看到，或者写完想让别人帮忙审查一下，就可以加这一行标识。这样Pelican在处理时，这篇文章也会生成html，但不会放在博客的主页及分类索引里，这样普通的读者一般看不到这个文章。有这个标识的文章生成时放在&lt;code&gt;output/drafts&lt;/code&gt;目录下，你就可以通过分享url的方式让你的co-worker帮你review你的文章。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以在&lt;code&gt;content&lt;/code&gt;目录下任意建子目录来组织管理博客文章。由于我们在设置文件里指定这个值&lt;code&gt;USE_FOLDER_AS_CATEGORY = True&lt;/code&gt;，这样这些目录名称就自动变成博文分类的目录了。&lt;/p&gt;
&lt;h3 id="_5"&gt;预览博客文章&lt;/h3&gt;
&lt;p&gt;撰写文章的过程中，可以随时在浏览器里预览博客文章。方法是先在博客项目的根目录下执行下面命令来启动预览服务器：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;make devserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这条命令会自动使用&lt;code&gt;pelicanconf.py&lt;/code&gt;的配置文件来生成html网页，同时在本地的8000端口上启动一个http服务器，供你预览文章。这样，直接打开浏览器，输入&lt;code&gt;localhost:8000&lt;/code&gt;即可打开本地服务器上的你的博客主页。比如，撰写本文时，我就直接在gedit里码字，然后在浏览器里输入&lt;code&gt;http://localhost:8000/drafts/build-blog-system-by-pelican.html&lt;/code&gt;来实时预览效果。需要注意的是，上述命令会在后台持续监听&lt;code&gt;content&lt;/code&gt;目录下的内容，如果这个目录下的内容发生变化，会自动重新生成html页面。所以，在gedit里写完一段内容，切换到浏览器，直接刷新一下就可以看到最新的结果了。&lt;/p&gt;
&lt;p&gt;当文章写完后，需要在博客项目根目录上运行&lt;code&gt;make stopserver&lt;/code&gt;来停止这个预览服务以及数据监控功能。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;文章在主页上没看到？&lt;/p&gt;
&lt;p&gt;撰写完文章，需要发布时，需要把&lt;code&gt;Status: draft&lt;/code&gt;这行元数据去掉。否则文章不会出现在博客主页。只会在drafts下看得到。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_6"&gt;发布博客&lt;/h2&gt;
&lt;p&gt;写完博客，我们想发布到网上。这个时候我们就需要一个主机和一个域名，我的独立博客系统用到的下面资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Amazon EC2主机。一个帐户可以免费使用一年。可以点击&lt;a href="https://aws.amazon.com"&gt;这里&lt;/a&gt;注册。&lt;/li&gt;
&lt;li&gt;申请独立域名。我是通过&lt;a href="http://www.aliyun.com/"&gt;阿里云&lt;/a&gt;直接在&lt;a href="http://www.net.cn/"&gt;万网&lt;/a&gt;上注册的。一年45元。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的博客运行的软件环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04 Server版，运行在Anazon EC2主机上&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nginx"&gt;配置Nginx&lt;/h3&gt;
&lt;p&gt;Ubuntu下安装Nginx：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;sudo apt-get install nginx-full
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装完成后，编辑配置文件：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;sudo vim /etc/nginx/sites-enabled/default
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将配置文件替换成如下的内容：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;server {
  listen 80 default_server;
  server_name localhost;
  root /home/kamidox/lab/blogs/output;

  location / {
    index index.html;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
&lt;li&gt;第3行：这个是服务器地址。这里使用本机作为测试服务器就填localhost，如果是配置服务器，就要填服务器的域名。比如我的服务器上，这行是配置成kamidox.com。&lt;/li&gt;
&lt;li&gt;第4行：这个设置成博客文章的根目录。这个使用本机作为测试服务器，所以直接填博客项目的&lt;code&gt;output&lt;/code&gt;目录。如果是在服务器上，我是直接配置成&lt;code&gt;/home/ubuntu/blogs&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置完成后，重启一下Nginx服务：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;sudo service nginx resart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在浏览器里输入&lt;code&gt;localhost&lt;/code&gt;就可以看到博客首页。在本机验证成功Nginx配置后，就可以用SSH登录服务器去配置服务器了。&lt;/p&gt;
&lt;h3 id="_7"&gt;上传博客到服务器&lt;/h3&gt;
&lt;p&gt;直接在项目根目录下运行下面的命令即可把文章上传到博客服务器:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;make rsync_upload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为我们在前文已经配置了Makefile文件。所以运行这个命令之后，就会使用&lt;code&gt;publishconf.py&lt;/code&gt;来生成html，并且通过rsync上传到服务器Amazon EC2服务器的&lt;code&gt;/home/ubuntu/blogs/&lt;/code&gt;目录下。&lt;/p&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;配置Amazon EC2主机&lt;/p&gt;
&lt;p&gt;发布博客到服务器上，需要先完成Amazon EC2主机的配置。具体可参阅&lt;a href="https://aws.amazon.com"&gt;Amazon官网上的文档&lt;/a&gt;。如果还没有主机，也可以把自己的电脑配置成服务器来作试验，所要做的，就是修改Makefile里的SSH_HOST的值为localhost即可。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="_8"&gt;最佳实践&lt;/h2&gt;
&lt;p&gt;我的博客内容托管在GitHub上。当我需要写一篇文章时，直接打开gedit/sublime开始用Markdown语法码字。想预览时，直接运行&lt;code&gt;make devserver&lt;/code&gt;，然后在浏览器里输入文章的URL就可以直接查看了。如果文章写了一半，还不想发布，直接加一条元数据&lt;code&gt;Status: draft&lt;/code&gt;。然后git commit + git push提交到服务器。等到文章写完，想发布了，删除掉草稿标识；然后git commit + git push先提交到GitHub上；接着运行&lt;code&gt;make rsync_upload&lt;/code&gt;即可把博客内容上传到Amazon EC2主机上。打开&lt;a href="http://kamidox.com"&gt;kamidox.com&lt;/a&gt;确认一下即完成了一篇博文的发布。&lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category></entry><entry><title>Python SocketServer</title><link href="http://blog.kamidox.com/python-stdlib-socketserver.html" rel="alternate"></link><updated>2014-10-05T20:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-10-05:python-stdlib-socketserver.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;摘要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#socketserver"&gt;SocketServer概述&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;网络服务种类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;网络服务处理请求的方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;创建网络服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;多线程并发的注意事项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;类和接口介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#baseserver"&gt;BaseServer介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requesthandler"&gt;RequestHandler介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;参考文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;摘要&lt;/h2&gt;
&lt;p&gt;本文介绍Python标准库SocketServer。SocketServer标准库简化了编写一个网络服务器的工作。阅读本文需要基本的网络编程知识以及线程和进程的概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;code&gt;SocketServer&lt;/code&gt;在Python 3之后被重命名为&lt;code&gt;socketserver&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="socketserver"&gt;SocketServer概述&lt;/h2&gt;
&lt;h3 id="_2"&gt;网络服务种类&lt;/h3&gt;
&lt;p&gt;SocketServer包里最常用的两个基础服务类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TCPServer&lt;/code&gt;：提供TCP服务的网络服务可以从这个类继承&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UDPServer&lt;/code&gt;：提供UDP服务的网络服务可以从这个类继承&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外两个不常用，且只在类UNIX系统里可以使用的是&lt;code&gt;UnixStreamServer&lt;/code&gt;和&lt;code&gt;UnixDatagramServer&lt;/code&gt;，他们分别提供TCP和UDP的本地服务，一般用来实现进程间通信。&lt;/p&gt;
&lt;h3 id="_3"&gt;网络服务处理请求的方式&lt;/h3&gt;
&lt;p&gt;这四个类都只能串行地处理请求。即一个请求处理完成之前，新来的请求只能在排队，而无法得到及时处理。这在网络服务器中是不可接受的。解决方案是创建一个单独的进程或线程来处理每个请求。所幸SocketServer包里提供了另外两个工具类来实现请求的并行处理，他们是&lt;code&gt;ForkingMixIn&lt;/code&gt;和&lt;code&gt;ThreadingMixIn&lt;/code&gt;，分别实现&lt;strong&gt;进程&lt;/strong&gt;和&lt;strong&gt;线程&lt;/strong&gt;的并行方案。&lt;/p&gt;
&lt;h3 id="_4"&gt;创建网络服务&lt;/h3&gt;
&lt;p&gt;创建一个服务需要以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;继承&lt;code&gt;BaseRequestHandler&lt;/code&gt;类，并重载其&lt;code&gt;handle()&lt;/code&gt;方法来实现一个请求处理器。&lt;/li&gt;
&lt;li&gt;创建一个服务器实例(&lt;code&gt;TCPServer&lt;/code&gt; or &lt;code&gt;UDBPServer&lt;/code&gt; etc.)，指定其提供服务的地址和端口，指定请求处理器。&lt;/li&gt;
&lt;li&gt;调用服务器实例的&lt;code&gt;serve_forever()&lt;/code&gt;启动服务。当请求到来时，就会把请求派发给请求处理器处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_5"&gt;多线程并发的注意事项&lt;/h3&gt;
&lt;p&gt;当使用&lt;code&gt;ThreadingMixIn&lt;/code&gt;来实现多线程并发处理请求时，需要特别注意，当处理请求的线程意外终止时，网络服务进程需要作何反应。这个类提供了一个属性&lt;code&gt;daemon_threads&lt;/code&gt;来定义网络服务进程的行为。当&lt;code&gt;daemon_threads&lt;/code&gt;设置为False（默认）时，表示当处理请求的线程意外终止时，网络服务进程不会退出。而当&lt;code&gt;daemon_threads&lt;/code&gt;设置为True的时候，如果处理请求的线程意外终止，网络服务进程会退出。&lt;/p&gt;
&lt;p&gt;一个并发的UDP网络服务可以简单地通过下面的代码实现：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #0000FF"&gt;ThreadingUDPServer&lt;/span&gt;(ThreadingMixIn, UDPServer): &lt;span style="color: #AA22FF; font-weight: bold"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里需要注意的是，&lt;code&gt;ThreadingMixIn&lt;/code&gt;需要写在&lt;code&gt;UDPServer&lt;/code&gt;之前，因为&lt;code&gt;ThreadingMixIn&lt;/code&gt;重写了&lt;code&gt;UDPServer&lt;/code&gt;类里的一些方法。具体原因可阅读Python多继承机制相关资料。&lt;/p&gt;
&lt;p&gt;请求处理类&lt;code&gt;BaseRequestHandler&lt;/code&gt;有两个子类，他们是&lt;code&gt;StreamRequestHandler&lt;/code&gt;和&lt;code&gt;DatagramRequestHandler&lt;/code&gt;，分别用来处理TCP请求和UDP请求。在使用时可以直接使用子类以便提供更大的方便性。&lt;/p&gt;
&lt;p&gt;如何决定使用&lt;strong&gt;多线程&lt;/strong&gt;还是&lt;strong&gt;多进程&lt;/strong&gt;来实现并发请求处理？这个没有优劣之分。但需要注意&lt;strong&gt;线程&lt;/strong&gt;和&lt;strong&gt;进程&lt;/strong&gt;的本质区别，线程间是共享内存的，而进程是运行在独立的地址空间的。假如一个网络服务把状态信息保存在内存里，并且根据内存里的状态信息对请求做出不同的处理，这个时候就需要使用多线程。因为只有多线程才能及时地读到内存中最新的服务状态。如果实现的是HTTP服务器，它的状态信息都保存在文件里，那么多线程或多进程都可以满足要求。&lt;/p&gt;
&lt;p&gt;有些时候，实现网络服务并发时，一个更灵活的方式是分部处理，即计算速度快的直接并行处理，而需要的计算量比较大的通过子进程来处理。这个方式就不能通过继承&lt;code&gt;ThreadingMixIn&lt;/code&gt;来实现，而应该在请求处理器的&lt;code&gt;handle()&lt;/code&gt;函数里，显式地通过&lt;code&gt;fork()&lt;/code&gt;来创建一个子进程来实现。&lt;/p&gt;
&lt;p&gt;线程和进程毕竟是比较昂贵的系统资源，在系统中线程和进程的数量往往都是有限制的。特别是针对那些TCP服务，一个连接可能持续保持很长时间，导致线程或进程长时间被占用。所以，另外一个方案是，维护一张数组，用来记录那些部分完成的请求，然后使用&lt;code&gt;select()&lt;/code&gt;函数选择那些已经准备就绪的请求进入下一步处理的流程。具体可参考Python标准库&lt;code&gt;asyncore&lt;/code&gt;，它提供用这种方式实现并发处理的一些基础设施。&lt;/p&gt;
&lt;h2 id="_6"&gt;类和接口介绍&lt;/h2&gt;
&lt;h3 id="baseserver"&gt;BaseServer介绍&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BaseServer&lt;/code&gt;是&lt;code&gt;TCPServer&lt;/code&gt;和&lt;code&gt;UDPServer&lt;/code&gt;等服务类的共同父类。它定义了下面的接口，但大部分没有实现。而是由其子类实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BaseServer.fileno()&lt;br /&gt;
  返回一个int型的文件描述符，这个文件代表当前服务正在监听的socket接口。当一个进程里有多个网络服务时，就可以使用这个返回值传给&lt;code&gt;select()&lt;/code&gt;函数用来监测哪个服务已经有请求进来。&lt;/li&gt;
&lt;li&gt;BaseServer.handle_request()&lt;br /&gt;
  处理一个请求。这是个阻塞的函数。当服务进入事件循环开始提供服务时，这个接口被调用。当没有请求到来时，这个函数会阻塞在这等待请求的到来或者超时了返回。这个函数依次调用下面函数：&lt;code&gt;get_request()&lt;/code&gt;，&lt;code&gt;verify_request()&lt;/code&gt;，&lt;code&gt;process_request()&lt;/code&gt;，如果用户提供的请求处理器的&lt;code&gt;handle()&lt;/code&gt;函数抛出异常，服务的&lt;code&gt;handle_error()&lt;/code&gt;函数将被调用。如果在&lt;code&gt;self.timeout&lt;/code&gt;秒内没有收到请求，则调用&lt;code&gt;handle_timeout()&lt;/code&gt;之后，这个函数就返回。&lt;/li&gt;
&lt;li&gt;BaseServer.serve_forever(poll_interval=0.5)&lt;br /&gt;
  进入事件循环，开始提供服务，直到&lt;code&gt;shutdown()&lt;/code&gt;被调用为止。检查&lt;code&gt;shutdown()&lt;/code&gt;是否被调用的时间间隔默认是0.5秒。&lt;/li&gt;
&lt;li&gt;BaseServer.shutdown()&lt;br /&gt;
  停止提供服务。此函数是阻塞函数，会一直等到服务停止后才返回。这个函数必须在&lt;code&gt;serve_forever()&lt;/code&gt;函数运行的不同线程调用，否则会引起死锁。这个函数是Python 2.6版本新加的。&lt;/li&gt;
&lt;li&gt;BaseServer.RequestHandlerClass&lt;br /&gt;
  用户提供的请求处理器类。在处理新的请求时，会创建一个新的类实例给这个请求使用。&lt;/li&gt;
&lt;li&gt;BaseServer.server_address&lt;br /&gt;
  服务监听的地址。地址的格式和所使用的协议(TCP/IP or UNIX domain socket)有极大的相关性，具体参阅&lt;code&gt;socket&lt;/code&gt;模块。如果是IPV4的地址，则其格式是一个包含地址和端口的元组，如&lt;code&gt;("127.0.0.1", "80")&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;BaseServer.socket&lt;br /&gt;
  服务监听请求的socket实例。&lt;/li&gt;
&lt;li&gt;BaseServer.request_queue_size&lt;br /&gt;
  请求队列长度。当服务在处理一个请求时，新来的请求将在这里排除。如果队列长度己满时收到新的请求，则直接会返回一个错误给客户端。默认值是5，子类可以改写这个值。&lt;/li&gt;
&lt;li&gt;BaseServer.timeout&lt;br /&gt;
  当服务进入事件循环，开始等待请求到来时，如果超出&lt;code&gt;timeout&lt;/code&gt;秒还没有请求到来，则会调用&lt;code&gt;handle_timeout()&lt;/code&gt;。如果这个值是&lt;code&gt;None&lt;/code&gt;则表示没有超时限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="requesthandler"&gt;RequestHandler介绍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RequestHandler.setup()&lt;br /&gt;
  在&lt;code&gt;handle()&lt;/code&gt;调用之前被调用。可以用来做一些初始化工作。默认是空实现。&lt;/li&gt;
&lt;li&gt;RequestHandler.finish()&lt;br /&gt;
  在&lt;code&gt;handle()&lt;/code&gt;返回后被调用。可以用来做一些清理工作。默认是空实现。需要注意的是，如果&lt;code&gt;setup()&lt;/code&gt;抛出异常，这个函数不会被调用。&lt;/li&gt;
&lt;li&gt;RequestHandler.handle()&lt;br /&gt;
  这个函数用来处理请求。默认空实现。一些上下文信息在这个函数里可以使用，&lt;code&gt;self.request&lt;/code&gt;是请求信息；&lt;code&gt;self.client_address&lt;/code&gt;是请求的客户端地址；&lt;code&gt;self.server&lt;/code&gt;是服务实例。&lt;code&gt;self.request&lt;/code&gt;的类型对TCP和UDP服务是不一样的，对TCP它是socket对象，对UDP是一对字符串和socket对象。可以使用&lt;code&gt;StreamRequestHandler&lt;/code&gt;和&lt;code&gt;DatagramRequestHandler&lt;/code&gt;来隐藏这个差异。这两个子类重载了&lt;code&gt;setup()&lt;/code&gt;和&lt;code&gt;finish()&lt;/code&gt;方法，然后提供&lt;code&gt;request.rfile&lt;/code&gt;和&lt;code&gt;request.wfile&lt;/code&gt;的类文件对象，用来读写数据。读即获取请求数据；写即返回应答数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_7"&gt;例子&lt;/h2&gt;
&lt;p&gt;一个简单的回显服务。&lt;/p&gt;
&lt;p&gt;下面是服务端代码。保存为EchoTCPServer.py。&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;SocketServer&lt;/span&gt;

&lt;span style="color: #AA22FF; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #0000FF"&gt;EchoRequestHandler&lt;/span&gt;(SocketServer&lt;span style="color: #666666"&gt;.&lt;/span&gt;StreamRequestHandler):
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot; demo request handler &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;handle&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;):
        &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;data &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;rfile&lt;span style="color: #666666"&gt;.&lt;/span&gt;readline()&lt;span style="color: #666666"&gt;.&lt;/span&gt;strip()
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;print&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%s&lt;/span&gt;&lt;span style="color: #BB4444"&gt; write: &lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%s&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;&lt;/span&gt; &lt;span style="color: #666666"&gt;%&lt;/span&gt; (&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;client_address, &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;data))
        &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;wfile&lt;span style="color: #666666"&gt;.&lt;/span&gt;write(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;data&lt;span style="color: #666666"&gt;.&lt;/span&gt;upper())

&lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; __name__ &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:
    HOST, PORT &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style="color: #666666"&gt;5639&lt;/span&gt;

    server &lt;span style="color: #666666"&gt;=&lt;/span&gt; SocketServer&lt;span style="color: #666666"&gt;.&lt;/span&gt;TCPServer((HOST, PORT), EchoRequestHandler)
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;print&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;quot;ECHO TCP server is running ...&amp;quot;&lt;/span&gt;)
    server&lt;span style="color: #666666"&gt;.&lt;/span&gt;serve_forever()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;客户端代码。保存为EchoTCPClient.py&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #008800; font-style: italic"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style="color: #008800; font-style: italic"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;socket&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;sys&lt;/span&gt;

HOST, PORT &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style="color: #666666"&gt;5639&lt;/span&gt;
data &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;join(sys&lt;span style="color: #666666"&gt;.&lt;/span&gt;argv[&lt;span style="color: #666666"&gt;1&lt;/span&gt;:])

sock &lt;span style="color: #666666"&gt;=&lt;/span&gt; socket&lt;span style="color: #666666"&gt;.&lt;/span&gt;socket(socket&lt;span style="color: #666666"&gt;.&lt;/span&gt;AF_INET, socket&lt;span style="color: #666666"&gt;.&lt;/span&gt;SOCK_STREAM)

&lt;span style="color: #AA22FF; font-weight: bold"&gt;try&lt;/span&gt;:
    sock&lt;span style="color: #666666"&gt;.&lt;/span&gt;connect((HOST, PORT))
    sock&lt;span style="color: #666666"&gt;.&lt;/span&gt;sendall(data &lt;span style="color: #666666"&gt;+&lt;/span&gt; &lt;span style="color: #BB4444"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #BB6622; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;&lt;/span&gt;)

    received &lt;span style="color: #666666"&gt;=&lt;/span&gt; sock&lt;span style="color: #666666"&gt;.&lt;/span&gt;recv(&lt;span style="color: #666666"&gt;1024&lt;/span&gt;)
&lt;span style="color: #AA22FF; font-weight: bold"&gt;finally&lt;/span&gt;:
    sock&lt;span style="color: #666666"&gt;.&lt;/span&gt;close()

&lt;span style="color: #AA22FF; font-weight: bold"&gt;print&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;quot;Send:     &lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%s&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;&lt;/span&gt; &lt;span style="color: #666666"&gt;%&lt;/span&gt; (data))
&lt;span style="color: #AA22FF; font-weight: bold"&gt;print&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;quot;received: &lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%s&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;quot;&lt;/span&gt; &lt;span style="color: #666666"&gt;%&lt;/span&gt; (received))
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;先执行服务端&lt;code&gt;python EchoTCPServer.py&lt;/code&gt;，再执行客户端&lt;code&gt;python EchoTCPClient.py hello SocketServer&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;服务端输出如下：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;D:\lab\python&amp;gt;python DemoTCPServer.py
Echo TCP server is running ...
(&amp;#39;127.0.0.1&amp;#39;, 51245) write: hello SocketServer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;客户端输出如下：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;D:\lab\python&amp;gt;python EchoTCPClient.py hello SocketServer
Send:     hello SocketServer
received: HELLO SOCKETSERVER
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_8"&gt;参考文档&lt;/h2&gt;
&lt;p&gt;Python官方标准库关于&lt;a href="https://docs.python.org/2/library/socketserver.html"&gt;SocketServer&lt;/a&gt;的文档。&lt;/p&gt;</summary><category term="python"></category><category term="SocketServer"></category></entry><entry><title>Python特性汇总</title><link href="http://blog.kamidox.com/python-features.html" rel="alternate"></link><updated>2014-10-04T20:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-10-04:python-features.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;摘要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-decorator"&gt;Python Decorator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#with"&gt;with语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-descriptor"&gt;Python Descriptor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;摘要&lt;/h2&gt;
&lt;p&gt;本文汇总了Python一些重要的特性，并收集了网络上介绍这些特性的优秀的文章。本文将持续更新。&lt;/p&gt;
&lt;h2 id="python-decorator"&gt;Python Decorator&lt;/h2&gt;
&lt;p&gt;如果你对代码中出现的&lt;code&gt;@classmethod&lt;/code&gt;感到很困惑，则需要了解一下Python装饰器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入门文章&lt;br /&gt;
&lt;a href="http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html"&gt;这篇文章&lt;/a&gt;是不可多得的装饰器的入门文章，它对内置装饰器和functools包做详细的介绍。&lt;br /&gt;
&lt;a href="http://www.cnblogs.com/rhcad/archive/2011/12/21/2295507.html"&gt;这篇文章&lt;/a&gt;里对装饰器支持参数传递有一些简单的示例。&lt;/li&gt;
&lt;li&gt;深入阅读&lt;br /&gt;
  如果你对Python Decorator以及开源语言的演进感兴趣，可以深入阅读一些英文的资料。&lt;br /&gt;
&lt;a href="http://legacy.python.org/dev/peps/pep-0318/"&gt;PEP318&lt;/a&gt;对Python Decorator进行了官方定义。&lt;br /&gt;
&lt;a href="https://wiki.python.org/moin/PythonDecorators"&gt;Python Decorator Wiki&lt;/a&gt;更详细地描述了Python Decorator演进的历史。看完这篇文章，对开源语言的演进进程会有个相当直观的了解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="with"&gt;with语句&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;with&lt;/code&gt;语句是从 Python 2.5 开始引入的一种与异常处理相关的功能。它让我们能更加优雅地编写异常处理代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入门文章&lt;br /&gt;
&lt;a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-pythonwith/"&gt;这篇文章&lt;/a&gt;深入浅出地介绍了with语句产生的背景以及用法。来自IBM developerWorks。&lt;/li&gt;
&lt;li&gt;深入阅读&lt;br /&gt;
&lt;a href="http://legacy.python.org/dev/peps/pep-0343/"&gt;PEP343&lt;/a&gt;对&lt;code&gt;with&lt;/code&gt;语句进行了官方描述。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python-descriptor"&gt;Python Descriptor&lt;/h2&gt;
&lt;p&gt;如果你对&lt;code&gt;__get__&lt;/code&gt;，&lt;code&gt;__set__&lt;/code&gt;，&lt;code&gt;__del__&lt;/code&gt;等函数的工作机制不了解。那么需要学习一下Python Descriptor协议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入门文章&lt;br /&gt;
&lt;a href="http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html"&gt;这篇文章&lt;/a&gt;对新式类和经典类以及类对象模式进行了较深入全面的介绍。&lt;br /&gt;
&lt;a href="http://www.cnblogs.com/btchenguang/archive/2012/09/18/2690802.html"&gt;这篇文章&lt;/a&gt;是上一篇文章的续集，正式介绍Python Descriptor。&lt;/li&gt;
&lt;li&gt;深入阅读&lt;br /&gt;
  Python官网关于&lt;a href="https://docs.python.org/2/howto/descriptor.html"&gt;Descriptor的教程&lt;/a&gt;也是一篇非常不错的文章。不过是英文的。&lt;br /&gt;
&lt;a href="http://www.ibm.com/developerworks/library/os-pythondescriptors/"&gt;另外一篇&lt;/a&gt;非常不错的英文文章来自向来质量很高的IBM developerWorks。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category></entry><entry><title>Python装饰器实例</title><link href="http://blog.kamidox.com/python-decorator-example.html" rel="alternate"></link><updated>2014-10-03T20:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-10-03:python-decorator-example.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#python"&gt;Python装饰器入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flask"&gt;Flask里使用装饰器的几个例子&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#setupmethod"&gt;setupmethod&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;源码分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#locked_cached_property"&gt;locked_cached_property&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;源码分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="python"&gt;Python装饰器入门&lt;/h2&gt;
&lt;p&gt;如果还不知道Python装饰器是什么东西，可以阅读&lt;a href="http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html"&gt;这篇文章&lt;/a&gt;。它深入浅出地用实例介绍了装饰器，并且还介绍内置装饰器和functools包。另外，&lt;a href="http://www.cnblogs.com/rhcad/archive/2011/12/21/2295507.html"&gt;这篇文章&lt;/a&gt;对装饰器支持参数传递有一些简单的示例。也可以作为一个入门的参考。&lt;/p&gt;
&lt;h2 id="flask"&gt;Flask里使用装饰器的几个例子&lt;/h2&gt;
&lt;h3 id="setupmethod"&gt;setupmethod&lt;/h3&gt;
&lt;h4 id="_1"&gt;需求&lt;/h4&gt;
&lt;p&gt;如果web应用程序从运行起处理过一个HTTP请求，这个时候再向Flask添加route规则，则Flask在调试模式下，可以检查出一个APP的错误。为什么这是个错误呢？想像一下，如果一个web应用程序已经上线提供服务了，这个时候由于某些条件触发，向Flask又添加了一个route规则，则说明在添加这个route规则之前，向这个route发送的请求是没有接口可以处理的。&lt;/p&gt;
&lt;h4 id="_2"&gt;解决方案&lt;/h4&gt;
&lt;p&gt;Flask定义了&lt;code&gt;setupmethod&lt;/code&gt;装饰器来确保所有的初始化函数必须在web应用程序开始提供服务之前被调用。如果在已经提供服务之后被调用，则报错。&lt;/p&gt;
&lt;h4 id="_3"&gt;源码分析&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;setupmethod&lt;/code&gt;装饰器源码定义在&lt;a href="https://github.com/mitsuhiko/flask/blob/0.10-maintenance/flask/app.py"&gt;app.py&lt;/a&gt;里：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;setupmethod&lt;/span&gt;(f):
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Wraps a method so that it performs a check in debug mode if the&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    first request was already handled.&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;wrapper_func&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, &lt;span style="color: #666666"&gt;*&lt;/span&gt;args, &lt;span style="color: #666666"&gt;**&lt;/span&gt;kwargs):
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;debug &lt;span style="color: #AA22FF; font-weight: bold"&gt;and&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;_got_first_request:
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;raise&lt;/span&gt; &lt;span style="color: #D2413A; font-weight: bold"&gt;AssertionError&lt;/span&gt;(&lt;span style="color: #BB4444"&gt;&amp;#39;A setup function was called after the &amp;#39;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;&amp;#39;first request was handled.  This usually indicates a bug &amp;#39;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;&amp;#39;in the application where a module was not imported &amp;#39;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;&amp;#39;and decorators or other functionality was called too late.&lt;/span&gt;&lt;span style="color: #BB6622; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #BB4444"&gt;&amp;#39;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;&amp;#39;To fix this make sure to import all your view modules, &amp;#39;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;&amp;#39;database models and everything related at a central place &amp;#39;&lt;/span&gt;
                &lt;span style="color: #BB4444"&gt;&amp;#39;before the application starts serving requests.&amp;#39;&lt;/span&gt;)
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; f(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, &lt;span style="color: #666666"&gt;*&lt;/span&gt;args, &lt;span style="color: #666666"&gt;**&lt;/span&gt;kwargs)
    &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; update_wrapper(wrapper_func, f)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;Line 6：这里确保用&lt;code&gt;setupmethod&lt;/code&gt;装饰的函数在被实际调用之前，都会去检查&lt;code&gt;self._got_first_request&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Line 14：这里的&lt;code&gt;f(self, *args, **kwargs)&lt;/code&gt;确保&lt;code&gt;setupmethod&lt;/code&gt;装饰器可以装饰任何参数形式的函数&lt;/li&gt;
&lt;li&gt;Line 15: update_wrapper是functools包提供的一个函数。用来确保被装饰的函数依然可以支持Python的反射机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="locked_cached_property"&gt;locked_cached_property&lt;/h3&gt;
&lt;h4 id="_4"&gt;需求&lt;/h4&gt;
&lt;p&gt;有些属性的计算比较昂贵，如果这个属性又是非常经常被调用。那么把这个属性计算一次后，缓存起来，以确保下次访问时直接访问计算过的值。这个对性能的优化是比较有帮助的。&lt;/p&gt;
&lt;h4 id="_5"&gt;解决方案&lt;/h4&gt;
&lt;p&gt;Flask定义了&lt;code&gt;locked_cached_property&lt;/code&gt;装饰器来实现上述的需求。同时还提供了锁以保存并发线程访问的安全性。&lt;/p&gt;
&lt;h4 id="_6"&gt;源码分析&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;locked_cached_property&lt;/code&gt;装饰器源码定义在&lt;a href="https://github.com/mitsuhiko/flask/blob/0.10-maintenance/flask/helpers.py"&gt;helpers.py&lt;/a&gt;里：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #0000FF"&gt;locked_cached_property&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;object&lt;/span&gt;):
    &lt;span style="color: #BB4444; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;A decorator that converts a function into a lazy property.  The&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    function wrapped is called the first time to retrieve the result&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    and then that calculated result is used the next time you access&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    the value.  Works like the one in Werkzeug but has a lock for&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    thread safety.&lt;/span&gt;
&lt;span style="color: #BB4444; font-style: italic"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;__init__&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, func, name&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;, doc&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;):
        &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;__name__ &lt;span style="color: #666666"&gt;=&lt;/span&gt; name &lt;span style="color: #AA22FF; font-weight: bold"&gt;or&lt;/span&gt; func&lt;span style="color: #666666"&gt;.&lt;/span&gt;__name__
        &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;__module__ &lt;span style="color: #666666"&gt;=&lt;/span&gt; func&lt;span style="color: #666666"&gt;.&lt;/span&gt;__module__
        &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;__doc__ &lt;span style="color: #666666"&gt;=&lt;/span&gt; doc &lt;span style="color: #AA22FF; font-weight: bold"&gt;or&lt;/span&gt; func&lt;span style="color: #666666"&gt;.&lt;/span&gt;__doc__
        &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;func &lt;span style="color: #666666"&gt;=&lt;/span&gt; func
        &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;lock &lt;span style="color: #666666"&gt;=&lt;/span&gt; RLock()

    &lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;__get__&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;, obj, &lt;span style="color: #AA22FF"&gt;type&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;):
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; obj &lt;span style="color: #AA22FF; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;None&lt;/span&gt;:
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;
        &lt;span style="color: #AA22FF; font-weight: bold"&gt;with&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;lock:
            value &lt;span style="color: #666666"&gt;=&lt;/span&gt; obj&lt;span style="color: #666666"&gt;.&lt;/span&gt;__dict__&lt;span style="color: #666666"&gt;.&lt;/span&gt;get(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;__name__, _missing)
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;if&lt;/span&gt; value &lt;span style="color: #AA22FF; font-weight: bold"&gt;is&lt;/span&gt; _missing:
                value &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;func(obj)
                obj&lt;span style="color: #666666"&gt;.&lt;/span&gt;__dict__[&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;__name__] &lt;span style="color: #666666"&gt;=&lt;/span&gt; value
            &lt;span style="color: #AA22FF; font-weight: bold"&gt;return&lt;/span&gt; value
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Line 1: 注意这里使用类来实现装饰器，而不是我们常见的函数。&lt;br /&gt;
Line 14: 这里用RLock来实现并发线程访问安全性。&lt;br /&gt;
Line 16: 这里实现了&lt;code&gt;__get__&lt;/code&gt;，即&lt;code&gt;locked_cached_property&lt;/code&gt;是一个non-data descriptor类。&lt;/p&gt;
&lt;p&gt;我们看一下&lt;a href="https://github.com/mitsuhiko/flask/blob/0.10-maintenance/flask/app.py"&gt;app.py&lt;/a&gt;里的&lt;code&gt;name&lt;/code&gt;方法对这个装饰器是怎么使用的：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF"&gt;@locked_cached_property&lt;/span&gt;
&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;name&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;):
    &lt;span style="color: #666666"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据python decorator原理，上述代码实际上相当于下面的python代码：&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #AA22FF; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #00A000"&gt;name&lt;/span&gt;(&lt;span style="color: #AA22FF"&gt;self&lt;/span&gt;):
    &lt;span style="color: #666666"&gt;...&lt;/span&gt;
name &lt;span style="color: #666666"&gt;=&lt;/span&gt; locked_cached_property(name)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;根据python descriptor协议，Line 3的代码实际上就是定义了一个类的只读属性。即访问&lt;code&gt;app.name&lt;/code&gt;时，实际上执行的是&lt;code&gt;locked_cached_property.__get__&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;这样就实现了&lt;code&gt;app.name&lt;/code&gt;属性只计算一次，且并发访问安全的需求。当然，实现这一需求的方案有很多种，Flask里使用的这种实现方法优雅且pythonic。更重要的是，它使用了AOP(Aspect-Orient Program)编程思想，提高了代码的可复用性。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;专业术语&lt;/p&gt;
&lt;p&gt;如果你对本文使用的很多专业术语感到困惑，可阅读另外一篇&lt;a href="http://blog.kamidox.com/python-features.html"&gt;介绍Python特性&lt;/a&gt;的文章。它是一个网络上一些优秀文章的资源集合。&lt;/p&gt;
&lt;/div&gt;</summary><category term="python"></category><category term="decorator"></category></entry><entry><title>Werkzeug简介</title><link href="http://blog.kamidox.com/werkzeug-overview.html" rel="alternate"></link><updated>2014-10-02T20:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-10-02:werkzeug-overview.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#werkzeug"&gt;什么是Werkzeug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#werkzeug_1"&gt;Werkzeug包含哪些内容的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#werkzeug_2"&gt;关于Werkzeug作者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-next"&gt;What&amp;rsquo;s next?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="werkzeug"&gt;什么是Werkzeug&lt;/h2&gt;
&lt;p&gt;官网的描述是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Werkzeug is a WSGI utility library for Python. It&amp;rsquo;s widely used and BSD licensed. &amp;ndash; &lt;a href="http://werkzeug.pocoo.org/"&gt;Zerkzeug&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么又是WSGI呢？WSGI的全称是Web Server Gateway Interface，它是用来定义web服务器接口的一个规范。简单地讲，就是定义http服务器应该长什么样子，能处理哪些事情。&lt;a href="http://legacy.python.org/dev/peps/pep-3333/"&gt;PEP333&lt;/a&gt;就是对这个规范的详细描述。&lt;/p&gt;
&lt;p&gt;Werkzeug就是用python对WSGI的实现一个通用库。它是&lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;所使用的底层WSGI库。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mitsuhiko/werkzeug"&gt;Werkzeug的源码&lt;/a&gt;在托管在GitHub，目前的开发还是很活跃的状态。&lt;/p&gt;
&lt;h2 id="werkzeug_1"&gt;Werkzeug包含哪些内容的实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTTP头的解析&lt;/li&gt;
&lt;li&gt;易用使用的request和response对象&lt;/li&gt;
&lt;li&gt;基于交互风格的JavaScript脚本语言的浏览器调试器&lt;/li&gt;
&lt;li&gt;与 WSGI 1.0 规范100%兼容&lt;/li&gt;
&lt;li&gt;支持Python 2.6, 2.7和3.3&lt;/li&gt;
&lt;li&gt;Unicode支持&lt;/li&gt;
&lt;li&gt;HTTP Session和签名Cookie支持&lt;/li&gt;
&lt;li&gt;URI和IRI处理函数，包含对Unicode的支持&lt;/li&gt;
&lt;li&gt;内置兼容一些非标准的WSGI服务器和浏览器&lt;/li&gt;
&lt;li&gt;集成了URLs路由功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="werkzeug_2"&gt;关于Werkzeug作者&lt;/h2&gt;
&lt;p&gt;Werkzeug的作者是&lt;a href="https://github.com/mitsuhiko"&gt;Armin Ronacher&lt;/a&gt;，它是个高产的程序员。从Werkzeug，到Flask，再到Jinja2几乎一个人包圆了。它的&lt;a href="http://lucumr.pocoo.org/"&gt;博客&lt;/a&gt;上也经常分享一些很有价值文章，对Python编程感兴趣的朋友可以读一读。&lt;/p&gt;
&lt;p&gt;看到过一个对Werkzeug和Flask源码的评价：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most pythonic code and write for human being&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;挖个大坑：阅读Werkzeug源码，总结一些有价值的信息，写成博文。&lt;/p&gt;</summary><category term="python"></category><category term="wekzeug"></category></entry><entry><title>用sublime来撰写markdown文档</title><link href="http://blog.kamidox.com/write-markdown-using-sublime.html" rel="alternate"></link><updated>2014-09-22T20:20:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-09-22:write-markdown-using-sublime.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;摘要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#markdown"&gt;什么是markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#markdown-preview"&gt;安装Markdown Preview插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#markdown-preview_1"&gt;配置Markdown Preview插件&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;配置快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;代码高亮&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#css"&gt;配置css文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#markdown_1"&gt;几个常用的markdown语法示例&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;标题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;弹出式注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;定义列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;代码片段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;角注&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;表格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;警告&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;强调&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;超链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_15"&gt;图片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_16"&gt;目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_17"&gt;练习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_18"&gt;最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;摘要&lt;/h2&gt;
&lt;p&gt;本文包含两部分内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在sublime里安装Markdown Preview插件来实现markdown文件的预览&lt;/li&gt;
&lt;li&gt;介绍markdown常用的语法，让初次接触markdown的人可以在短时间内掌握常用的语法和句法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="markdown"&gt;什么是markdown&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdown 是一种轻量级标记语言，它允许人们使用&lt;strong&gt;易读易写&lt;/strong&gt;的&lt;strong&gt;纯文本格式&lt;/strong&gt;编写文档，然后转换成&lt;strong&gt;格式丰富的HTML页面&lt;/strong&gt;。    —— &lt;a href="https://zh.wikipedia.org/wiki/Markdown"&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="markdown-preview"&gt;安装Markdown Preview插件&lt;/h2&gt;
&lt;p&gt;推荐的安装方法是通过&lt;a href="https://sublime.wbond.net/"&gt;Package Control&lt;/a&gt;来安装：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果你的sublime还没有安装&lt;a href="https://sublime.wbond.net/"&gt;Package Control&lt;/a&gt;，需要先点击&lt;a href="https://sublime.wbond.net/"&gt;这里&lt;/a&gt;查看安装方法&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;ctrl + shift + P&lt;/code&gt; 来打开命令窗口，输入并选择 &lt;code&gt;Package Control: Install Package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在弹出的窗口里，输入 &lt;code&gt;Markdown Preview&lt;/code&gt;并按回车来完成安装&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="markdown-preview_1"&gt;配置Markdown Preview插件&lt;/h2&gt;
&lt;h3 id="_2"&gt;配置快捷键&lt;/h3&gt;
&lt;p&gt;通过 &lt;code&gt;Preferences -&amp;gt; Key Bindings - User&lt;/code&gt;打开sublime的快捷键配置文件，把下面内容复制到这个设置文件里保存。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;{ &lt;span style="color: #008000; font-weight: bold"&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;: [&lt;span style="color: #BB4444"&gt;&amp;quot;alt+m&amp;quot;&lt;/span&gt;], &lt;span style="color: #008000; font-weight: bold"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;: &lt;span style="color: #BB4444"&gt;&amp;quot;markdown_preview&amp;quot;&lt;/span&gt;, &lt;span style="color: #008000; font-weight: bold"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;: {&lt;span style="color: #008000; font-weight: bold"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;: &lt;span style="color: #BB4444"&gt;&amp;quot;browser&amp;quot;&lt;/span&gt;, &lt;span style="color: #008000; font-weight: bold"&gt;&amp;quot;parser&amp;quot;&lt;/span&gt;:&lt;span style="color: #BB4444"&gt;&amp;quot;markdown&amp;quot;&lt;/span&gt;} }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置完成后，按下&lt;code&gt;alt + m&lt;/code&gt;即可直接在浏览器里预览markdown的写作效果。&lt;/p&gt;
&lt;h3 id="_3"&gt;代码高亮&lt;/h3&gt;
&lt;p&gt;markdown里嵌入的代码在生成html文档时，支持根据语言高亮显示。通过 &lt;code&gt;Preferences -&amp;gt; Package Settings -&amp;gt; Markdown Preview -&amp;gt; Settings-User&lt;/code&gt; 来打开用户设置文件，加入如下内容即可打开代码高亮功能。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;{
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;quot;enable_highlight&amp;quot;&lt;/span&gt;: &lt;span style="color: #AA22FF; font-weight: bold"&gt;true&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果需要更高级的高亮显示，比如指定代码高亮的风格(emacs, vim etc.)，则可以自定义 &lt;code&gt;codehilite&lt;/code&gt; 扩展来实现。在Markdown Preview用户设置文件里加入如下内容即可。本文就是使用 &lt;code&gt;emacs&lt;/code&gt; 高亮风格来显示代码的。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;{
    &lt;span style="color: #008000; font-weight: bold"&gt;&amp;quot;enabled_extensions&amp;quot;&lt;/span&gt;: [
            &lt;span style="color: #BB4444"&gt;&amp;quot;extra&amp;quot;&lt;/span&gt;,
            &lt;span style="color: #BB4444"&gt;&amp;quot;github&amp;quot;&lt;/span&gt;,
            &lt;span style="color: #BB4444"&gt;&amp;quot;toc&amp;quot;&lt;/span&gt;,
            &lt;span style="color: #BB4444"&gt;&amp;quot;headerid&amp;quot;&lt;/span&gt;,
            &lt;span style="color: #BB4444"&gt;&amp;quot;meta&amp;quot;&lt;/span&gt;,
            &lt;span style="color: #BB4444"&gt;&amp;quot;sane_lists&amp;quot;&lt;/span&gt;,
            &lt;span style="color: #BB4444"&gt;&amp;quot;smarty&amp;quot;&lt;/span&gt;,
            &lt;span style="color: #BB4444"&gt;&amp;quot;wikilinks&amp;quot;&lt;/span&gt;,
            &lt;span style="color: #BB4444"&gt;&amp;quot;admonition&amp;quot;&lt;/span&gt;,
            &lt;span style="color: #BB4444"&gt;&amp;quot;codehilite(guess_lang=False,pygments_style=emacs)&amp;quot;&lt;/span&gt;
        ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;关于pygments&lt;/p&gt;
&lt;p&gt;pygments_style可以用来指定代码高亮的风格。Markdown Preview使用pygments来完成代码高亮。关于pygments以及更多可用的内置代码高亮风格，可访问&lt;a href="http://pygments.org/docs/styles/"&gt;pygments官网&lt;/a&gt;查阅相关文档。&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="css"&gt;配置css文件&lt;/h3&gt;
&lt;p&gt;Markdown Preview生成的HTML文件，在浏览器里查看时其默认的宽度为45em，如果你觉得生成的网页太窄，可以修改一下css文件。&lt;br /&gt;
打开Markdown Preview的安装目录，找到markdown.css和github.css文件，查找下面的内容：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;    &lt;span style="color: #008000; font-weight: bold"&gt;body&lt;/span&gt; {
      &lt;span style="color: #AA22FF; font-weight: bold"&gt;width&lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt; &lt;span style="color: #666666"&gt;45em&lt;/span&gt;;
      &lt;span style="color: #AA22FF; font-weight: bold"&gt;border&lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt; &lt;span style="color: #666666"&gt;1px&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;solid&lt;/span&gt; &lt;span style="color: #666666"&gt;#ddd&lt;/span&gt;;
      &lt;span style="color: #AA22FF; font-weight: bold"&gt;outline&lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt; &lt;span style="color: #666666"&gt;1300px&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;solid&lt;/span&gt; &lt;span style="color: #666666"&gt;#fff&lt;/span&gt;;
      &lt;span style="color: #AA22FF; font-weight: bold"&gt;margin&lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt; &lt;span style="color: #666666"&gt;16px&lt;/span&gt; &lt;span style="color: #AA22FF; font-weight: bold"&gt;auto&lt;/span&gt;;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把里面的&lt;strong&gt;45em&lt;/strong&gt;修改为&lt;strong&gt;80%&lt;/strong&gt;或者你认为合适的尺寸即可。&lt;/p&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;sublime安装包目录与格式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Linux环境&lt;/strong&gt;&lt;br /&gt;
通过 &lt;code&gt;Package Control: List Packages&lt;/code&gt; ，在己安装的Packages里选择 &lt;code&gt;Markdown Preview&lt;/code&gt; 会直接打开Markdown Preview的安装目录，在打开的目录中直接可以找到markdown.css和github.css。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows环境&lt;/strong&gt;&lt;br /&gt;
在sublime安装目录下，找到 &lt;code&gt;Data\Installed Packages&lt;/code&gt; 目录，这个目录就是安装包的目录。如果已经安装好Markdown Preview，可以看到文件 &lt;code&gt;Markdown Preview.sublime-package&lt;/code&gt; 。这个其实是一个zip包。直接用系统里的压缩工具打开，然后在压缩包的根目录下查找markdown.css和github.css，按照上述方法修改即可。&lt;strong&gt;修改完成需要保存回压缩包&lt;/strong&gt;。在打开压缩包修改的时候，必须关闭sublime，否则无法修改成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="markdown_1"&gt;几个常用的markdown语法示例&lt;/h2&gt;
&lt;h3 id="_4"&gt;标题&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;标题1
=====

#标题1

##标题2

###标题3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_5"&gt;列表&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;###无序列表1

* 列表1
* 列表2
* 列表3

###无序列表2

- 列表1
- **列表2**
- 列表3

###有序列表

1. 列表1
2. 列表2
3. 列表3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;弹出式注释&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;把鼠标停留在**HTML**和**W3C**上看会发生什么。

*[HTML]: Hyper Text Markup Language
*[W3C]: World Wide Web Consortium
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_7"&gt;定义列表&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;Apple
:   Pomaceous fruit of plants of the genus Malus in
    the family Rosaceae.

Orange
:   The fruit of an evergreen tree of the genus Citrus.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_8"&gt;代码片段&lt;/h3&gt;
&lt;p&gt;GitHub格式的代码片段：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;```python
#!python
# -*- coding: utf-8 -*-
from flask import Flask, render_template

app = Flask(__name__)
app.debug = APP_DEBUG

#homepage just for fun
@app.route(&amp;#39;/&amp;#39;)
def home():
    return render_template(&amp;#39;index.html&amp;#39;)
```
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Markdown官方推荐的代码片段格式是直接缩进4个空格：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;    #!python
    # -*- coding: utf-8 -*-

    if __name__ == &amp;#39;__main__&amp;#39;:
        print(&amp;#39;Hello World&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果不显示代码行号，则可使用下面的格式：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;    :::python
    # -*- coding: utf-8 -*-

    if __name__ == &amp;#39;__main__&amp;#39;:
        print(&amp;#39;Hello World&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于代码片段及高亮以及行号显示，可参阅&lt;a href="https://pythonhosted.org/Markdown/extensions/code_hilite.html"&gt;codehilite&lt;/a&gt;扩展的官方文档。&lt;/p&gt;
&lt;h3 id="_9"&gt;角注&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;Footnotes[^1] have a label[^@#$%] and the footnote&amp;#39;s content.

[^1]: This is a footnote content.
[^@#$%]: A footnote on the label: &amp;quot;@#$%&amp;quot;.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_10"&gt;表格&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;First Header  | Second Header
--------------|--------------
Content Cell  | Content Cell
Content Cell  | Content Cell
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_11"&gt;警告&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;####hint类型的警告
!!! hint &amp;quot;subject of hint&amp;quot;
    Any number of other indented markdown elements.

####note类型的警告
!!! note &amp;quot;subject of note&amp;quot;
    Any number of other indented markdown elements.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;警告有多种类型，类型不同生成的html文档样式也不一样，可用的样式有 &lt;code&gt;hint, attention, caution, danger, question, note&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id="_12"&gt;强调&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;这是**黑体**写法
这是*斜体*的写法
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_13"&gt;超链接&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;这是一个[链接](https://github.com/kamidox/blogs)
这是另外一种[链接][1]的形式

[1]: https://pythonhosted.org/Markdown/extensions/index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_14"&gt;引用&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&amp;gt; 引用的文字内容
&amp;gt; 这是另外的引用内容
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_15"&gt;图片&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;![图片描述](https://raw.githubusercontent.com/kamidox/blogs/master/kamidox_icon.png)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_16"&gt;目录&lt;/h3&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;[TOC]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_17"&gt;练习&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;直接在配置好的sublime里新建一个readme.md，把上面的markdown语法拷贝进去练习一下。&lt;/li&gt;
&lt;li&gt;推荐一个做得相当不错的markdown在线编辑器&lt;a href="http://maxiang.info/"&gt;马克飞象&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;本文就是用markdown编写的。右键点击&lt;a href="https://raw.githubusercontent.com/kamidox/blogs/master/tools/write_markdown_using_sublime.md"&gt;这里&lt;/a&gt;，另存到本地即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_18"&gt;最佳实践&lt;/h2&gt;
&lt;p&gt;Windows下可以使用sublime对markdown进行编辑预览。但Linux下要让sublime支持中文输入还需要折腾一番。个人认为最佳实践是这样的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Windows下，使用sublime对markdown进行编辑，预览。&lt;/li&gt;
&lt;li&gt;Linux下，直接使用gedit对markdown进行编辑。gedit的markdown语法高亮看起来非常舒服。编辑完成后，用sublime打开预览效果。&lt;/li&gt;
&lt;/ol&gt;</summary><category term="sublime"></category><category term="markdown"></category></entry><entry><title>About</title><link href="http://blog.kamidox.com/about.html" rel="alternate"></link><updated>2014-07-01T00:00:00+08:00</updated><author><name>Joey Huang</name></author><id>tag:blog.kamidox.com,2014-07-01:about.html</id><summary type="html">&lt;p&gt;&lt;img alt="ABOUT ME" src="https://raw.githubusercontent.com/kamidox/blogs/master/kamidox_icon_mini.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;兰生幽谷，不以无人而不芳&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A programmer mainly on C|Android|Python&lt;/p&gt;
&lt;p&gt;这是我的后花园。得闲来此浇浇花锄锄草。忙时草长茑飞也别有洞天。&lt;/p&gt;
&lt;h2 id="_1"&gt;联系我&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Email: kamidox[AT]qq.com&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href="https://github.com/kamidox/"&gt;kamidox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新浪微博: &lt;a href="http://weibo.com/kamidox"&gt;@kamidox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;微信公众帐号: 搜索&lt;code&gt;producthunt&lt;/code&gt;或扫描下面二维码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="producthunt" src="https://raw.githubusercontent.com/kamidox/weixin_producthunt/master/weixin/static/img/qrcode_for_producthunt_weixin.jpg" /&gt;&lt;/p&gt;</summary></entry></feed>